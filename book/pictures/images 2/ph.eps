%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft PowerPoint - 2009.ppt)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 14:54:21 01/21/10
%%For: (leboudec)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 111 64 752 449
%%HiResBoundingBox: 111.085 64.3869 752.124 448.586
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3690 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2010-01-21T14:54:21+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-01-21T14:54:21+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-01-21T14:54:21+01:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:66773F7A9406DF118AADBE3AA1D73A5D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:66773F7A9406DF118AADBE3AA1D73A5D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:af935773-c9f0-4452-870d-c84d2da2dd85</stRef:instanceID>
            <stRef:documentID>uuid:7a59fe95-6708-4c18-81ed-621115538695</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Microsoft PowerPoint - 2009.ppt</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>leboudec</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
111.085 64.3869 641.039 384.199 rectclip
[ 0 -1 1 0 46.6981 559.6709 ] concat
/N12 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

q
111.085 64.3869 m
495.284 64.3869 l
495.284 705.426 l
111.085 705.426 l
h
W
n
n
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E1 exch /ColorSpace defineRes

cs 1.0 1.0 1.0 sc
36.000000 36.000000 540.000000 720.000000 rectfill

0.0 0.0 0.0 sc
%ADOBeginSubsetFont: XKLAAA+LucidaConsole-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XKLAAA+LucidaConsole)
%%Title: (XKLAAA+LucidaConsole Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XKLAAA+LucidaConsole def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -211 603 789} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 666 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 1 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7C05416F1DCB0F0AF29A8BCF3EFE4EE6170069BF696F1511
3303266AE97CC> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XKLAAA+LucidaConsole-Identity-H /Identity-H 0 [/XKLAAA+LucidaConsole] ct_ComposeFont pop end end
%ADOEndSubsetFont
%%BeginResource: encoding
% Identity-H
%PDF_BeginEncoding: N10 (XKLAAA+LucidaConsole-Identity-H)
/N10 (XKLAAA+LucidaConsole-Identity-H) /Identity-H [ (XKLAAA+LucidaConsole) ]
 /NoSubstitution [ /Serif ] 0 TZzero
%%EndResource
308.76 76.62 m
%ADOBeginSubsetFont: XKLAAA+LucidaConsole-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
/XKLAAA+LucidaConsole 1 GetGlyphDirectory
416 <001C60D8A8C9B7C05416B20A17EED9534D22D3E8E4D0D7C0F1544549B05
E56D3620B2B66CCCA383030D18BE51E900BC36746DDAAA95EA571A60FED2116D
29058F9A4A6D237374788E7F4B2A7804E01CF20C15499F8831EBEA11EDDB2902
9D08D56BB5C043868BC819E398CBA609FF61AA7DC6D5DB91C682C96D116782D6
50401640B672DED7F48EDC6D091F5BF7268ADFF6E4AF618FF74660375A26658D
2E58EB99C1D362E5AF579CCA9272E58CA> |
!
end
end end
%ADOEndSubsetFont
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\240) show
%ADOBeginSubsetFont: WKFBAA+LucidaConsole Initial
ct_T42Dict begin
0 -0.211 0.602 0.789
 256 array 0 1 255 {1 index exch /.notdef put} for  /WKFBAA+LucidaConsole
Type42DictBegin
[<00010000000c000c000c000c4f532f32845abc6f000000cc000000566376
742043d44d8a00000124000000f46670676d2e51ca03000002180000001d
676c796695d61f610000163000000d4a68656164be6f1343000002380000
0036686865610b2405be0000027000000024686d74788a5676a100000294
00000a686c6f6361c64bc21100000cfc000005366d617870043a01f70000
1234000000206e616d65d0cbce1700001254000002dc7072657016d54a67
00001530000000fe67646972000000000000000000000000000104d20190
00040008059a0533000000a3059a0533000001d5006602430809020b0609
0405040202048000028f0000180000000000000000004226482000400020
fb020644fe5c00a7065001b00000001fd7d7000000000000ffe10000ffe7
0000ffdb05030522043e045605c805ed062b0644fe75fe5c00c500d20094
00b9065000afffffffffffffffff05c800de06440142ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffff008900a1ffffffffffff00ca00f7053400ad00ac00bb00a800ba0425
001901a300de003200f7021f00960170007b006302a602e4fed800880128
0141021f00a5003a00a600ad026900b4002b00ad005cfeb9007c004c006f
007e00b9008700e400ab007f029a064400f7012804a00281004a02da0303
00190141012800f7008800a80206fe50065000cd006900950078b11f0f2c
23208a8a45505821211b4544592d2c4b525845441b2121592d0000000001
000000004000c1a3ef6b5f0f3cf5000b080000000000a9117a1d00000000
b16e0f850000fe5004d206500000000c0001000000000000000100000650
fe50000004d30000000004d200010000000000000000000000000000029a
04d2010004d2000004d2000004d2000004d201ed04d200f704d2003404d2
00d804d2000004d2001804d201d504d2015904d2009404d200a404d20056
04d201d504d200d204d201d504d2004b04d2006f04d200b904d200a804d2
00ea04d2006f04d2010e04d200a204d200c904d200a004d2009504d201d5
04d201d504d2005604d2005604d2005604d200a404d2004a04d2000c04d2
00b904d2006604d2008204d200d804d200f704d2004d04d2009404d200ad
04d200c504d200aa04d200de04d2005e04d2009404d2003e04d200e404d2
003e04d200b804d200a404d2001904d2009904d2000e04d2001004d2000b
04d2002004d2006304d201bc04d2004a04d200ad04d2005604d2000004d2
017204d2008804d200ad04d200a304d2007f04d2008d04d2009404d2007b
04d200b604d200ad04d2009404d200d504d200ad04d2005d04d200b604d2
006904d200b304d2006f04d2013404d200bb04d2008204d200b004d2003e
04d2000c04d2005d04d2005504d2008804d200ea04d2021f04d200d204d2
005604d2000c04d2000c04d2006604d200d804d2009404d2003e04d20099
04d2008804d2008804d2008804d2008804d2008804d2008804d200a304d2
008d04d2008d04d2008d04d2008d04d200ad04d200ad04d200ad04d200ad
04d200b604d2006904d2006904d2006904d2006904d2006904d200b004d2
00b004d200b004d200b004d200c504d2018804d200c504d200fb04d200d9
04d2014104d2007d04d200bf04d200ad04d2003e04d2006004d2017204d2
011c04d2005604d2000004d2003e04d2001904d2005604d2005604d20056
04d2003204d200b604d200ac04d2003004d2004404d2003804d200ed04d2
00ed04d200de04d2003104d2003104d2006904d2009404d201ed04d20056
04d2000004d2002704d2005604d2001f04d2007504d2008c04d2006b04d2
000004d2000c04d2000c04d2003e04d2004a04d2003104d2008804d2003e
04d200f704d200f704d201d504d201d504d2005604d2001904d2005504d2
002004d2006f04d2015b04d2015b04d2007b04d2007b04d200c504d20141
04d201d504d200f704d2000004d2000c04d200d804d2000c04d200d804d2
00d804d200ad04d200ad04d200ad04d200ad04d2003e04d2003e04d2003e
04d2009904d2009904d2009904d200ad04d2010304d2011c04d2012804d2
011c04d201fa04d201b404d201ef04d2014004d201a604d2010304d20000
04d200ad04d200a404d200bb04d2006304d2008804d2021f04d2000604d2
007004d2002004d2005504d200e404d200b304d2005604d2004c04d20157
04d2012e04d2013904d2000004d2000004d2002a04d2001904d2004d04d2
007b04d200ad04d200a404d200bb04d2006604d200a304d2006604d200a3
04d2007f04d200d204d2000004d201ed04d2000c04d2008804d2000c04d2
008804d2000c04d2008804d2006604d200a304d2006604d200a304d20082
04d2005104d2000604d200d804d2008d04d200d804d2008d04d200d804d2
008d04d200d804d2008d04d200d804d2008d04d2004d04d2007b04d2004d
04d2007b04d2004d04d2007b04d2009404d200b604d2001904d2002204d2
00ad04d200ad04d200ad04d200ad04d200ad04d200ad04d200ad04d200ad
04d2003104d2003e04d200c504d2009404d200aa04d200d504d200f504d2
00de04d200ad04d200de04d200ad04d200de04d2009404d200de04d200ad
04d2009404d200b604d2009404d200b604d2009404d200b604d2005304d2
009404d200b604d2003e04d2006904d2003e04d2006904d2003e04d20069
04d200b804d2013404d200b804d2012504d200b804d2013404d200a404d2
00bb04d200a404d200bb04d2001904d2008204d2001904d2008204d20019
04d2008204d2009904d200b004d2009904d200b004d2009904d200b004d2
009904d200b004d2009904d200b004d2009904d200b004d2001004d2000c
04d2002004d2005504d2006304d2008804d2006304d2008804d200ff04d2
000c04d2008804d2000004d2003104d2003d04d2006804d201d504d20206
04d200de04d2000c04d201ed04d2000c04d2000004d2000c04d2000004d2
000004d2000004d2007304d2000c04d200b904d200f704d2000c04d200d8
04d2006304d2009404d2003e04d200ad04d200aa04d2000c04d2005e04d2
009404d2003e04d2003e04d2009404d200e404d2004704d2001904d2000c
04d2001604d2000b04d2000c04d2003104d200ad04d2000c04d2005d04d2
009704d2007404d2019704d200b304d2005d04d200c504d2000c04d2007b
04d2009704d2001f04d2007404d2007b04d2019704d200c504d2003604d2
00b604d2002b04d2000c04d2006904d200b304d2008504d2003e04d20038
04d200b304d2003104d2003204d2002c04d2002504d200de04d200b304d2
006904d200b304d2002504d200d804d2000c04d200f704d2006904d200a4
04d200ad04d200ad04d200c504d2000004d2006f04d2000604d200cd04d2
002504d2007b04d2000c04d200d204d200b904d200f704d2001c04d200d8
04d2000604d2006004d2009404d2009404d200cd04d2001904d2005e04d2
009404d2003e04d2009404d200e404d2006604d2001904d2002504d20016
04d2000b04d2007804d2009104d2004a04d2004a04d2001304d2006304d2
00e404d2005604d2002b04d2000c04d2008804d2007b04d200bb04d200f7
04d2003404d2008d04d2001a04d200bc04d200a304d200a304d200f504d2
002b04d2007804d200b304d2006904d200c504d200b304d200a304d2004a
04d2005504d2003e04d2005d04d200a004d2007b04d2004a04d2004a04d2
002b04d2006304d2010304d2009404d2004a04d2006f04d2008d04d20022
04d200f704d2009a04d200bb04d200ad04d200ad04d2009404d2000c04d2
005c04d2002204d200f504d2005504d200c504d200f704d200f704d20010
04d2000c04d2001004d2000c04d2001004d2000c04d2002004d2005504d2
006304d2000004d2010f04d2000004d2000004d2010304d200fb04d20019
04d2003e04d2000004d2000f04d2000f04d2000f04d2005604d2014104d2
005604d2014104d2005604d2014104d2014104d2005604d2005604d20056
04d2008804d2005604d2020604d200b904d2000004d2021f04d2021f04d2
000004d2021f04d2000004d2021f04d2000004d2000004d2000004d20000
04d2000004d2018b04d2021f04d2018b04d2018b04d2000004d2000004d2
000004d2021f04d2018b04d2018b04d2000004d2000004d2000004d2021f
04d2018b04d2018b04d2000004d2000004d2000004d2000004d2000004d2
000004d2000004d2000004d2000004d2000004d2000004d2000004d20000
04d2000004d2000004d2000004d2026904d2000004d2000004d2000004d2
004a04d2004a04d2003804d2003804d2003804d2003804d2003e04d20000
04d2000004d2003e04d2003e04d2003d04d2007b04d2000604d2001904d2
001904d2001904d2001904d2005804d2001704d2010b04d2011c04d2014d
04d2011c04d201b004d2020604d2013b04d2010b04d2017e04d2017e04d2
020604d200aa04d200d504d200de04d200ad04d2009404d200b604d200b8
04d2013404d200a404d200bb04d2001904d2008204d30012000000150015
001500150015001500150015001500150015001500150015001500410057
00570057009e00cd012d012d012d012d012d012d012d012d012d012d012d
012d012d012d012d012d012d012d012d0163016301630195019501950195
019501950195019501d801d801d801d801d801d801d801d8025402540254
02540254025402540254025402ba02ba02ba02ba030f030f037003700399
03d503d503f303f30433047f04cd04cd050b050b055005500550055005d4
06250625062506250625067a067a067a067a067a067a067a067a067a067a
067a067a067a067a067a067a067a067a067a067a067a067a067a067a067a
067a067a067a067a067a067a067a067a067a067a067a067a067a067a067a
067a067a067a067a067a067a067a067a067a067a067a067a067a067a067a
067a067a067a067a067a067a067a067a067a067a067a067a067a067a067a
067a067a067a067a06a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a506a506a506a506a506a506a506a506a506a506a506a5
06a506a506a506a5000000010000029a0078001e00450005000200100016
0096000000d30121000300010000000c00960001000000000000003b0000
00010000000000030014003b00010000000000040014004f000100000000
0006001400630001000000000007003900770003000104090000007600b0
0003000104090001002801260003000104090002000e014e000300010409
00030028015c0003000104090004002801840003000104090006002801ac
0003000104090007007201d4436f7079726967687420a920313939332042
6967656c6f77202620486f6c6d657320496e632e20416c6c207269676874
732072657365727665642e4b50414f46482b4c7563696461436f6e736f6c
654b50414f46482b4c7563696461436f6e736f6c654b50414f46482b4c75
63696461436f6e736f6c654c756369646120697320612072656769737465
7265642074726164656d61726b206f6620426967656c6f77202620486f6c
6d657320496e632e0043006f0070007900720069006700680074002000a9
0020003100390039003300200042006900670065006c006f007700200026
00200048006f006c006d0065007300200049006e0063002e00200041006c
006c00200072006900670068007400730020007200650073006500720076
00650064002e004b00500041004f00460048002b004c0075006300690064
00610043006f006e0073006f006c00650052006500670075006c00610072
004b00500041004f00460048002b004c007500630069006400610043006f
006e0073006f006c0065004b00500041004f00460048002b004c00750063
0069006400610043006f006e0073006f006c0065004b00500041004f0046
0048002b004c007500630069006400610043006f006e0073006f006c0065
004c00750063006900640061002000690073002000610020007200650067
0069007300740065007200650064002000740072006100640065006d0061
0072006b0020006f006600200042006900670065006c006f007700200026
00200048006f006c006d0065007300200049006e0063002e40461a0a641f
5a4c231f3f08231f0f0e231f0d0c231f0b0a2f1f0a060d1f0504251f0302
2f1f09083c1f01002f1f07062f1f63625a0f5d5be00f5e78e00f785b540f
4d12a00f3d12b80120403b0f3c12f00f3b3ae00f5312131f5110191f4410
a00f7215d20f6210600f5f10e00f5810600f5610e00f5410e00f3e10e00f
3a10b40f3710e00f3233b80120400f0f3310820f1510e00f1310e00f1110
b80140401b0f12109e0f1012121f0f1c701c701d801d041f066f069f0603
3201b901ff00084b5358b001b0018e59858d4b5358b0801d597373012b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b000000>
[3403 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 0 0 <00020100000003d205000003000700002111211125211121010002d2fd6e
0252fdae0500fb0040048000>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
end
end
%ADOEndSubsetFont
[/N11 (WKFBAA+LucidaConsole) 1 TZ
313.74 87.48 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 1760 76 <000200ad00000316062b0005000900264015073806390212030800020638
09051002000001000a10de5dccfdd4fd003f3ffd3ffd3130211121352111
033533150238fe750250def703aa94fbc20534f7f700>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/i 76 def
end
WKFBAA+LucidaConsole /Encoding get
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(i) show
350.76 85.26 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\240) show
355.74 96.12 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 1842 77 <00020094fe5d037e062b000f00130033401eae0101113813390812090803
120e0f000d011038130b100008000601061410de5dccccfdd4fd5d003ffd
3ffd3ffd5d31301335163332363511213521111406232201353315949a97
7e5dfe440281c7d98e0150f7fe91a5467fac038f94fc05fde906d7f7f700
>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/j 77 def
end
WKFBAA+LucidaConsole /Encoding get
dup 106 /j put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(j) show
n
320.1 72.0 m
320.187 84.485 315.608 98.195 308.1 108.12 c
303.728 113.89 297.889 119.511 290.64 121.2 c
290.58 121.38 l
290.7 121.44 l
292.2 121.14 l
293.04 120.84 l
294.6 120.12 l
296.239 119.376 297.81 118.485 299.22 117.36 c
302.799 114.927 305.735 111.666 308.34 108.24 c
313.226 101.634 316.729 93.966 318.66 85.98 c
319.366 83.328 319.807 80.612 320.04 77.88 c
320.16 76.68 l
320.28 75.54 l
320.34 74.34 l
320.34 73.2 l
320.4 72.0 l
320.28 71.88 l
320.1 72.0 l
h
291.18 118.2 m
285.72 122.1 l
292.14 124.14 l
f
1 J
1 j
0.75 w
n
250.86 141.72 m
250.86 126.42 260.04 114.0 271.32 114.0 c
282.6 114.0 291.72 126.42 291.72 141.72 c
291.72 157.08 282.6 169.5 271.32 169.5 c
260.04 169.5 250.86 157.08 250.86 141.72 c
h
S
277.62 136.32 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(i) show
n
384.0 189.72 m
384.0 174.42 393.12 162.0 404.46 162.0 c
415.74 162.0 424.86 174.42 424.86 189.72 c
424.86 205.08 415.74 217.5 404.46 217.5 c
393.12 217.5 384.0 205.08 384.0 189.72 c
h
S
410.76 184.32 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(j) show
n
320.1 72.0 m
320.158 93.143 338.934 115.382 360.36 117.06 c
369.749 116.909 377.417 119.823 384.9 125.4 c
391.472 130.417 396.825 137.045 400.32 144.54 c
401.152 146.471 402.047 148.513 402.6 150.54 c
403.2 152.58 l
403.44 153.66 l
403.62 154.68 l
403.86 155.7 l
403.98 157.02 l
404.1 157.14 l
404.22 157.02 l
404.1 155.64 l
403.86 154.62 l
403.68 153.6 l
403.44 152.52 l
403.14 151.5 l
402.565 149.432 401.882 147.39 400.98 145.44 c
397.634 137.649 391.809 130.298 385.02 125.22 c
377.591 119.635 369.78 116.636 360.42 116.82 c
339.297 115.321 320.223 92.861 320.4 72.0 c
320.22 71.88 l
320.1 72.0 l
h
401.04 156.24 m
404.46 162.0 l
406.98 155.76 l
f
n
291.72 141.9 m
299.458 141.185 338.198 145.151 340.74 155.64 c
341.21 166.169 378.557 170.375 384.96 170.16 c
385.08 169.98 l
384.96 169.86 l
383.1 169.8 l
380.82 169.68 l
378.6 169.5 l
376.32 169.32 l
372.045 168.891 367.881 168.166 363.66 167.4 c
358.407 166.269 352.878 164.839 348.0 162.54 c
345.462 161.301 340.802 158.964 340.98 155.58 c
340.595 152.213 335.223 149.661 332.52 148.5 c
326.445 145.942 320.49 144.643 314.04 143.46 c
310.417 142.963 306.835 142.359 303.18 142.14 c
298.62 141.78 l
291.78 141.6 l
291.6 141.72 l
291.72 141.9 l
h
383.94 172.98 m
390.0 170.1 l
384.06 166.98 l
f
n
404.4 217.5 m
404.586 237.793 387.972 262.63 366.66 264.54 c
357.892 264.479 351.082 267.269 344.28 272.7 c
337.728 277.934 332.684 284.925 329.28 292.56 c
328.238 294.938 327.352 297.385 326.64 299.88 c
326.4 300.96 l
326.1 302.04 l
325.92 303.18 l
325.68 304.26 l
325.5 305.34 l
325.32 306.96 l
325.44 307.14 l
325.56 307.08 l
325.62 307.02 l
325.74 305.4 l
325.92 304.32 l
326.16 303.18 l
326.34 302.1 l
326.896 299.808 327.44 297.959 328.26 295.74 c
331.383 287.201 336.723 279.468 343.62 273.54 c
350.687 267.765 357.437 264.749 366.66 264.78 c
375.924 264.178 384.672 258.382 390.78 251.7 c
396.215 245.664 400.367 238.439 402.66 230.64 c
403.334 228.528 403.761 226.348 404.1 224.16 c
404.28 223.02 l
404.4 221.94 l
404.52 220.8 l
404.58 219.72 l
404.64 218.58 l
404.64 217.5 l
404.52 217.38 l
404.4 217.5 l
h
322.56 305.82 m
325.14 312.0 l
328.56 306.18 l
f
338.76 115.26 m
%ADOBeginSubsetFont: XKLAAA+LucidaConsole-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
/XKLAAA+LucidaConsole 1 GetGlyphDirectory
427 <001C60D8A8C9B7C05419A34F20DFBE1893760C4C2048117CCBF16B6FB97
58E4E8CE4D5BAC71CDC5B1E5A682BBEEC8F997A9D656FA71DD0EE4D254729C2B
66407A5E5CE3E0F413514C49C2CF869C36BF6CCA1ACF4F43519AA3F612CAD04E
2845DEB960D6E53010160B860A4B16517F4ADD75589D7> |
!
end
end end
%ADOEndSubsetFont
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\253) show
343.74 126.12 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 42 15 <000101d5febf02fd01280009002d401240004f064e0500084e4600800424
05160a801a104b5358b0437659d6181ac81a3c76fd18003fedfd1a313001
35363f01231121151001d56611047b0128febf630ea32d0128b3fe5a>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/comma 15 def
end
WKFBAA+LucidaConsole /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(i,j)
[7.26596 7.26596 7.26596 ] pdfys
380.76 222.0 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\253) show
385.74 232.86 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 174 19 <0002006fffdb046305ed000b0013003b402a3506440602050c0a10150c1a
10250c2a10860c8910080c1200051012060b09110e121110033003020314
10d65deddcfd003ffd3ffd5d31305d052200111000333200111000272011
10212011100269e7feed0113e7e70113feede70128fed8fed82501a60164
016301a5fe5bfe9dfe9cfe5a9402760274fd8cfd8a00>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/zero 19 def
end
WKFBAA+LucidaConsole /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(j,0)
[7.26596 7.26596 7.26596 ] pdfys
n
384.0 189.6 m
358.348 189.579 331.907 187.715 306.6 183.3 c
296.803 181.357 284.204 179.091 275.34 174.12 c
275.4 174.12 l
274.62 173.28 l
274.44 173.28 l
274.44 173.46 l
275.22 174.3 l
276.0 174.78 l
276.9 175.26 l
277.8 175.68 l
278.82 176.16 l
279.9 176.58 l
281.04 177.06 l
287.954 179.71 295.465 181.325 302.7 182.82 c
314.28 185.074 325.998 186.582 337.74 187.68 c
342.66 188.16 l
347.64 188.52 l
352.68 188.88 l
357.84 189.18 l
363.0 189.42 l
373.44 189.78 l
384.0 189.9 l
384.12 189.78 l
384.0 189.6 l
h
277.5 172.26 m
271.38 169.5 l
272.88 176.04 l
f
326.1 189.6 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\253) show
331.08 200.46 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(i,j)
[7.26596 7.26596 7.26596 ] pdfys
n
269.88 174.0 m
269.923 191.573 272.517 211.644 278.76 228.3 c
280.486 232.463 282.747 237.479 286.02 240.66 c
288.853 243.466 289.782 242.637 292.92 243.54 c
292.92 243.48 l
306.586 250.423 312.079 294.793 311.76 307.02 c
311.94 307.14 l
312.06 307.02 l
312.0 305.52 l
311.64 299.1 l
311.1 292.8 l
310.32 286.62 l
309.84 283.62 l
309.36 280.68 l
308.056 273.634 306.466 266.606 304.02 259.86 c
302.19 254.909 297.544 243.027 291.0 242.88 c
284.228 242.806 279.109 228.873 277.44 223.8 c
275.423 217.848 274.031 211.434 272.88 205.26 c
272.4 202.32 l
271.92 199.32 l
271.14 193.14 l
270.6 186.84 l
270.24 180.48 l
270.12 174.0 l
270.0 173.88 l
269.88 174.0 l
h
308.88 306.06 m
312.0 312.0 l
314.88 305.94 l
f
272.76 240.0 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\253) show
277.74 250.86 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(i,0)
[7.26596 7.26596 7.26596 ] pdfys
[0.00075 1.5 ] 0.0 d
n
330.0 72.0 m
198.0 72.0 l
330.0 312.0 m
198.0 312.0 l
S
n
215.64 73.98 m
215.76 310.02 l
215.88 310.26 l
216.12 310.38 l
216.42 310.26 l
216.48 310.02 l
216.36 73.98 l
216.24 73.74 l
216.0 73.62 l
215.76 73.74 l
215.64 73.98 l
h
219.84 79.8 m
216.0 73.26 l
212.16 79.8 l
212.16 80.1 l
212.34 80.34 l
212.58 80.34 l
212.82 80.22 l
216.3 74.16 l
215.7 74.16 l
219.18 80.16 l
219.42 80.34 l
219.72 80.34 l
219.9 80.1 l
219.84 79.8 l
h
212.28 304.2 m
216.12 310.74 l
219.96 304.2 l
219.96 303.9 l
219.78 303.66 l
219.54 303.6 l
219.3 303.78 l
215.82 309.84 l
216.42 309.84 l
212.94 303.84 l
212.7 303.66 l
212.46 303.66 l
212.28 303.9 l
212.28 304.2 l
f
206.76 154.14 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 944 59 <0001000b000004c30503000b00ba408875040105030909190115031a0925
032a052a09250b390135033a053a09350b45034b054a09450b55035a055a
09550b6a0165036d0565076a09650b75037e057a09720b8a0185038e058a
09820b25010a0b0a09020907040405091008030803100202090104070a04
020008090b00000605030206010a040704090b03050b0904080006080d02
000c10d6c410d6c41112173911121739003fc4c4c43fc4c4c41112173907
0510fd0710ed083c3c0710083c3c015d005d313033090133090133090123
09010b01f7fe34e9015b016fc0fe2e01eceafe85fe6d028d0276fe2501db
fda6fd57020afdf6>WKFBAA+LucidaConsole AddT42Char 

1 0 3 <> WKFBAA+LucidaConsole AddT42Char 
1 3146 97 <00010056015d047b02c800150063403110110e130605080310110e6a1301
1306056508010803131203400a4c800008120e000313080e040b000a0b46
17150046161076d618dc1076d618dc11121739002fd4fd101a76dc181ad4
fd0111125d3939115d123939001112393911123939313013343633321f01
1633323733140623222f01262322075697795e7493703d73088897795e74
93703d7308017e93b7415240b293b7415240b200>WKFBAA+LucidaConsole AddT42Char 
1 810 51 <000200e4000004850503000b0013004240250504360e450e591069107910
8b10070c120a0a010012120106000006110f000c0b10001614104b5358b0
437659d618fdc410dcfd003f3ffd1112392ffd31305d3311213217161514
042123190133201134262b01e401a1df5fc2fec7feed907b019097b0c405
032854f0cae6fe19027b01187666>WKFBAA+LucidaConsole AddT42Char 
1 710 43 <000100940000043e0503000b0035401703120a0a01000501060800000710
040800030b1000160c104b5358b0467659d618fd3c10dc3cfd003f3c3f3c
1112392ffd313033113311211133112311211194c5021fc6c6fde10503fd
cf0231fafd023efdc200>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/X 59 def
/space 3 def
/asciitilde 97 def
/P 51 def
/H 43 def
end
WKFBAA+LucidaConsole /Encoding get
dup 88 /X put
dup 32 /space put
dup 126 /asciitilde put
dup 80 /P put
dup 72 /H put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(X ~ PH)
[10.8881 10.8683 10.8881 10.8683 10.8881 10.8881 ] pdfys
[] 0.0 d
n
168.0 422.22 m
168.0 406.92 177.12 394.5 188.46 394.5 c
199.74 394.5 208.86 406.92 208.86 422.22 c
208.86 437.58 199.74 450.0 188.46 450.0 c
177.12 450.0 168.0 437.58 168.0 422.22 c
h
S
194.76 416.82 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 316 20 <000100b90000049405ed000900344017550501040305060701120004060b
09071002040002160a104b5358b0457659d618dc3c10fddc003f3ffd3c10
c0d0c05d313033352111053525112115b9018bfe750250018b94047f597a
b9faa794>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/one 20 def
end
WKFBAA+LucidaConsole /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(1) show
n
169.14 506.22 m
169.14 490.92 178.26 478.5 189.54 478.5 c
200.82 478.5 210.0 490.92 210.0 506.22 c
210.0 521.58 200.82 534.0 189.54 534.0 c
178.26 534.0 169.14 521.58 169.14 506.22 c
h
S
195.9 500.82 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 410 21 <000100a8000003f705ed0019007040447603760486038604041514111704
0306013417441754176417741784170615141117040306011106000e0117
12000409120e0b171901196a067a068a06031111060b011a10dec4dcfd5d
c4111239003ffd3ffd3c111239390111123939111239395d001112393911
1239395d31303335363f013635342623220735363332161514060f010607
2115a87af259b88d768fc6b8b0cbf7728854e82f025dadecf059b7ba778f
68ae4eddb575ce7f4fd8c5ad>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/two 21 def
end
WKFBAA+LucidaConsole /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(2) show
n
170.22 638.22 m
170.22 622.92 179.4 610.5 190.68 610.5 c
201.96 610.5 211.14 622.92 211.14 638.22 c
211.14 653.58 201.96 666.0 190.68 666.0 c
179.4 666.0 170.22 653.58 170.22 638.22 c
h
S
196.98 632.82 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 2022 81 <000100b600000422045600100047402574038403020f4003600501080d3c
05090900020810094a000310101000cf00d00003001811104b5358b04576
59d6185dfdc41076dc18fd003fc43ffd3f101ad81ac85d31303311331536
332019012311342623220711b6c588ea0135c54f5d94a2043ecce4fe91fd
1902b17f6bd5fd3a>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/n 81 def
end
WKFBAA+LucidaConsole /Encoding get
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
(n) show
n
185.64 360.0 m
187.74 389.52 l
187.92 389.82 l
188.16 389.88 l
188.4 389.76 l
188.52 389.46 l
186.36 360.0 l
186.24 359.7 l
186.0 359.64 l
185.7 359.76 l
185.64 360.0 l
h
185.1 388.74 m
188.52 394.5 l
191.04 388.32 l
f
n
188.1 450.0 m
188.22 473.52 l
188.34 473.76 l
188.58 473.88 l
188.88 473.76 l
189.0 473.52 l
188.88 450.0 l
188.76 449.76 l
188.52 449.64 l
188.22 449.76 l
188.1 450.0 l
h
185.58 472.5 m
188.64 478.5 l
191.58 472.5 l
f
n
187.98 534.0 m
188.1 557.52 l
188.22 557.76 l
188.46 557.88 l
188.76 557.76 l
188.88 557.52 l
188.76 534.0 l
188.64 533.76 l
188.4 533.64 l
188.1 533.76 l
187.98 534.0 l
h
185.46 556.5 m
188.52 562.5 l
191.46 556.5 l
f
n
187.98 582.0 m
188.1 605.52 l
188.22 605.76 l
188.46 605.88 l
188.76 605.76 l
188.88 605.52 l
188.76 582.0 l
188.64 581.76 l
188.4 581.64 l
188.1 581.76 l
187.98 582.0 l
h
185.46 604.5 m
188.52 610.5 l
191.46 604.5 l
f
n
187.98 666.0 m
188.1 689.52 l
188.22 689.76 l
188.46 689.88 l
188.76 689.76 l
188.88 689.52 l
188.76 666.0 l
188.64 665.76 l
188.4 665.64 l
188.1 665.76 l
187.98 666.0 l
h
185.46 688.5 m
188.52 694.5 l
191.46 688.5 l
f
[0.00075 1.5 ] 0.0 d
n
210.0 360.0 m
114.0 360.0 l
210.0 696.0 m
114.0 696.0 l
S
n
131.64 361.98 m
131.76 694.02 l
131.88 694.26 l
132.12 694.38 l
132.42 694.26 l
132.48 694.02 l
132.36 361.98 l
132.24 361.74 l
132.0 361.62 l
131.76 361.74 l
131.64 361.98 l
h
135.84 367.8 m
132.0 361.26 l
128.16 367.8 l
128.16 368.1 l
128.34 368.34 l
128.58 368.34 l
128.82 368.16 l
132.3 362.16 l
131.7 362.16 l
135.18 368.16 l
135.42 368.34 l
135.72 368.34 l
135.9 368.1 l
135.84 367.8 l
h
128.28 688.2 m
132.12 694.74 l
135.96 688.2 l
135.96 687.9 l
135.84 687.66 l
135.54 687.66 l
135.3 687.78 l
131.82 693.84 l
132.42 693.84 l
128.94 687.84 l
128.7 687.66 l
128.46 687.66 l
128.28 687.9 l
128.28 688.2 l
f
128.76 462.9 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 6.1563 0.0 0.0] Tf
(X) show
128.76 484.62 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 602 40 <000100d8000004690503000b003d401c0512084608000104120106091200
0006030b000509109f000100180c104b5358b0447659d6185dfd3c10dcc4
dc003ffd3ffd111239762f18fd3130331121152111211521112115d80363
fd620238fdc802cc050394fe7b94fe3e9400>WKFBAA+LucidaConsole AddT42Char 
1 2458 85 <0001013400000456045600100043402272038503020f40036005090c3d05
0901080002092f08010800030f10000001001811104b5358b0437659d618
5dfd3c10dc5ddc003f3f3feddc101ad81ac85d3130211133153633321711
23352623220607110134c596fd5971942c2471ab5d043ecce419fecc970a
697efd3d>WKFBAA+LucidaConsole AddT42Char 
1 1962 79 <000100ad00000316062b0005001d40100212030c00020510020000100002
000610dc5dccfd003f3ffd31302111213521110250fe5d0269059794f9d5
>WKFBAA+LucidaConsole AddT42Char 
1 1192 68 <00020088ffed049e0456001f00280056403703141014280f2014380f3014
40147a0f8a0f990f0a084a222202120d12120919121e2712020369057905
021c161009002024110f0547291076d618c4eddcc0c4fddc5d003fedd4fc
3ffd1112392f76dd185d313025062322263534243b013534262322073536
33321615111416333237170623220311232015141633320343b3b295c101
2cf67a6676abb7d2b8cfab2a3a132b12633392523bfe6b6856818396aa82
a9ce5d736260a94ba4c9fe3962470a762001160112db4f60>WKFBAA+LucidaConsole AddT42Char 
1 1566 74 <0002007bfe5c0436045700190024004e403596010119061c1a4510031d12
0e091108233d08020312180f4c0445205804552065167316061310050610
1a201100000b100b020b2510d65dcceddcc4c4c0fd5d003ffd3ffd3f3ffd
5d31305d1337163320113706232202351012333217353311140607062122
0111262322061514163332d415b198013c097cebbadbfecb9f9ab9384d7b
fefa9a01db858e81907e71affe95a64b012dc4e1011bf001050147957cfc
9bd3d55283032501ab96e0caabc1>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/E 40 def
/r 85 def
/l 79 def
/a 68 def
/g 74 def
end
WKFBAA+LucidaConsole /Encoding get
dup 69 /E put
dup 114 /r put
dup 108 /l put
dup 97 /a put
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(~ Erlang )
[10.8827 10.8683 10.8827 10.8827 10.8827 10.8827 10.8827 10.8827 10.8683 ] pdfys
182.76 458.219 m
%ADOBeginSubsetFont: XKLAAA+LucidaConsole-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
/XKLAAA+LucidaConsole 1 GetGlyphDirectory
426 <001C60D8A8C9B7C0544B562E08E0ECD866D5E3AD79A7502892838C76722
510D669DB0C7245F9115AE526732E04582C9414775F681B303E3B885C7287187
85936E8670A265E33F98D5A2D4C5A2533575CC3E8AEB56FE86E> |
!
end
end end
%ADOEndSubsetFont
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\252\001\252\001\252)
[77.9906 131.991 77.9906 ] pdfys
[] 0.0 d
n
303.72 489.72 m
303.72 474.42 312.9 462.0 324.18 462.0 c
335.46 462.0 344.64 474.42 344.64 489.72 c
344.64 505.08 335.46 517.5 324.18 517.5 c
312.9 517.5 303.72 505.08 303.72 489.72 c
h
S
330.48 484.32 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(1) show
[0.00075 1.5 ] 0.0 d
n
396.0 384.0 m
264.0 384.0 l
396.0 624.0 m
264.0 624.0 l
S
n
282.78 385.98 m
282.9 622.02 l
282.96 622.26 l
283.26 622.38 l
283.5 622.26 l
283.62 622.02 l
283.5 385.98 l
283.38 385.74 l
283.14 385.62 l
282.84 385.74 l
282.78 385.98 l
h
286.98 391.8 m
283.14 385.26 l
279.3 391.8 l
279.24 392.1 l
279.42 392.34 l
279.72 392.34 l
279.96 392.22 l
283.44 386.16 l
282.78 386.16 l
286.32 392.16 l
286.56 392.34 l
286.8 392.34 l
286.98 392.1 l
286.98 391.8 l
h
279.42 616.2 m
283.26 622.74 l
287.04 616.2 l
287.1 615.9 l
286.92 615.66 l
286.68 615.6 l
286.44 615.78 l
282.9 621.84 l
283.56 621.84 l
280.08 615.84 l
279.84 615.66 l
279.54 615.66 l
279.36 615.9 l
279.42 616.2 l
f
273.9 384.48 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 6.1563 0.0 0.0] Tf
(X) show
273.9 406.2 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 2984 92 <00010055fe75049b043e000f0061403d0908100707060c09060007011200
0e080a0b030708360c490a450c590a550c6a056b0a7b0a750c8b0a0a080a
0906050c060b07300b010b4811000746101076d618c41076d6185d111217
395d003f173c3ffd1112393939070510fd043c313013353332363f010133
090133010e01238e5070663831fe38cc01630166b1fddd40b2a4fe759448
7768040efcd3032dfb378f71>WKFBAA+LucidaConsole AddT42Char 
1 2302 83 <000200b3fe7504690456000e0018004a402b13034b0d02163d0509010811
120b03000e49084a1459085a140408116f140114000d030f101000010018
19104b5358b0457659d6185dfd3c3c10dc5dfd5d003f3ffd3f3ffd5d3130
13113315363332121510022322271901163332363510232207b3c58fd4b9
d5fcccaf7a8985828fe5a793fe7505c9cce4fee3f6fef2feb294fdfa029a
94e5ce0180d0>WKFBAA+LucidaConsole AddT42Char 
1 1396 72 <0002008dffe7044a045600110018004e402b96110112120d470d02081612
08090f120203250d360d450d550d7a1480090612130d000c11130d110518
19104b5358b0467659d618eddcfdc41112395d003ffd3ffd111239762f18
fd31305d2506232000113400333212111521122132370121351023220604
4acdabfee8fed30121dfe1d5fd1c1601789fbefd1b020cf576932b440120
010cfd0146fef2fee33ffe8f4c01b91c0126aa00>WKFBAA+LucidaConsole AddT42Char 
1 130 16 <000100d2021f040002b300030012b7011200500305000410d610d6003ffd
313013352115d2032e021f949400>WKFBAA+LucidaConsole AddT42Char 
1 2720 91 <0001005d00000482043e000b00ca409615041a0a020503090915031b0519
09150b25032b05290935033b05390945034b05490955035b0559096a0165
036b0565076909650b7a0175037d0575077a09720b8a0185038d0585078a
09820be50725010a0b0a0902090704040509100803080310020209010407
0a04020008090b00020605030208010a040704090b03050b090408000610
082008300803080d022000300002000c10d65dc410d65dc4111217391112
1739003fc4c4c43fc4c4c411121739070510fd0710ed083c3c0710083c3c
015d005d31303309013309013309012309015d0194fe6ef7012c0113c3fe
8f019bf6fec9fecf02250219fe6f0191fde8fdda019ffe61>WKFBAA+LucidaConsole AddT42Char 
1 2150 82 <00020069ffe704690456000b00170040402d5207520b02350c3a12450c4a
125d02520406121206090c1200030911000f010f1511100330035003a003
04031810d65deddc5dfd003ffd3ffd5d3130015d05220011100033320011
10002732363534262322061514160269effeef0112eeef0111feefef8ea0
a08e8ea0a019012f01090108012ffed1fef8fef7fed194dec6c5dedec5c6
de00>WKFBAA+LucidaConsole AddT42Char 
1 2582 87 <00010082ffe7044e050f0017003e40200f041f042f043f04040f07120c08
3f0a06151202030e00050c10100907051818104b5358b0457659d618cc3c
fd3c10dcc4003ffd3f3f3cfd3c5d31302506232226351121352135331521
15211114161716333237044e948af1aefef1010fc601e1fe1f172644827b
79011aadf1020c94eaea94fdd45d461a2d1c>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/y 92 def
/p 83 def
/e 72 def
/hyphen 16 def
/x 91 def
/o 82 def
/t 87 def
end
WKFBAA+LucidaConsole /Encoding get
dup 121 /y put
dup 112 /p put
dup 101 /e put
dup 45 /hyphen put
dup 120 /x put
dup 111 /o put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(~ Hyper-Exponential)
[10.8809 10.8683 10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 
10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 10.8809 ] pdfys
[] 0.0 d
n
396.0 336.0 m
396.0 384.0 l
S
n
395.7 383.82 m
340.98 466.26 l
340.92 466.56 l
341.04 466.8 l
341.34 466.8 l
341.58 466.68 l
396.3 384.18 l
396.36 383.94 l
396.18 383.7 l
395.94 383.64 l
395.7 383.82 l
h
339.3 463.98 m
338.52 470.64 l
344.34 467.28 l
f
344.76 427.26 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\240) show
349.74 438.12 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(1) show
n
352.86 489.72 m
352.86 474.42 362.04 462.0 373.32 462.0 c
384.6 462.0 393.72 474.42 393.72 489.72 c
393.72 505.08 384.6 517.5 373.32 517.5 c
362.04 517.5 352.86 505.08 352.86 489.72 c
h
S
379.62 484.32 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(2) show
429.42 483.06 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
1 3316 171 <0003006b0000046700c500030007000b002c401809050110080400020b10
080407100403101000900002000c10d65deddcfd10dcfd003f3c3cfd3c3c
31303335331533353315333533156bc5d6c6d5c6c5c5c5c5c5c5>WKFBAA+LucidaConsole AddT42Char 
WKFBAA+LucidaConsole /CharStrings get begin
/ellipsis 171 def
end
WKFBAA+LucidaConsole /Encoding get
dup 133 /ellipsis put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 19.98 -19.98 0.0 0.0 0.0] Tf
(\205) show
n
451.14 489.72 m
451.14 474.42 460.26 462.0 471.54 462.0 c
482.82 462.0 492.0 474.42 492.0 489.72 c
492.0 505.08 482.82 517.5 471.54 517.5 c
460.26 517.5 451.14 505.08 451.14 489.72 c
h
S
477.9 484.32 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(n) show
393.48 437.399 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\240) show
398.46 448.26 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(2) show
451.98 427.26 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\240) show
456.96 438.12 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(n) show
n
395.64 383.88 m
373.14 457.14 l
373.14 457.38 l
373.38 457.56 l
373.62 457.56 l
373.8 457.32 l
396.36 384.12 l
396.3 383.82 l
396.12 383.64 l
395.82 383.7 l
395.64 383.88 l
h
370.92 455.4 m
372.0 462.0 l
376.62 457.14 l
f
n
395.7 384.24 m
453.9 466.26 l
454.14 466.44 l
454.44 466.38 l
454.62 466.14 l
454.56 465.84 l
396.3 383.76 l
396.06 383.64 l
395.76 383.7 l
395.64 383.94 l
395.7 384.24 l
h
451.2 466.98 m
457.14 470.1 l
456.12 463.5 l
f
n
338.28 509.52 m
392.7 619.92 l
392.94 620.1 l
393.18 620.1 l
393.42 619.86 l
393.36 619.62 l
338.94 509.22 l
338.76 509.04 l
338.46 509.04 l
338.28 509.22 l
338.28 509.52 l
h
389.88 620.22 m
395.22 624.24 l
395.28 617.52 l
f
n
396.0 624.0 m
396.0 672.0 l
S
n
372.9 517.56 m
394.56 619.2 l
394.74 619.44 l
395.04 619.5 l
395.28 619.32 l
395.34 619.02 l
373.62 517.44 l
373.44 517.2 l
373.2 517.14 l
372.96 517.32 l
372.9 517.56 l
h
391.8 618.78 m
396.0 624.0 l
397.68 617.52 l
f
n
456.78 509.22 m
398.04 619.44 l
397.98 619.68 l
398.16 619.92 l
398.46 619.92 l
398.7 619.74 l
457.44 509.58 l
457.5 509.28 l
457.32 509.04 l
457.02 509.04 l
456.78 509.22 l
h
396.18 617.28 m
396.0 624.0 l
401.46 620.1 l
f
338.76 523.38 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\252) show
343.74 534.24 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(1) show
394.02 523.38 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\252) show
399.0 534.24 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(2) show
465.9 523.38 m
/N10 [0.0 18.0 -18.0 0.0 0.0 0.0] Tf
(\001\252) show
470.88 534.24 m
%ADOBeginSubsetFont: WKFBAA+LucidaConsole AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+LucidaConsole gcheck setglobal} if
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N11 [0.0 12.0 -12.0 0.0 0.0 0.0] Tf
(n) show
Q
/WKFBAA+LucidaConsole /Font _pdfUndefineResource
/N11 /Font _pdfUndefineResource
/XKLAAA+LucidaConsole /CIDFont _pdfUndefineResource
/XKLAAA+LucidaConsole-Identity-H /Font _pdfUndefineResource
/N10 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
