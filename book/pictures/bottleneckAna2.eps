%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: bottleneckAna2.pdf
%%Creator: Adobe Acrobat 15.6.0
%%For: leboudec
%%CreationDate: 10.05.2018, 15:00:32
%%BoundingBox: -259 258 294 553
%%HiResBoundingBox: -258.8620 258.8620 293.4880 552.3500
%%CropBox: -258.8620 258.8620 293.4880 552.3500
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1119 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 15.0 (Windows)"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2018-05-10T14:59:33+02:00"
   xmp:CreateDate="2018-05-10T14:58:32+02:00"
   xmp:MetadataDate="2018-05-10T14:59:33+02:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e2f60ef7-3b6e-419a-9d99-f698134609b3"
   xmpMM:InstanceID="uuid:a88b1508-1383-4dfa-9155-9055cb902b70">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - perf06.ppt [Compatibility Mode]</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>leboudec</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -552.35 translate
pgsv
[0 1 -1 0 293.488 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 552.35 li
293.488 552.35 li
293.488 0 li
cp
clp
-132.454 635.61 mo
407.546 635.61 li
407.546 -84.39 li
-132.454 -84.39 li
cp
false sop
0 0 0 0 cmyk
f
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HBAAAA+ComicSansMS Initial
ct_T42Dict begin
-0.336 -0.309 2.867 1.102
 256 array 0 1 255 {1 index exch /.notdef put} for  /HBAAAA+ComicSansMS
Type42DictBegin
[<00010000000c000c000c000c4f532f324dbad617000000cc000000606376
742073f051240000012c0000030e6670676d0973458a0000043c000009af
676c79663888a8fe00003a9c000012fa68656164eab7e0e700000dec0000
0036686865611d10161100000e2400000024686d74783245c99700000e48
0000112c6c6f6361004cde4600001f74000011306d617870080705770000
30a4000000206e616d65b72bdba5000030c4000002ba707265709d134ade
000033800000071c67646972000000000000000000000000000303bf0190
00050008059a053300000125059a0533000003a000af02760a08030f0702
030302020204000002874000001300000000000000004d53202000400020
fb020666fdab000008d102552000009f0000000004510612000000200002
06660000060e0000060e00000415001e0000000000000028000000000000
000006660000000000000000000006660000000000000000000000000000
000000000000000000000000000000000000000000220000002200000000
000000000000000000000000000000000000000000c800c8005000680044
0068005000b400be00be0079003800c800c8003800dc00c800aa004400a4
0094001f00b70094002c0079002c00b4001100a400e8008500fe00d20095
010800d200f200d200aa00c800d5001300c800c800d20113001f00be000e
0085001300c800dc00dc009500e800a000b7011c014500dc00b400a00089
00f200e80161013c011d011d00aa00fe014500e800a000b400be001d0113
010800f200950187017d011d011300f200d200d2001d00b30184014c013c
00d5012a01070134010800890170013400c800be0089008900a500590167
01450107013400fe013401700187017d011d0113010800fe00a0000b006e
000000000000000000000000000000000000003f015e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00190000018701a4023f02f8028a020dfe5200aa01450094000000000000
000000000000000000000000000000000000000000000000000000000000
06270023000005d5006b007f05e3002ffe64fe2300000000000000000000
04140030006bfff8ff9e0000fffcffc900000000ffb8fe7bfdd5ffd4fe3f
06850023034affe10000000000000000fe71ffe300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000008000000000000000000000004e10031
fffaffba0000fe93fe6d05f00658fe7ffe5effa60483001b00920000fe9a
02e500004059605f57565554535251504f4e4d4c4b494847464544434241
403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a29282726252423
2221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a0908070605
04030201002c4523466020b02660b004262348482d2c452346236120b026
61b004262348482d2c45234660b0206120b04660b004262348482d2c4523
462361b0206020b02661b02061b004262348482d2c45234660b0406120b0
6660b004262348482d2c4523462361b0406020b02661b04061b004262348
482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44
235920b0ed51582320b04d44235920b0042651582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b102
28453ab10200080d2d2c45b02c234445b02b23442d2c2045b00325456164
b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0
004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a
8cb8100062602b0c642364615c58b00361592d2c45b0112bb0292344b029
7ae4182d2cb801a65458b00943b801005458b9002cff80b12b8044445959
2d2c8a03458a8a87b0112bb0292344b0297ae4182d2c2d2c4b5258214544
1b23458c20b00325455258441b212159592d2c01182f2d2c4565b02c2344
45b02b23442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4569
b00943608a103a2d2c01b005251023208af500b0016023edec2d2c01b005
251023208af500b0016123edec2d2c01b0062510f500edec2d2cb00243b0
01525821212121211b462346608a8a462320468a608a61b8ff8062232010
238ab9011a011a8a70456020b0005058b00161b8ffba8b1bb0468c59b010
6068013a592d2c2045b0032546524bb013515b58b0022546206861b00325
b003253f2321381b2111592d2c2045b00325465058b0022546206861b003
25b003253f2321381b2111592d2c00b00743b006430b2d2c3eb02a2a2d2c
352d2c76b02d23701020b02d4520b0005058b00161593a2f182d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2cb4000100000015b00826b00826b0
0826b008260f10161345683ab001162d2cb4000100000015b00826b00826
b00826b008260f1016134568653ab001162d2c4523204520b10405258a50
5826618a8b1b26608a8c59442d2c462346608a8a462320468a608a61b8ff
8062232010238ab12d2d8a70456020b0005058b00161b8ffc08b1bb0408c
5968013a2d2cb0332bb02a2a2d2c4523456023456023456023766818b080
62202d2c4b53234b515a58381b2121592d2c2045b0005458b040442045b0
4061441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f
2370b01423421b2121592d2c4b515820b0032545695358441b2121591b21
21592d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a
60442d2c45234560442d2c4b235158b90033ffe0b134201bb33300340059
44442d2cb0164358b00326458a586466b01f601b64b020606620581b21b0
4059b001615923586559b02923442310b029e01b2121212121592d2cb016
4358b004254564b020606620581b21b04059b0016123586559b0292344b0
0425b00725082058021b0359b0052510b004252046b0042523423cb00725
10b006252046b00425b0016023423c2058011b0059b0052510b00425b029
e0b0072510b00625b029e0b00425b00725082058021b0359b00425b00325
4348b00625b00325b0016043481b2159212121212121212d2cb0164358b0
04254564b020606620581b21b04059b0016123581b6559b0292344b00525
b00825082058021b0359b0042510b005252046b0042523423cb00425b007
2508b0072510b006252046b00425b0016023423c2058011b0059b0042510
b00525b029e0b02920456544b0072510b00625b029e0b00525b008250820
58021b0359b00525b003254348b00425b0072508b00625b00325b0016043
481b2159212121212121212d2c02b00425202046b004252342b0052508b0
03254548212121212d2c02b0032520b0042508b0022543482121212d2c45
2320451820b00050205823652359236820b040505821b04059235865598a
60442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a6044
1b2121592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c
b0134358031b02592d2cb002435458b0482b1b21212121592d2cb0024354
58b0492b1b212121592d2cb012435c580cb00425b00425060c6423646164
b0035158b00425b00425012046b01060482046b0106048590a21211b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b53
234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c
4b53234b515ab012435c5a58381b2121592d2cb012004b014b54422d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b2020202436042b12401885458b202
2002436042004b014b5258b2020802436042591bb940000080885458b202
040243604259b94000008063b80100885458b202080243604259b9400001
0063b80200885458b202100243604259b12601885158b94000020063b804
00885458b202400243604259b94000040063b80800885458b20280024360
42595959595959b10002435458400a0540084009400c020d021bb1010243
5458b2054008ba010000090100b30c010d011bb18002435258b2054008b8
0180b109401bb2054008ba01800009014059b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c00
208a49b0005158b04023208a3812341b2121592d2c462346608a8a462320
468a608a61b8ff8062232010238ab14b4b8a70456020b0005058b00161b8
ffba8b1bb0468c59b0106068013a2d2c01208a49b0005158b04023208a38
12341b2121592d2c451868234b51582320452064b04050587c59688a6059
442d2c462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a
70456020b0005058b00161b8ff808b1bb0818c59683a2d00000100000005
1c29a1eb56fc5f0f3cf50018080000000000acc6453b00000000ca853432
fd4cfd8116f008d10000000900020001000000000001000008d1fdab0000
16f6fd4cfd2416f000010000000000000000000000000000044b04000080
0000000003cf00000264000001e700780365007406be0020058c00640690
0093053c004b031b011c02ee007202ee0072043d002f03d80030023700c6
0355006f01fe008f0418005404e2003d039a009e04e200a404e2009204e2
003004e2007e04e2006f04e2004604e2007604e20070026400b702640051
030d001304150063030d003a043100340773006e05da0083050b00bf04d2
005a05c600b704ff008c04db00ad0570004f06250098045f004b0552005e
04e300d604680065071000700660007b06630074042a00640703004d0507
0075058c00850570007405e5009b053300910851008b05ca00440515001d
058c0044030300b0046600b1030300b004a600c60504ffdd047300950418
003304bf0099041c006904b30067046200570411004b043f003a049f0091
023e00b3033affee045200a3023100ae063700790430007c0435004d0447
00770429003c03d8008b03e5002903c500410429006d03e4003e0579004c
04b9003d042afffc044e007a02ee0006035f016102ee000604c8006405da
008305da008304d2005a04ff008c0660007b0663007405e5009b04180042
0418004204180042041800420418004204180042041c0069046200570462
00570462005704620057023e0060023e0019023eff72023eff860430007c
04350053043500530435005304350053043500530429006d0429006d0429
006d0429006d04c600330346004404fc007d0659002505140075031900b7
058d0047038c002e065d005b065d005a0710004d047300d5047300dd0415
006308b2002e0663005306b2009303d80030030d0013030d002305160085
04290016041200b905fa002d074400690506002505990050043700650398
002807ae0041074b0043043500350431003401e7007803d8003004dc0032
036aff9904f5007b065b0062049f0013049f0013056700b20264000005da
008305da008306630074098d0082072d004d0388002c0710004303260047
032600680171004d0171003903d8003005c7003c0373fffc0515001d067d
001a04e2ffd3030d006a030d006a0545004b053f004604c6003a01fe008f
02640051034b005109ee009305da008304ff008c05da008304ff008c04ff
008c045f004b045f004b045f004b045f004b066300740663007406630074
05e5009b05e5009b05e5009b023e00b3047300c2047300aa047301160473
00d50473013c047301070473016e047300d20473012a0473011c0468ff7f
01d1ffa9058c008603e5002b058c0044044e007a033c014705c6ffd40412
00b90515001d042a00640447007003d80030053501920535017d0535019e
053500a2053500a2053500a2042afffc03d800430355006f07ea00ad0570
004f043f003a045f004b058c008503e5002904d2005a041c006904d2005a
04d2006904d200670429006d07ae0041065b00620355006f0504ffdd01fe
008f05da00830418003305da00830418003305c600b706a2006705c6ffd4
04ff00c80462005704ff008c0462005704680065023100ae0468006503b7
00ae04680065032900ae0660007b0430007c0660007b0430007c06630074
0435004d0507007503d8008b0507007503d8008b058c008503e500290570
007403c5004105700074051d004105e5009b0429006d05e5009b0429006d
058c0044044e007a058c0044044e007a04ee00b606630074051b005b0443
00330435004d03ef009c0435004d03c5004104ec00720504ffdd03990078
043700c3098300640903004b043e00b304f800390171003902a600390690
004e03e90014047301d105da00830418003304d2005a041c006904d2005a
041c006904ff008c0462005704ff008c0462005704ff008c046200570570
004f043f003a0570004f043f003a0570004f043f003a06250098049f0091
0625ffdd049ffff4045f004b023eff42045f004b023effae045f004b023e
ff81045f004b023e00300552005e033affc804e300d6045200a30452007d
04680065023100ae0660007b0430007c0660007b0430007c066300740435
004d066300740435004d0507007503d8003b058c008503e500290570002a
03c5004105e5009b0429005a05e5009b0429006d05e5009b0429006d05e5
009b0429006d0851008b0579004c0515001d042afffc031b0117031b0157
031b01570411013a05da00830418004208b2002e066300530435003501fe
008f0851008b0579004c0851008b0579004c0851008b0579004c0515001d
042afffc04e2ff66065900540465003d053500a2053500a2053500a20535
00a20473007905da00830650008e07dd00c3060d002c0703005f06cd002d
07c20041023eff9305da0083050b00bf04ff008c058c004406250098045f
004b04e300d605840010071000700660007b05c300560663007407440069
042a006405fa007b057000740515001d05ca004405640046045f004b0515
001d0443003303ef009c0430007c0429004a04b1006f03e4003e041c0069
0430007c04e2003d023e00b30452007b03e4003e03e4003e041c00690435
004d0435001f041c00690429004a04b9002004af004006150038023eff86
0429004a0435004d0429004a0615003804ff008c06cd002a04ee00b604d2
005a058c0085045f004b045f004b0552005e0800001907d1003006c6002a
051100a10515001d05d6007b05da008304d6009b050b00bf04ee00b60625
005a04ff008c06e0001e04cf004205fb008105fb0081051100a105e90019
07100070062500980663007407440069042a006404d2005a057000740515
001d051b005b05ca00440630007b04f000690740006307a8006306140026
089a009b04d6009b053c0058090b00510507001a041800330435004c0408
008303c3008604be002104620057057600420384006a0518006305180063
03f00081052d001e05e0002c047a004b04bb0045052d00d404470077041c
006903c50041042afffc067b005504b9003d04f300b10445004b062d006b
0658006b04f800110653008003ef0080041b006c07380054040b00220462
0057047bffbd03c30086041b004f03e50029023e00b3023eff86033affee
071e001e06310059049fffbd03f00081042afffc04f3008904ee00b603c3
0086071000430942007b05e0016c05240182052401710524017805240166
04e50038074b0043023e00af0950002905abffe905ab027e05ab027e05ab
ffe905ab027e05abffe904000025058c008503e500290570007403c50041
023e00b304f80064041b0079044800960431008f05390044043f006d05d7
00140417002d0517006405170064044e007d0506000c0602005a05390077
056d005804d9007703bc007b041b004204a000140452003904b8003f04ec
002f054200600431004e0629004e0681004e052b001905e7007f041b007f
0473004207ae00460446000c043f006d0593001f0431008f041b004204b6
006603b6003503b600350485004606cd001006a4004e0583001f044e007d
0452003904f6005e0431008f04f8006404480096041b004204e90091043f
006d0421008504a000390539007703b6003504850046042700a803be004c
0602005a056a005e056d005803bc007b05f6003b0446005804b6006604a0
001405020077046d00710712007104ec002f0452003704b6002f04f80064
043f006d0539007703b60035056d0058045200370687003104f800640448
00960431008f04f80052043f006d04b6002f05390077056d005803b60035
042700a8046d00330602005a056a005e0477006a056d005804d9007703bc
007b04f8007504a000140452003704b8003f04ec002f04c1004e06870031
03b600350452003704f8006404f8006404f8006404f8006404f8006404f8
0064075c0039041b0042043f006d043f006d043f006d043f006d03b60035
03b6003503b6003503b6003504e9ffd1056a005e056d0058056d0058056d
0058056d0058056d0058056d003105020077050200770502007705020077
0452003703bc007b0452003704f8006404f8006404f80064041b0042041b
0042041b0042041b004204e9009104e9ffd1043f006d043f006d043f006d
043f006d043f006d04a0003904a0003904a0003904a00039053900770539
ffdd03b6000103b6003503b6003503b6003503b600350735003904850046
042700a803be004c03be004c03be004c03be004c03beff93056a005e056a
005e056a005e056a0060056d0058056d0058056d00580829006d04460058
044600580446005804b6006604b6006604b6006604b6006604a0001404a0
001404a00023050200770502007705020077050200770502007705020077
071200710452003704b6002f04b6002f04b6002f0687003104f80064075c
0039056d00310712007107120071071200710452003704b6006604a00014
05d9004e050afe7b04d3000605c7fd4c0500fdc904dbfe5c057100500625
0075045efe6f0552003504e300ac03d3ffa0071000710660fdcd0662fe4a
042bfdb6070200750506fe5a058b002d0571fed305e5fdc70533fe040852
fe1405cb00440514ff9e058b001005d9004e05d9004e05d9004e05d9004e
05d9004e05d9004e08b2fe2504d2005a0500fdc90500fdc90500fdc90500
fdc9045efe6f045efe6f045efe6f045efe6f05c7fd4c0660fdcd0662fe4a
0662fe4a0662fe4a0662fe4a0662fe4a0662fe4a05e5fdc705e5fdc705e5
fdc705e5fdc70514ff9e042b00640514ff9e05d9004e05d9004e05d90083
04d3000604d3000604d3000604d3000605c7fd4c05c7fd4c0500fdc90500
fdc90500fdc90500fdc90500fdc905710050057100500571005005710050
062500750625ffe7045efe6f045efe6f045efe6f045f004b045efe6f0902
004c0552003504e300ac03d3ffa0046800650468ffa00468ffa00468ff7f
0660fdcd0660fdcd0660fdcd0660007b0662fe4a0662fe4a0662fe4a098d
fe680506fe5a0506fe5a0506fe5a058b002d058b002d058c0085058b002d
0571fed30571fed30571fed305e5fdc705e5fdc705e5fdc705e5fdc705e5
fdc705e5fdc70852fe140514ff9e058b0010058b0010058b001005d9004e
05c90007072f000705e7000706aa000706a400070773000705d9004e050a
fe7b04ee00b6065b00620500fdc9058b0010062500750662fe4a045efe6f
04e300ac05d90025071000710660fdcd05c300560662fe4a07440069042b
fdb605fa007b0571fed30514ff9e051b005b05cb00440564004607ae0042
045efe6f0514ff9e0500fdc906cd002b04ee00b604d3005a058b002d045e
fe6f045efe6f055200350800001907d1003006c6002a051100a10515001d
05d6007b05d9004e04d6009b050afe7b04ee00b60625005a0500fdc906e0
001e04cf004205fb008105fb0081051000a205e900190710007106250075
0662fe4a07440069042bfdb604d300060571fed30514001b051b005b05cb
00440630007b04f000690740006307a8006306140026089a009b04d6009b
053c0058090b00510507001a07ae004105d9004e08b2002e0662fe4a0852
fe140852fe140852fe140514ff9e058c00850571fed304e1003d039a009e
04e100a404e1007d04e1002f04e1007f04e1008d04e1004604e1007b04e1
007104e1003d04e100c304e100a404e1007d04e1002f04e1007f04e1008d
04e1004604e1007b04e1007104e2003d04e200db04e200a404e2009204e2
003004e2007e04e2006f04e2004604e2007604e20070035c0058035c003f
035c0073035c006a035c007b035c0056035c005e035c0058035c00a5035c
0090035c00b1035c0027035c0073035c0063035c006c035c0056035c005e
07ae008d07ae004706870062043f003a1087005e0f73006f116800000c4a
00560e52000411db00cb16f60000116200001179000a0da2001f1206001f
1219005811370068163d001716ba00770fb20052115c002104d700480368
001405ae0035057f005c052d003304ae007904ae005c04c5005604cf007f
041900480419004804190048041900480419004804190048041900480727
0048041900480419004804190048043f0060043f0060043f0060043f0060
043f0060026400a402a6ff85000000000000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c000001480000021e0000021e0000021e0000021e0000021e0000021e
0000021e0000021e0000021e0000021e0000021e0000021e0000021e0000
021e0000021e0000021e0000038800000500000005fa000005fa000005fa
000005fa000005fa000005fa000005fa000005fa000005fa000005fa0000
05fa000005fa000005fa000006e0000006e0000006e0000006e0000006e0
000007940000079400000794000007940000079400000794000007940000
079400000794000007940000079400000794000007940000079400000794
00000794000008e4000008e4000008e400000a1800000ad800000ad80000
0c4800000c4800000dfc00000efe00000efe00000efe00000efe00000fb8
0000112200001220000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa000012fa000012fa000012fa000012fa000012fa000012fa000012fa
000012fa000012fa000012fa000012fa000012fa000012fa000012fa0000
12fa00010000044b0235000e007900050002001000400061000003340285
000300020000000c00960001000000000000003200000001000000000003
001200320001000000000004001200440001000000000006001200560001
000000000007003e00680003000104090000006400a60003000104090001
0024010a0003000104090002000e012e00030001040900030024013c0003
000104090004002401600003000104090006002401840003000104090007
007c01a8a92032303131204d6963726f736f667420436f72706f72617469
6f6e2e20416c6c205269676874732052657365727665642e504e4a504750
2b436f6d696353616e734d53504e4a5047502b436f6d696353616e734d53
504e4a5047502b436f6d696353616e734d53436f6d69632053616e732069
7320612074726164656d61726b206f6620746865204d6963726f736f6674
2067726f7570206f6620636f6d70616e6965732e00a90020003200300031
00310020004d006900630072006f0073006f0066007400200043006f0072
0070006f0072006100740069006f006e002e00200041006c006c00200052
00690067006800740073002000520065007300650072007600650064002e
0050004e004a005000470050002b0043006f006d0069006300530061006e
0073004d00530052006500670075006c006100720050004e004a00500047
0050002b0043006f006d0069006300530061006e0073004d00530050004e
004a005000470050002b0043006f006d0069006300530061006e0073004d
00530050004e004a005000470050002b0043006f006d0069006300530061
006e0073004d00530043006f006d00690063002000530061006e00730020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200074006800650020004d006900630072006f0073006f0066
0074002000670072006f007500700020006f006600200063006f006d0070
0061006e006900650073002e0000b1541041740185002001850030018500
03014d0033014c005f005f014c0001009f014c00bf014c00ef014c000300
4f014c00010020014c0001014b0033014a005f000f014a001f014a005f01
4a000300bf014a0001000f014a001f014a005f014a007f014a00af014a00
05017801420034001f018300010175005f017600330175005f0182003301
81005f014501420034001f013300330132005f0132012f0032001f013f01
3e0019001f01310001012f005f01300033012f005f015300330152005f01
4800330147005f014200330141005f013d0001013b005f013c0033013b00
5f012d0033012c005f013bb206321fb80132b204321fb8012fb202321fb8
012cb300321f0fbc0118007f0117008f0117400d037fa08fa09fa0afa0bf
a00500ba01100010011040097f828f829f82af82a0b80110b2bf82b0ba01
100009ffc040ff4410144612110840b29393343e7a7a333e9494343e7b7b
333e9797333e7272333e9898333e6060333e6b6b333e4d4d333e5454333e
4e4e333e5656333e4141333e3a3a333e3d3d333e4949333e4242333e4f4f
333e6666333e6161333e957b343ea698343e9660343e5f6b343e714d343e
4a54343e4b4e343e6956343e5041343e3c3a343e393d343e3b49343e4542
343e514f343e4c66343e6a61343ec61601ababdb3eacacdb3e9c9cdb3e80
80db3e9d9ddb3eadaddb3eaeaedb3eafafdb3eb0b0db3e8e8edb3e8181db
3e6d6ddb3e9090da3e6262da3e8484da3e7575da3e5e5edb3eb1b1da3e6e
6edb3ea1a1da3e8aabdf3e8bacdf3eaa9cdf3e7380df40ff3ea79de03e99
9ddf3ea99ddc3e7cade03e8caddf3e7daddc3e86aee03e8daedf3e65aedc
3e87afe03e9aafdf3e5aafdc3ea8b0e03e7fb0df3e57b0dc3e888ee03e78
8edf3e5c8edc3e6f81e03e7981df3e5581dc3e6c6de03e746ddf3e466ddc
3e6490e03e5b90df3e8f90de3e5890dc3e5d90db3e6362e03e3762df3e9e
62de3e4762dc3e3862db3e6784e03e3f84df3e9f84de3e4084dc3e4384db
3e3e75df3e8375de3e5275dc3e4475db3e485edf3e7e5edc3e70b1df3e76
b1dc3e82b1db3e596edf3e896edc3e9ba1df3ea0a1de3e77a1dc3ee0dd3d
dfdd3ddedd3ddcd93ddbd93ddad93dddd83dd9d83dd7d43dd6d43dd5d43d
d3d03dd2d03dd1d03d4077d4cf3dd0cf3dcecb3dcdcb3dcccb3dcac73dc9
c73dc8c73dcbc63dc7c63dc5c23dc4c23dc3c23dc1be3dc0be3dbfbe3dc2
bd3dbebd3dd8bc3dcfbc3dc6bc3dbdbc3d230e45220c45210a452008451f
06451e04451d02451c00451a08180816081408120810080e080c080a0808
08060804080208000800014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b54424bb807ff524bb008505b58b101018e5918b90001
01ff858d162b2b2b2b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2bb16262456920b0005458b040605944b2ab3c7db80187b46539
ac3c7ab8017db210399cb80380b44d3a9c3c76b80170b24e397ab8017db4
1039803c68b80145b210399db80240b43b3a9d3c63b80134b23c3968b801
45b41039ad3c5bb8011db46539ae3c58b80113b42139af3c54b801084033
6539b03c51fe10398e3c4df26539813c4ae818396d3c46dc6539903c43d2
3339623c40c80239b13c33a05c396e3c30951039a1b801804017533aa13c
2c8954393095103975c0213a753c3ab422395eb802404011643a5ec0213a
5e3c36aa65393ab4223984b80280400e643a843c3dbe653940c8023930c8
702b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b1842011d4bb0105358b0611d594bb0655358b000
1db116004259b50f3f3200933cb901360184b31d397a3cb9011a0161b30a
39943cb9010a014cb43f397b3cfdb8013cb41539973ceeb8012ab4483972
3ce3b8011cb2043998b801a0b42f3a983cd2b80107b23039e3b8011c4070
0439603caad54e396b3ca0c822394d3c92b71039543c83a43f394e3c7694
0839563c6a855439413c617914393a3c53682a393d3c405002394f3c232c
1139663c191f29396160533a613c0f135439191f2939232c11394260293a
423c2d382a3949e0533a493c3644543940500239305019702b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b18702b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b014569534201
4b5058b108004259435c58b108004259b3020b0a124358601b2159422b73
73732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373742b73737374
2b73182b00>
[4859 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 108 19 <0002003dffd9049b0613000e001c0071405925002a08390748004708050a
0f05161a0f15162a0f25166a0f6516080f38081638340001000b1d3a0801
08026704800c801a032613291a5613591a690c6613691a0713380f041f04
2f043a044f0405041a38390c8f0c020c1e10dc5dfdd45ded5d5d003f5d10
f45ded10ed5d5d3130052003261110373621201716111000032207061510
12333237361110020263fed08c6a8aa301180107937ffee4feba6d5bb2b2
d45c40a9270116d601570122d8fde0c2fee9fe40fe3f0579bd9ecbfeb7fe
b6f2a80102010f010e00>HBAAAA+ComicSansMS AddT42Char 
1 328 20 <0001009effff032106170030004b402d2a430a4301311f132f133f134f13
5f136f130613111c042e432a1e212443112a2716431106430a27430f3201
0d2f5dedc4e47dc418e410c410fdc4c410ed003fddc45d10d4eded313005
232722272635343317173426353413362706232226353437363736333215
14061514161514021514161737321615140602c0c7c6461c339d30291117
16018625283b5636635850430c07301001692a3737010109123a65010230
bc2f7f0103ff84683c272f432654594d175b1721862172fe3c713aa63502
37292a36>HBAAAA+ComicSansMS AddT42Char 
1 0 0 <0002008000000380066600030007004440220607a00201000504a003000a
0929292c020605a1030302000704a101002b085669182b4e10f43c4dfd3c
10dd3c10fd3c4e10456544e6003f3c4dfd3c3f3cfd3c3130331121112521
1121800300fd800200fe000666f99a800566>HBAAAA+ComicSansMS AddT42Char 
HBAAAA+ComicSansMS /CharStrings get begin
/zero 19 def
/one 20 def
end
HBAAAA+ComicSansMS /Encoding get
dup 48 /zero put
dup 49 /one put
pop
end
%ADOEndSubsetFont
/OQATOC+ComicSansMS /HBAAAA+ComicSansMS findfont ct_VMDictPut
/OQATOC+ComicSansMS*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
OQATOC+ComicSansMS nf
OQATOC+ComicSansMS*1 [0 -13.98 -13.98 0 0 0 ]msf
403.886 -52.8895 mo
(10)
[-6.29797 0 ]ysh
.825162 .739284 0 0 cmyk
%ADOBeginSubsetFont: KBAAAA+TimesNewRomanPS-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (KBAAAA+TimesNewRomanPS-BoldMT)
%%Title: (KBAAAA+TimesNewRomanPS-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /KBAAAA+TimesNewRomanPS-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-558 -328 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4101 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 19 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
24 <001C60D8A8C9B7A73DE2C2CE18E794A0F594F94A6B146429BDA201672AAE
28157C6D15BD85A2990DFD4C52A4481FBCD25670A82A0FD1F263D1DA0706AF18
7D9E9EA7031C87CBF72D90813BF1B4BE7C60344E5433ADC6FD7B43D0D806093F
DC0380556AFF8B0110009BF6915A64F5C527003D19601B0E4666728D5361C3BF
48EDC27EB3C30A5ACFF23F30B6E9B989C3C66FE11562A6F649B52CFEDB> |
17 <001C60D8A8C9B8707CE4B1EDC83A0A2A7282B08F68BCC2B3ED7324A4B061
4C853F12F6E3C001B48CA0F4D9BB71E664A4EF5C2A1331F75C35F26DECD03446
98207284BC665874B9> |
23 <001C60D8A8C9B7A73DEA5F3AF017360F69BCE8C7C0F166A9A921517067F0
7AF45C4C3931339F6FED5BF9D24E7C5B46473F975FA942D805> |
22 <001C60D8A8C9B7A73DB994B79BEF9152870EEB88578A977CDB80332CB664
6324FF753D63D77E901BA09B5E7E16CAB618D56F8EC2AFA51F815F877513A30D
58C972F2F2343929F60E9C40DEF930E995F25C27FB36EA72F92C3260453715D4
CB043B3A9866DADCCF76893A2302215F52B0EBC345E6385F3EB0A38197228391
CFA45A1202D089E1C0F1AB3128A995D151C5602FDA9AB6E6298E250EB8655140
C7367303D54022804CA9DBE9E5405D8E68410C0DECF2FC9118D2891ADCA32408
7EDC2210E57E17392288E70C2DB38FAD49C05119> |
3 <001C60D8A8C9B8707C25> |
37 <001C60D8A8C9B64EDFFBB11F3E2A10057E50E341ABE1DBC770E1C5C06F81
BB728FC2798FE7DE3D8D55194754531B662F878A1C5B52B2BC9A6A3EDB01E8FA
D74764554945ACDBBFC441DBC7519AC204790E8B10B16B935FCC95B5AE677CDE
DC158F367FBEAB4DECE80779208A83BA5B988094ABB02C8947DE7BBD9D5F70EF
A356B1D1C419EB58119C17670AB47845E8F10893AE4CFED7310F4A2EDE886F59
3B1F88AC8C92C7F8B9234F7F24A3DD94F3DD1E2EFF386B3CD9BEA0954D516754
1B4C28B1D6215876A5CF1DACA668DAD06206151F500A2C0940462ECF20F08490
2D891E2F1FCB461C960983384E140E45CB0A961888ECF5B48232> |
82 <001C60D8A8C9B7A73DA75A812B0D9E0D72950C400992B64791CE4BE936E3
5EC58E93177DA216CA6EA116FD0299C2317BCD42A8DF8FC302833AED60D02FEB
A6105DB891946C90338F674D705E1347FE9120F0544578B7DAA3AE7563B3048B
2698F9445592B7A6749491B2DE1FE4A1FD150BB3E20FEF7BE4E02D604E63E559
C8B95FBFA7494AE1EEF5610DCF16F48AC01BFAB48671FA48799F609CBC853002
8A5C8DBEF01BFDEE2A> |
87 <001C60D8A8C9B81F2C3AE0D71D60A6D0809ACA0FF6B89A38F7E3BC89850C
1DD34D082ECFCC2A4F531E37217E8E3CD02D42FE76F828E185B10A17EE368D50
D1536CFAF78DF5C03ED49FE0A24E371BB0887E07856C5D39D6E9C2D58E0CAD3C
B98DB35234BA12CF62ED06495FE95A32> |
79 <001C60D8A8C9B854D09CC77F32FE56EAFD8F160C72BECE8873AE417AE0D2
1D5337605639AD1A151DC364880F2C65200EF41B3343ACE730AF8052A8FF7937
6915451BDA8AAC02C68E> |
72 <001C60D8A8C9B77FE2C1A0FFE616EB00E9CC30AEE6296E704D5E8E6E2A25
CD5B841666118E2FAE181ECDCA295C531BAEC8AA2C391851649F7A3F6C1D06B8
F53311D73A0F775B337F21892F2D55D51BAAE57B9A38BC3FBC0F8B7058E4F9E7
04709FA2F144D9397D8E7CC8EE685293C980753BDE3858AD8D5DB11A1F649D59
7DE968E74B3A3B8C5A39BDCB85B6D8AE6FFD00E4F0A287> |
81 <001C60D8A8C9B7EF3272AED84C447117DF46F865B97FFF41B029592F0B94
0D3CB1496385D278F27E297025A56C69B21BCC4BF07172388925626DFA8D6C47
1DD2C590CEE341C9379255E659C301E8B658357553D5C99C48C092267972A843
3183661DD05FE8753D94EA589F58F98A095B0B81C0D9CA47EDC3C182D840B9D3
42BE463CBA8C184A5066CF3C562B1180B231C61D26E2526730BDE7ED78D55D78
939A01438185A1FD0EF48EAA78E89F116F3F13A5> |
70 <001C60D8A8C9B77FE2CEE96C7945B0435FFDDE211B8F948D1DBC84858618
92F6D99960D947D725C2B400D72D2E2033C9690A49A5B9AEDD48C99E1E12194A
A92AD9E1221612038A683F14C558C3BE52A1D282380EB81ECDEF9B33E298B183
79F2DEE9473052CB47C57B3F66F7E9B2774464DA469F0AEDB78DBA5D5DA22239
1213D6F7DC6F471B1C2EAA711F193F31D398A5700FBD884113FD59850678DCA0
650A6DD9CB70CA> |
78 <001C60D8A8C9B7EF327040B55B5C610F053298A49F1A03819DBD6F4F6054
5E065EABAB2986F681EE9AE8BB5F4A6DB5E9D60645B44D5A0FD3EB6CE6C63404
41D7C5953B9DA3115EEBC7964DE270BE0FFC714A3507B2C50455F5A0647F2361
C8DF33A64111EB3F649A8FB92120C0460E15CED32185094B4057B324392EE328
8A599FF73BC2127FE30ADD617876E7EDEFBFA39DC72F0935FE7C433EFBCBE8EE
BBD55040E8F2F259A453DEB014DB0E24E0BB23A24CF25B456D> |
36 <001C60D8A8C9B6079F6DDEEAF9A120BDCAFB1D0815137F3C306F3C133B41
5B4B77625349C76A602D15345FAE6A3546F5B36D1B28478375F97296A3763EE3
F52C3737CAC25B4CFDED02895A63BC711EE1A552B7BA62ECF87DD093F65A4FFF
8A005836B68072CF16838102D957524B52A1731070A5AC336AF29189211FB666
90C18FAD42A9145E3A1E54FFB5> |
68 <001C60D8A8C9B7A73DB9E86B7E36429A2884771404E6FF662B8AA7E7384C
3659F637EBD399261C63A35B069A69F76ED1A82E238E7EE163D317BE064E3858
C7F7730B3F4964EB20955A37792E7E1687D8ADC075DDB7D7FB25258139553D3C
B2FA10ED804622949E5930CF99F28E8A477603C46FC4F5A92DC2A1E35DB06F67
F3E51B82DE37C2C17EC2E5C923B58246C88B9A4601B0D1A14F5724D07DAB7473
76B8430740055D15C3763245B66F59402378EFADB8789CFB2CE89C326A037B9E
A75216356106F9269249DDBB95B13318EE882CB697F95419AED017DFE8527A8D
8EF87BA96F46A6F3C6B37E5DC3CF5F042CB4BC684A4C1AF54058E7FE4B16C2AB
DA5E4C6AEB6AC099DB4A66DB29E012598F2F12A231> |
92 <001C60D8A8C9B7A73DB95C4B39F3AB93A7D69F83F2B8047D4639314C9833
9E08E9F3BD78FDFA668BE53C852DDEA02BEFB5BD1B10DBE37D879EFCF7FD9D2E
00CDF1E4EFD9CD923FAE6B009396FDCB4EEAD825731246E1170E3E99AA3F714D
241CD29BB31CDC566EDAEBB9BDEF44D807C915E6E89D41908E3901A956FE31DA
DC18D7EF849ED76B52F1A3B06698FD033E6167CC1AC2C8785716DE38D052B120
AF9C29E526CA14F5E37B83EC530C8032A4F2C460BD5AB35798F15B14DB55B494
9B5BDC352409C997610729> |
86 <001C60D8A8C9B7361F0274264DFD1E2F12F4038CC3C2CC64F8E8B1EB2472
82BBD631FA3240975506A5A512CB2808310E488A51FE18729B6606AFD56EB172
2AE1D8ABC20744FDC6CBF3951E8F8BD520E7CF9D93CF33B4900AFA5C5C4D000C
CAD0ED41D50E319EB8B858BFAC6C03AFB2E197690568AF5E2BE9F4C558829874
D2932ED897622551043851C0CC72FF3440821220BE6AECCD9E27B0282336CF76
2B277D88192B83BEB39BF3A8D350E4CD0CFD13DA7EB0A8BEB03D5FAECB2BB99C
89132A2E8C5DCDE91DE17F55FBEFBDA6CAE805794F42115FBC221DB69DBD3240
613F374A> |
76 <001C60D8A8C9B854D0E61042376B1E283FB3F4BBB7CB3487BC74EE7E391A
93B180B577E22955D0FA3199DCD5C6BBEA2EDAEAAD70CAC2D387D654CFD6D585
A60CE5094378FB8BA8FD5D1CAFC6A05D463B8B2BF660BFB6FA4902B50766CB22
600DE6B8533451B6F73A6A051EB16DBCEA0EFC6C89350A34CB9DF0A7738E953A
8F7AB6ADA51E7F> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /KBAAAA+TimesNewRomanPS-BoldMT-Identity-H /Identity-H 0 [/KBAAAA+TimesNewRomanPS-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OQATOD+TimesNewRomanPS-BoldMT /KBAAAA+TimesNewRomanPS-BoldMT-Identity-H findfont ct_VMDictPut
OQATOD+TimesNewRomanPS-BoldMT [0 -36 -36 0 0 0 ]msf
-83.554 472.23 mo
(\000\030\000\021\000\027\000\021\000\026\000\003\000%\000R\000W\000W\000O\000H\000Q\000H\000F\000N\000\003\000$\000Q\000D\000O\000\\\000V\000L\000V)
[-18 -9 -18 -9 -18 -9 -24.0123 -18 -11.9877 -11.9877 -10.008 -15.984 
-20.016 -15.984 -15.984 -20.016 -7.02026 -25.9739 -20.016 -18 -10.008 -18 -14.0043 -10.008 
0 ]ysh
75.086 452.73 mo
66.506 452.73 59.546 445.77 59.546 437.19 cv
59.546 428.67 66.506 421.71 75.086 421.71 cv
83.606 421.71 90.566 428.67 90.566 437.19 cv
90.566 445.77 83.606 452.73 75.086 452.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
75.086 453.21 mo
74.246 453.21 li
73.466 453.15 li
54.372 450.478 54.284 424.023 73.406 421.29 cv
74.246 421.23 li
75.086 421.23 li
94.804 421.939 96.935 449.222 77.546 453.03 cv
76.706 453.15 li
75.926 453.21 li
cp
75.806 452.19 mo
76.586 452.13 li
77.366 452.01 li
95.13 448.725 93.852 423.729 75.866 422.25 cv
75.086 422.19 li
74.306 422.25 li
55.877 423.801 55.19 449.551 73.526 452.13 cv
74.306 452.19 li
75.086 452.19 li
.75021 .679683 .670222 .90164 cmyk
f
110.066 452.73 mo
101.486 452.73 94.586 445.77 94.586 437.19 cv
94.586 428.67 101.486 421.71 110.066 421.71 cv
118.646 421.71 125.546 428.67 125.546 437.19 cv
125.546 445.77 118.646 452.73 110.066 452.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
110.066 453.21 mo
109.286 453.21 li
108.446 453.15 li
89.329 450.405 89.344 423.959 108.446 421.29 cv
109.226 421.23 li
110.066 421.23 li
129.817 421.903 131.956 449.232 112.526 453.03 cv
111.746 453.15 li
110.906 453.21 li
cp
110.846 452.19 mo
111.626 452.13 li
112.346 452.01 li
130.097 448.787 128.852 423.668 110.846 422.25 cv
110.066 422.19 li
109.286 422.25 li
90.855 423.812 90.198 449.538 108.506 452.13 cv
109.286 452.19 li
110.066 452.19 li
.75021 .679683 .670222 .90164 cmyk
f
145.046 452.73 mo
136.526 452.73 129.566 445.77 129.566 437.19 cv
129.566 428.67 136.526 421.71 145.046 421.71 cv
153.626 421.71 160.586 428.67 160.586 437.19 cv
160.586 445.77 153.626 452.73 145.046 452.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
145.106 453.21 mo
144.266 453.21 li
143.426 453.15 li
124.321 450.379 124.333 424.03 143.426 421.29 cv
144.266 421.23 li
145.046 421.23 li
164.84 421.869 166.934 449.301 147.506 453.03 cv
146.726 453.15 li
145.886 453.21 li
cp
145.826 452.19 mo
146.606 452.13 li
147.326 452.01 li
165.084 448.779 163.878 423.757 145.886 422.25 cv
145.106 422.19 li
144.326 422.25 li
125.868 423.76 125.193 449.59 143.546 452.13 cv
144.266 452.19 li
145.046 452.19 li
.75021 .679683 .670222 .90164 cmyk
f
180.086 452.73 mo
171.506 452.73 164.546 445.77 164.546 437.19 cv
164.546 428.67 171.506 421.71 180.086 421.71 cv
188.606 421.71 195.566 428.67 195.566 437.19 cv
195.566 445.77 188.606 452.73 180.086 452.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
180.086 453.21 mo
179.246 453.21 li
178.466 453.15 li
159.372 450.478 159.284 424.023 178.406 421.29 cv
179.246 421.23 li
180.086 421.23 li
199.804 421.939 201.935 449.222 182.546 453.03 cv
181.706 453.15 li
180.926 453.21 li
cp
180.806 452.19 mo
181.586 452.13 li
182.366 452.01 li
200.13 448.725 198.852 423.729 180.866 422.25 cv
180.086 422.19 li
179.306 422.25 li
160.877 423.801 160.19 449.551 178.526 452.13 cv
179.306 452.19 li
180.086 452.19 li
.75021 .679683 .670222 .90164 cmyk
f
214.586 465.21 mo
214.286 465.21 214.046 464.97 214.046 464.73 cv
214.046 464.43 214.286 464.19 214.586 464.19 cv
214.826 464.19 215.066 464.43 215.066 464.73 cv
215.066 464.97 214.826 465.21 214.586 465.21 cv
cp
212.546 465.21 mo
212.306 465.21 212.066 464.97 212.066 464.73 cv
212.066 464.43 212.306 464.19 212.546 464.19 cv
212.846 464.19 213.086 464.43 213.086 464.73 cv
213.086 464.97 212.846 465.21 212.546 465.21 cv
cp
210.566 465.21 mo
210.266 465.21 210.086 464.97 210.086 464.73 cv
210.086 464.43 210.266 464.19 210.566 464.19 cv
210.866 464.19 211.046 464.43 211.046 464.73 cv
211.046 464.97 210.866 465.21 210.566 465.21 cv
cp
208.586 465.21 mo
208.286 465.21 208.046 464.97 208.046 464.73 cv
208.046 464.43 208.286 464.19 208.586 464.19 cv
208.826 464.19 209.066 464.43 209.066 464.73 cv
209.066 464.97 208.826 465.21 208.586 465.21 cv
cp
206.546 465.21 mo
206.306 465.21 206.066 464.97 206.066 464.73 cv
206.066 464.43 206.306 464.19 206.546 464.19 cv
206.846 464.19 207.086 464.43 207.086 464.73 cv
207.086 464.97 206.846 465.21 206.546 465.21 cv
cp
204.566 465.21 mo
204.266 465.21 204.086 464.97 204.086 464.73 cv
204.086 464.43 204.266 464.19 204.566 464.19 cv
204.866 464.19 205.046 464.43 205.046 464.73 cv
205.046 464.97 204.866 465.21 204.566 465.21 cv
cp
202.586 465.21 mo
202.286 465.21 202.046 464.97 202.046 464.73 cv
202.046 464.43 202.286 464.19 202.586 464.19 cv
202.826 464.19 203.066 464.43 203.066 464.73 cv
203.066 464.97 202.826 465.21 202.586 465.21 cv
cp
200.546 465.21 mo
200.306 465.21 200.066 464.97 200.066 464.73 cv
200.066 464.43 200.306 464.19 200.546 464.19 cv
200.846 464.19 201.086 464.43 201.086 464.73 cv
201.086 464.97 200.846 465.21 200.546 465.21 cv
cp
198.566 465.21 mo
198.266 465.21 198.086 464.97 198.086 464.73 cv
198.086 464.43 198.266 464.19 198.566 464.19 cv
198.866 464.19 199.046 464.43 199.046 464.73 cv
199.046 464.97 198.866 465.21 198.566 465.21 cv
cp
196.586 465.21 mo
196.286 465.21 196.046 464.97 196.046 464.73 cv
196.046 464.43 196.286 464.19 196.586 464.19 cv
196.826 464.19 197.066 464.43 197.066 464.73 cv
197.066 464.97 196.826 465.21 196.586 465.21 cv
cp
194.546 465.21 mo
194.306 465.21 194.066 464.97 194.066 464.73 cv
194.066 464.43 194.306 464.19 194.546 464.19 cv
194.846 464.19 195.086 464.43 195.086 464.73 cv
195.086 464.97 194.846 465.21 194.546 465.21 cv
cp
192.566 465.21 mo
192.266 465.21 192.086 464.97 192.086 464.73 cv
192.086 464.43 192.266 464.19 192.566 464.19 cv
192.866 464.19 193.046 464.43 193.046 464.73 cv
193.046 464.97 192.866 465.21 192.566 465.21 cv
cp
190.586 465.21 mo
190.286 465.21 190.046 464.97 190.046 464.73 cv
190.046 464.43 190.286 464.19 190.586 464.19 cv
190.826 464.19 191.066 464.43 191.066 464.73 cv
191.066 464.97 190.826 465.21 190.586 465.21 cv
cp
188.546 465.21 mo
188.306 465.21 188.066 464.97 188.066 464.73 cv
188.066 464.43 188.306 464.19 188.546 464.19 cv
188.846 464.19 189.086 464.43 189.086 464.73 cv
189.086 464.97 188.846 465.21 188.546 465.21 cv
cp
186.566 465.21 mo
186.266 465.21 186.086 464.97 186.086 464.73 cv
186.086 464.43 186.266 464.19 186.566 464.19 cv
186.866 464.19 187.046 464.43 187.046 464.73 cv
187.046 464.97 186.866 465.21 186.566 465.21 cv
cp
184.586 465.21 mo
184.286 465.21 184.046 464.97 184.046 464.73 cv
184.046 464.43 184.286 464.19 184.586 464.19 cv
184.826 464.19 185.066 464.43 185.066 464.73 cv
185.066 464.97 184.826 465.21 184.586 465.21 cv
cp
182.546 465.21 mo
182.306 465.21 182.066 464.97 182.066 464.73 cv
182.066 464.43 182.306 464.19 182.546 464.19 cv
182.846 464.19 183.086 464.43 183.086 464.73 cv
183.086 464.97 182.846 465.21 182.546 465.21 cv
cp
180.566 465.21 mo
180.266 465.21 180.086 464.97 180.086 464.73 cv
180.086 464.43 180.266 464.19 180.566 464.19 cv
180.806 464.19 181.046 464.43 181.046 464.73 cv
181.046 464.97 180.806 465.21 180.566 465.21 cv
cp
178.586 465.21 mo
178.526 465.21 li
178.286 465.21 178.046 464.97 178.046 464.73 cv
178.046 464.43 178.286 464.19 178.526 464.19 cv
178.586 464.19 li
178.826 464.19 179.066 464.43 179.066 464.73 cv
179.066 464.97 178.826 465.21 178.586 465.21 cv
cp
176.546 465.21 mo
176.306 465.21 176.066 464.97 176.066 464.73 cv
176.066 464.43 176.306 464.19 176.546 464.19 cv
176.846 464.19 177.026 464.43 177.026 464.73 cv
177.026 464.97 176.846 465.21 176.546 465.21 cv
cp
174.566 465.21 mo
174.266 465.21 174.026 464.97 174.026 464.73 cv
174.026 464.43 174.266 464.19 174.566 464.19 cv
174.806 464.19 175.046 464.43 175.046 464.73 cv
175.046 464.97 174.806 465.21 174.566 465.21 cv
cp
172.526 465.21 mo
172.286 465.21 172.046 464.97 172.046 464.73 cv
172.046 464.43 172.286 464.19 172.526 464.19 cv
172.826 464.19 173.066 464.43 173.066 464.73 cv
173.066 464.97 172.826 465.21 172.526 465.21 cv
cp
170.546 465.21 mo
170.246 465.21 170.066 464.97 170.066 464.73 cv
170.066 464.43 170.246 464.19 170.546 464.19 cv
170.846 464.19 171.026 464.43 171.026 464.73 cv
171.026 464.97 170.846 465.21 170.546 465.21 cv
cp
168.566 465.21 mo
168.266 465.21 168.026 464.97 168.026 464.73 cv
168.026 464.43 168.266 464.19 168.566 464.19 cv
168.806 464.19 169.046 464.43 169.046 464.73 cv
169.046 464.97 168.806 465.21 168.566 465.21 cv
cp
166.526 465.21 mo
166.286 465.21 166.046 464.97 166.046 464.73 cv
166.046 464.43 166.286 464.19 166.526 464.19 cv
166.826 464.19 167.066 464.43 167.066 464.73 cv
167.066 464.97 166.826 465.21 166.526 465.21 cv
cp
164.546 465.21 mo
164.246 465.21 164.066 464.97 164.066 464.73 cv
164.066 464.43 164.246 464.19 164.546 464.19 cv
164.846 464.19 165.026 464.43 165.026 464.73 cv
165.026 464.97 164.846 465.21 164.546 465.21 cv
cp
162.566 465.21 mo
162.266 465.21 162.026 464.97 162.026 464.73 cv
162.026 464.43 162.266 464.19 162.566 464.19 cv
162.806 464.19 163.046 464.43 163.046 464.73 cv
163.046 464.97 162.806 465.21 162.566 465.21 cv
cp
160.526 465.21 mo
160.286 465.21 160.046 464.97 160.046 464.73 cv
160.046 464.43 160.286 464.19 160.526 464.19 cv
160.826 464.19 161.066 464.43 161.066 464.73 cv
161.066 464.97 160.826 465.21 160.526 465.21 cv
cp
158.546 465.21 mo
158.246 465.21 158.066 464.97 158.066 464.73 cv
158.066 464.43 158.246 464.19 158.546 464.19 cv
158.846 464.19 159.026 464.43 159.026 464.73 cv
159.026 464.97 158.846 465.21 158.546 465.21 cv
cp
156.566 465.21 mo
156.266 465.21 156.026 464.97 156.026 464.73 cv
156.026 464.43 156.266 464.19 156.566 464.19 cv
156.806 464.19 157.046 464.43 157.046 464.73 cv
157.046 464.97 156.806 465.21 156.566 465.21 cv
cp
154.526 465.21 mo
154.286 465.21 154.046 464.97 154.046 464.73 cv
154.046 464.43 154.286 464.19 154.526 464.19 cv
154.826 464.19 155.066 464.43 155.066 464.73 cv
155.066 464.97 154.826 465.21 154.526 465.21 cv
cp
152.546 465.21 mo
152.246 465.21 152.066 464.97 152.066 464.73 cv
152.066 464.43 152.246 464.19 152.546 464.19 cv
152.846 464.19 153.026 464.43 153.026 464.73 cv
153.026 464.97 152.846 465.21 152.546 465.21 cv
cp
150.566 465.21 mo
150.266 465.21 150.026 464.97 150.026 464.73 cv
150.026 464.43 150.266 464.19 150.566 464.19 cv
150.806 464.19 151.046 464.43 151.046 464.73 cv
151.046 464.97 150.806 465.21 150.566 465.21 cv
cp
148.526 465.21 mo
148.286 465.21 148.046 464.97 148.046 464.73 cv
148.046 464.43 148.286 464.19 148.526 464.19 cv
148.826 464.19 149.066 464.43 149.066 464.73 cv
149.066 464.97 148.826 465.21 148.526 465.21 cv
cp
146.546 465.21 mo
146.246 465.21 146.066 464.97 146.066 464.73 cv
146.066 464.43 146.246 464.19 146.546 464.19 cv
146.846 464.19 147.026 464.43 147.026 464.73 cv
147.026 464.97 146.846 465.21 146.546 465.21 cv
cp
144.566 465.21 mo
144.266 465.21 144.026 464.97 144.026 464.73 cv
144.026 464.43 144.266 464.19 144.566 464.19 cv
144.806 464.19 145.046 464.43 145.046 464.73 cv
145.046 464.97 144.806 465.21 144.566 465.21 cv
cp
142.526 465.21 mo
142.286 465.21 142.046 464.97 142.046 464.73 cv
142.046 464.43 142.286 464.19 142.526 464.19 cv
142.826 464.19 143.066 464.43 143.066 464.73 cv
143.066 464.97 142.826 465.21 142.526 465.21 cv
cp
140.546 465.21 mo
140.246 465.21 140.006 464.97 140.006 464.73 cv
140.006 464.43 140.246 464.19 140.546 464.19 cv
140.786 464.19 141.026 464.43 141.026 464.73 cv
141.026 464.97 140.786 465.21 140.546 465.21 cv
cp
138.506 465.21 mo
138.266 465.21 138.026 464.97 138.026 464.73 cv
138.026 464.43 138.266 464.19 138.506 464.19 cv
138.806 464.19 139.046 464.43 139.046 464.73 cv
139.046 464.97 138.806 465.21 138.506 465.21 cv
cp
136.526 465.21 mo
136.286 465.21 136.046 464.97 136.046 464.73 cv
136.046 464.43 136.286 464.19 136.526 464.19 cv
136.826 464.19 137.006 464.43 137.006 464.73 cv
137.006 464.97 136.826 465.21 136.526 465.21 cv
cp
134.546 465.21 mo
134.246 465.21 134.006 464.97 134.006 464.73 cv
134.006 464.43 134.246 464.19 134.546 464.19 cv
134.786 464.19 135.026 464.43 135.026 464.73 cv
135.026 464.97 134.786 465.21 134.546 465.21 cv
cp
132.506 465.21 mo
132.266 465.21 132.026 464.97 132.026 464.73 cv
132.026 464.43 132.266 464.19 132.506 464.19 cv
132.806 464.19 133.046 464.43 133.046 464.73 cv
133.046 464.97 132.806 465.21 132.506 465.21 cv
cp
130.526 465.21 mo
130.226 465.21 130.046 464.97 130.046 464.73 cv
130.046 464.43 130.226 464.19 130.526 464.19 cv
130.826 464.19 131.006 464.43 131.006 464.73 cv
131.006 464.97 130.826 465.21 130.526 465.21 cv
cp
128.546 465.21 mo
128.246 465.21 128.006 464.97 128.006 464.73 cv
128.006 464.43 128.246 464.19 128.546 464.19 cv
128.786 464.19 129.026 464.43 129.026 464.73 cv
129.026 464.97 128.786 465.21 128.546 465.21 cv
cp
126.506 465.21 mo
126.266 465.21 126.026 464.97 126.026 464.73 cv
126.026 464.43 126.266 464.19 126.506 464.19 cv
126.806 464.19 127.046 464.43 127.046 464.73 cv
127.046 464.97 126.806 465.21 126.506 465.21 cv
cp
124.526 465.21 mo
124.226 465.21 124.046 464.97 124.046 464.73 cv
124.046 464.43 124.226 464.19 124.526 464.19 cv
124.826 464.19 125.006 464.43 125.006 464.73 cv
125.006 464.97 124.826 465.21 124.526 465.21 cv
cp
122.546 465.21 mo
122.246 465.21 122.006 464.97 122.006 464.73 cv
122.006 464.43 122.246 464.19 122.546 464.19 cv
122.786 464.19 123.026 464.43 123.026 464.73 cv
123.026 464.97 122.786 465.21 122.546 465.21 cv
cp
120.506 465.21 mo
120.266 465.21 120.026 464.97 120.026 464.73 cv
120.026 464.43 120.266 464.19 120.506 464.19 cv
120.806 464.19 121.046 464.43 121.046 464.73 cv
121.046 464.97 120.806 465.21 120.506 465.21 cv
cp
118.526 465.21 mo
118.226 465.21 118.046 464.97 118.046 464.73 cv
118.046 464.43 118.226 464.19 118.526 464.19 cv
118.826 464.19 119.006 464.43 119.006 464.73 cv
119.006 464.97 118.826 465.21 118.526 465.21 cv
cp
116.546 465.21 mo
116.246 465.21 116.006 464.97 116.006 464.73 cv
116.006 464.43 116.246 464.19 116.546 464.19 cv
116.786 464.19 117.026 464.43 117.026 464.73 cv
117.026 464.97 116.786 465.21 116.546 465.21 cv
cp
114.506 465.21 mo
114.266 465.21 114.026 464.97 114.026 464.73 cv
114.026 464.43 114.266 464.19 114.506 464.19 cv
114.806 464.19 115.046 464.43 115.046 464.73 cv
115.046 464.97 114.806 465.21 114.506 465.21 cv
cp
112.526 465.21 mo
112.226 465.21 112.046 464.97 112.046 464.73 cv
112.046 464.43 112.226 464.19 112.526 464.19 cv
112.826 464.19 113.006 464.43 113.006 464.73 cv
113.006 464.97 112.826 465.21 112.526 465.21 cv
cp
110.546 465.21 mo
110.246 465.21 110.006 464.97 110.006 464.73 cv
110.006 464.43 110.246 464.19 110.546 464.19 cv
110.786 464.19 111.026 464.43 111.026 464.73 cv
111.026 464.97 110.786 465.21 110.546 465.21 cv
cp
108.506 465.21 mo
108.266 465.21 108.026 464.97 108.026 464.73 cv
108.026 464.43 108.266 464.19 108.506 464.19 cv
108.806 464.19 109.046 464.43 109.046 464.73 cv
109.046 464.97 108.806 465.21 108.506 465.21 cv
cp
106.526 465.21 mo
106.226 465.21 106.046 464.97 106.046 464.73 cv
106.046 464.43 106.226 464.19 106.526 464.19 cv
106.826 464.19 107.006 464.43 107.006 464.73 cv
107.006 464.97 106.826 465.21 106.526 465.21 cv
cp
104.546 465.21 mo
104.246 465.21 104.006 464.97 104.006 464.73 cv
104.006 464.43 104.246 464.19 104.546 464.19 cv
104.786 464.19 105.026 464.43 105.026 464.73 cv
105.026 464.97 104.786 465.21 104.546 465.21 cv
cp
102.506 465.21 mo
102.266 465.21 102.026 464.97 102.026 464.73 cv
102.026 464.43 102.266 464.19 102.506 464.19 cv
102.806 464.19 103.046 464.43 103.046 464.73 cv
103.046 464.97 102.806 465.21 102.506 465.21 cv
cp
100.526 465.21 mo
100.226 465.21 99.986 464.97 99.986 464.73 cv
99.986 464.43 100.226 464.19 100.526 464.19 cv
100.766 464.19 101.006 464.43 101.006 464.73 cv
101.006 464.97 100.766 465.21 100.526 465.21 cv
cp
98.486 465.21 mo
98.246 465.21 98.006 464.97 98.006 464.73 cv
98.006 464.43 98.246 464.19 98.486 464.19 cv
98.7859 464.19 99.026 464.43 99.026 464.73 cv
99.026 464.97 98.7859 465.21 98.486 465.21 cv
cp
96.506 465.21 mo
96.266 465.21 96.026 464.97 96.026 464.73 cv
96.026 464.43 96.266 464.19 96.506 464.19 cv
96.806 464.19 96.986 464.43 96.986 464.73 cv
96.986 464.97 96.806 465.21 96.506 465.21 cv
cp
94.526 465.21 mo
94.226 465.21 93.986 464.97 93.986 464.73 cv
93.986 464.43 94.226 464.19 94.526 464.19 cv
94.766 464.19 95.006 464.43 95.006 464.73 cv
95.006 464.97 94.766 465.21 94.526 465.21 cv
cp
92.486 465.21 mo
92.246 465.21 92.006 464.97 92.006 464.73 cv
92.006 464.43 92.246 464.19 92.486 464.19 cv
92.786 464.19 93.026 464.43 93.026 464.73 cv
93.026 464.97 92.786 465.21 92.486 465.21 cv
cp
90.506 465.21 mo
90.206 465.21 90.026 464.97 90.026 464.73 cv
90.026 464.43 90.206 464.19 90.506 464.19 cv
90.806 464.19 90.986 464.43 90.986 464.73 cv
90.986 464.97 90.806 465.21 90.506 465.21 cv
cp
88.526 465.21 mo
88.226 465.21 87.986 464.97 87.986 464.73 cv
87.986 464.43 88.226 464.19 88.526 464.19 cv
88.766 464.19 89.006 464.43 89.006 464.73 cv
89.006 464.97 88.766 465.21 88.526 465.21 cv
cp
86.486 465.21 mo
86.246 465.21 86.006 464.97 86.006 464.73 cv
86.006 464.43 86.246 464.19 86.486 464.19 cv
86.786 464.19 87.026 464.43 87.026 464.73 cv
87.026 464.97 86.786 465.21 86.486 465.21 cv
cp
84.506 465.21 mo
84.206 465.21 84.026 464.97 84.026 464.73 cv
84.026 464.43 84.206 464.19 84.506 464.19 cv
84.806 464.19 84.986 464.43 84.986 464.73 cv
84.986 464.97 84.806 465.21 84.506 465.21 cv
cp
82.526 465.21 mo
82.226 465.21 81.986 464.97 81.986 464.73 cv
81.986 464.43 82.226 464.19 82.526 464.19 cv
82.766 464.19 83.006 464.43 83.006 464.73 cv
83.006 464.97 82.766 465.21 82.526 465.21 cv
cp
80.486 465.21 mo
80.246 465.21 80.006 464.97 80.006 464.73 cv
80.006 464.43 80.246 464.19 80.486 464.19 cv
80.786 464.19 81.026 464.43 81.026 464.73 cv
81.026 464.97 80.786 465.21 80.486 465.21 cv
cp
78.506 465.21 mo
78.206 465.21 78.026 464.97 78.026 464.73 cv
78.026 464.43 78.206 464.19 78.506 464.19 cv
78.806 464.19 78.986 464.43 78.986 464.73 cv
78.986 464.97 78.806 465.21 78.506 465.21 cv
cp
76.526 465.21 mo
76.226 465.21 75.986 464.97 75.986 464.73 cv
75.986 464.43 76.226 464.19 76.526 464.19 cv
76.766 464.19 77.006 464.43 77.006 464.73 cv
77.006 464.97 76.766 465.21 76.526 465.21 cv
cp
74.486 465.21 mo
74.246 465.21 74.006 464.97 74.006 464.73 cv
74.006 464.43 74.246 464.19 74.486 464.19 cv
74.786 464.19 75.026 464.43 75.026 464.73 cv
75.026 464.97 74.786 465.21 74.486 465.21 cv
cp
72.506 465.21 mo
72.206 465.21 72.026 464.97 72.026 464.73 cv
72.026 464.43 72.206 464.19 72.506 464.19 cv
72.806 464.19 72.986 464.43 72.986 464.73 cv
72.986 464.97 72.806 465.21 72.506 465.21 cv
cp
70.526 465.21 mo
70.226 465.21 69.986 464.97 69.986 464.73 cv
69.986 464.43 70.226 464.19 70.526 464.19 cv
70.766 464.19 71.006 464.43 71.006 464.73 cv
71.006 464.97 70.766 465.21 70.526 465.21 cv
cp
68.486 465.21 mo
68.246 465.21 68.006 464.97 68.006 464.73 cv
68.006 464.43 68.246 464.19 68.486 464.19 cv
68.786 464.19 69.026 464.43 69.026 464.73 cv
69.026 464.97 68.786 465.21 68.486 465.21 cv
cp
66.506 465.21 mo
66.206 465.21 66.026 464.97 66.026 464.73 cv
66.026 464.43 66.206 464.19 66.506 464.19 cv
66.746 464.19 66.986 464.43 66.986 464.73 cv
66.986 464.97 66.746 465.21 66.506 465.21 cv
cp
64.526 465.21 mo
64.226 465.21 63.986 464.97 63.986 464.73 cv
63.986 464.43 64.226 464.19 64.526 464.19 cv
64.766 464.19 65.006 464.43 65.006 464.73 cv
65.006 464.97 64.766 465.21 64.526 465.21 cv
cp
62.486 465.21 mo
62.246 465.21 62.006 464.97 62.006 464.73 cv
62.006 464.43 62.246 464.19 62.486 464.19 cv
62.786 464.19 63.026 464.43 63.026 464.73 cv
63.026 464.97 62.786 465.21 62.486 465.21 cv
cp
60.506 465.21 mo
60.206 465.21 59.966 464.97 59.966 464.73 cv
59.966 464.43 60.206 464.19 60.506 464.19 cv
60.746 464.19 60.986 464.43 60.986 464.73 cv
60.986 464.97 60.746 465.21 60.506 465.21 cv
cp
58.466 465.21 mo
58.226 465.21 57.986 464.97 57.986 464.73 cv
57.986 464.43 58.226 464.19 58.466 464.19 cv
58.766 464.19 59.006 464.43 59.006 464.73 cv
59.006 464.97 58.766 465.21 58.466 465.21 cv
cp
56.486 465.21 mo
56.246 465.21 56.006 464.97 56.006 464.73 cv
56.006 464.43 56.246 464.19 56.486 464.19 cv
56.786 464.19 56.966 464.43 56.966 464.73 cv
56.966 464.97 56.786 465.21 56.486 465.21 cv
cp
54.506 465.21 mo
54.206 465.21 53.966 464.97 53.966 464.73 cv
53.966 464.43 54.206 464.19 54.506 464.19 cv
54.746 464.19 54.986 464.43 54.986 464.73 cv
54.986 464.97 54.746 465.21 54.506 465.21 cv
cp
52.466 465.21 mo
52.226 465.21 51.986 464.97 51.986 464.73 cv
51.986 464.43 52.226 464.19 52.466 464.19 cv
52.766 464.19 53.006 464.43 53.006 464.73 cv
53.006 464.97 52.766 465.21 52.466 465.21 cv
cp
50.486 465.21 mo
50.186 465.21 50.006 464.97 50.006 464.73 cv
50.006 464.43 50.186 464.19 50.486 464.19 cv
50.786 464.19 50.966 464.43 50.966 464.73 cv
50.966 464.97 50.786 465.21 50.486 465.21 cv
cp
48.506 465.21 mo
48.206 465.21 47.966 464.97 47.966 464.73 cv
47.966 464.43 48.206 464.19 48.506 464.19 cv
48.746 464.19 48.986 464.43 48.986 464.73 cv
48.986 464.97 48.746 465.21 48.506 465.21 cv
cp
47.066 463.65 mo
47.066 463.35 47.306 463.11 47.546 463.11 cv
47.846 463.11 48.086 463.35 48.086 463.65 cv
48.086 463.89 47.846 464.13 47.546 464.13 cv
47.306 464.13 47.066 463.89 47.066 463.65 cv
cp
47.066 461.61 mo
47.066 461.37 47.306 461.13 47.546 461.13 cv
47.846 461.13 48.086 461.37 48.086 461.61 cv
48.086 461.91 47.846 462.15 47.546 462.15 cv
47.306 462.15 47.066 461.91 47.066 461.61 cv
cp
47.066 459.63 mo
47.066 459.33 47.306 459.09 47.546 459.09 cv
47.846 459.09 48.086 459.33 48.086 459.63 cv
48.086 459.87 47.846 460.11 47.546 460.11 cv
47.306 460.11 47.066 459.87 47.066 459.63 cv
cp
47.066 457.59 mo
47.066 457.35 47.306 457.11 47.546 457.11 cv
47.846 457.11 48.086 457.35 48.086 457.59 cv
48.086 457.89 47.846 458.13 47.546 458.13 cv
47.306 458.13 47.066 457.89 47.066 457.59 cv
cp
47.066 455.61 mo
47.066 455.37 47.306 455.13 47.546 455.13 cv
47.846 455.13 48.086 455.37 48.086 455.61 cv
48.086 455.91 47.846 456.09 47.546 456.09 cv
47.306 456.09 47.066 455.91 47.066 455.61 cv
cp
47.066 453.63 mo
47.066 453.33 47.306 453.09 47.546 453.09 cv
47.846 453.09 48.086 453.33 48.086 453.63 cv
48.086 453.87 47.846 454.11 47.546 454.11 cv
47.306 454.11 47.066 453.87 47.066 453.63 cv
cp
47.066 451.59 mo
47.066 451.35 47.306 451.11 47.546 451.11 cv
47.846 451.11 48.086 451.35 48.086 451.59 cv
48.086 451.89 47.846 452.13 47.546 452.13 cv
47.306 452.13 47.066 451.89 47.066 451.59 cv
cp
47.066 449.61 mo
47.066 449.31 47.306 449.13 47.546 449.13 cv
47.846 449.13 48.086 449.31 48.086 449.61 cv
48.086 449.91 47.846 450.09 47.546 450.09 cv
47.306 450.09 47.066 449.91 47.066 449.61 cv
cp
47.066 447.63 mo
47.066 447.33 47.306 447.09 47.546 447.09 cv
47.846 447.09 48.086 447.33 48.086 447.63 cv
48.086 447.87 47.846 448.11 47.546 448.11 cv
47.306 448.11 47.066 447.87 47.066 447.63 cv
cp
47.066 445.59 mo
47.066 445.35 47.306 445.11 47.546 445.11 cv
47.846 445.11 48.086 445.35 48.086 445.59 cv
48.086 445.89 47.846 446.13 47.546 446.13 cv
47.306 446.13 47.066 445.89 47.066 445.59 cv
cp
47.066 443.61 mo
47.066 443.31 47.306 443.13 47.546 443.13 cv
47.846 443.13 48.086 443.31 48.086 443.61 cv
48.086 443.91 47.846 444.09 47.546 444.09 cv
47.306 444.09 47.066 443.91 47.066 443.61 cv
cp
47.066 441.63 mo
47.066 441.33 47.306 441.09 47.546 441.09 cv
47.846 441.09 48.086 441.33 48.086 441.63 cv
48.086 441.87 47.846 442.11 47.546 442.11 cv
47.306 442.11 47.066 441.87 47.066 441.63 cv
cp
47.066 439.59 mo
47.066 439.35 47.306 439.11 47.546 439.11 cv
47.846 439.11 48.086 439.35 48.086 439.59 cv
48.086 439.89 47.846 440.13 47.546 440.13 cv
47.306 440.13 47.066 439.89 47.066 439.59 cv
cp
47.066 437.61 mo
47.066 437.31 47.306 437.13 47.546 437.13 cv
47.846 437.13 48.086 437.31 48.086 437.61 cv
48.086 437.91 47.846 438.09 47.546 438.09 cv
47.306 438.09 47.066 437.91 47.066 437.61 cv
cp
47.066 435.63 mo
47.066 435.33 47.306 435.09 47.546 435.09 cv
47.846 435.09 48.086 435.33 48.086 435.63 cv
48.086 435.87 47.846 436.11 47.546 436.11 cv
47.306 436.11 47.066 435.87 47.066 435.63 cv
cp
47.066 433.59 mo
47.066 433.35 47.306 433.11 47.546 433.11 cv
47.846 433.11 48.086 433.35 48.086 433.59 cv
48.086 433.89 47.846 434.13 47.546 434.13 cv
47.306 434.13 47.066 433.89 47.066 433.59 cv
cp
47.066 431.61 mo
47.066 431.31 47.306 431.13 47.546 431.13 cv
47.846 431.13 48.086 431.31 48.086 431.61 cv
48.086 431.91 47.846 432.09 47.546 432.09 cv
47.306 432.09 47.066 431.91 47.066 431.61 cv
cp
47.066 429.63 mo
47.066 429.33 47.306 429.09 47.546 429.09 cv
47.846 429.09 48.086 429.33 48.086 429.63 cv
48.086 429.87 47.846 430.11 47.546 430.11 cv
47.306 430.11 47.066 429.87 47.066 429.63 cv
cp
47.066 427.59 mo
47.066 427.35 47.306 427.11 47.546 427.11 cv
47.846 427.11 48.086 427.35 48.086 427.59 cv
48.086 427.89 47.846 428.13 47.546 428.13 cv
47.306 428.13 47.066 427.89 47.066 427.59 cv
cp
47.066 425.61 mo
47.066 425.31 47.306 425.13 47.546 425.13 cv
47.846 425.13 48.086 425.31 48.086 425.61 cv
48.086 425.85 47.846 426.09 47.546 426.09 cv
47.306 426.09 47.066 425.85 47.066 425.61 cv
cp
47.066 423.63 mo
47.066 423.33 47.306 423.09 47.546 423.09 cv
47.846 423.09 48.086 423.33 48.086 423.63 cv
48.086 423.87 47.846 424.11 47.546 424.11 cv
47.306 424.11 47.066 423.87 47.066 423.63 cv
cp
47.066 421.59 mo
47.066 421.35 47.306 421.11 47.546 421.11 cv
47.846 421.11 48.086 421.35 48.086 421.59 cv
48.086 421.89 47.846 422.13 47.546 422.13 cv
47.306 422.13 47.066 421.89 47.066 421.59 cv
cp
47.066 419.61 mo
47.066 419.31 47.306 419.07 47.546 419.07 cv
47.846 419.07 48.086 419.31 48.086 419.61 cv
48.086 419.85 47.846 420.09 47.546 420.09 cv
47.306 420.09 47.066 419.85 47.066 419.61 cv
cp
47.066 417.57 mo
47.066 417.33 47.306 417.09 47.546 417.09 cv
47.846 417.09 48.086 417.33 48.086 417.57 cv
48.086 417.87 47.846 418.11 47.546 418.11 cv
47.306 418.11 47.066 417.87 47.066 417.57 cv
cp
47.066 415.59 mo
47.066 415.35 47.306 415.11 47.546 415.11 cv
47.846 415.11 48.086 415.35 48.086 415.59 cv
48.086 415.89 47.846 416.07 47.546 416.07 cv
47.306 416.07 47.066 415.89 47.066 415.59 cv
cp
47.066 413.61 mo
47.066 413.31 47.306 413.07 47.546 413.07 cv
47.846 413.07 48.086 413.31 48.086 413.61 cv
48.086 413.85 47.846 414.09 47.546 414.09 cv
47.306 414.09 47.066 413.85 47.066 413.61 cv
cp
47.066 411.57 mo
47.066 411.33 47.306 411.09 47.546 411.09 cv
47.846 411.09 48.086 411.33 48.086 411.57 cv
48.086 411.87 47.846 412.11 47.546 412.11 cv
47.306 412.11 47.066 411.87 47.066 411.57 cv
cp
48.686 410.19 mo
48.986 410.19 49.166 410.43 49.166 410.73 cv
49.166 410.97 48.986 411.21 48.686 411.21 cv
48.386 411.21 48.206 410.97 48.206 410.73 cv
48.206 410.43 48.386 410.19 48.686 410.19 cv
cp
50.666 410.19 mo
50.966 410.19 51.206 410.43 51.206 410.73 cv
51.206 410.97 50.966 411.21 50.666 411.21 cv
50.426 411.21 50.186 410.97 50.186 410.73 cv
50.186 410.43 50.426 410.19 50.666 410.19 cv
cp
52.706 410.19 mo
52.946 410.19 53.186 410.43 53.186 410.73 cv
53.186 410.97 52.946 411.21 52.706 411.21 cv
52.406 411.21 52.166 410.97 52.166 410.73 cv
52.166 410.43 52.406 410.19 52.706 410.19 cv
cp
54.686 410.19 mo
54.986 410.19 55.166 410.43 55.166 410.73 cv
55.166 410.97 54.986 411.21 54.686 411.21 cv
54.386 411.21 54.206 410.97 54.206 410.73 cv
54.206 410.43 54.386 410.19 54.686 410.19 cv
cp
56.666 410.19 mo
56.966 410.19 57.206 410.43 57.206 410.73 cv
57.206 410.97 56.966 411.21 56.666 411.21 cv
56.426 411.21 56.186 410.97 56.186 410.73 cv
56.186 410.43 56.426 410.19 56.666 410.19 cv
cp
58.706 410.19 mo
58.946 410.19 59.186 410.43 59.186 410.73 cv
59.186 410.97 58.946 411.21 58.706 411.21 cv
58.406 411.21 58.166 410.97 58.166 410.73 cv
58.166 410.43 58.406 410.19 58.706 410.19 cv
cp
60.686 410.19 mo
60.986 410.19 61.166 410.43 61.166 410.73 cv
61.166 410.97 60.986 411.21 60.686 411.21 cv
60.386 411.21 60.206 410.97 60.206 410.73 cv
60.206 410.43 60.386 410.19 60.686 410.19 cv
cp
62.666 410.19 mo
62.966 410.19 63.206 410.43 63.206 410.73 cv
63.206 410.97 62.966 411.21 62.666 411.21 cv
62.426 411.21 62.186 410.97 62.186 410.73 cv
62.186 410.43 62.426 410.19 62.666 410.19 cv
cp
64.706 410.19 mo
64.946 410.19 65.186 410.43 65.186 410.73 cv
65.186 410.97 64.946 411.21 64.706 411.21 cv
64.406 411.21 64.166 410.97 64.166 410.73 cv
64.166 410.43 64.406 410.19 64.706 410.19 cv
cp
66.686 410.19 mo
66.986 410.19 67.166 410.43 67.166 410.73 cv
67.166 410.97 66.986 411.21 66.686 411.21 cv
66.446 411.21 66.206 410.97 66.206 410.73 cv
66.206 410.43 66.446 410.19 66.686 410.19 cv
cp
68.666 410.19 mo
68.726 410.19 li
68.966 410.19 69.206 410.43 69.206 410.73 cv
69.206 410.97 68.966 411.21 68.726 411.21 cv
68.666 411.21 li
68.426 411.21 68.186 410.97 68.186 410.73 cv
68.186 410.43 68.426 410.19 68.666 410.19 cv
cp
70.706 410.19 mo
70.946 410.19 71.186 410.43 71.186 410.73 cv
71.186 410.97 70.946 411.21 70.706 411.21 cv
70.406 411.21 70.226 410.97 70.226 410.73 cv
70.226 410.43 70.406 410.19 70.706 410.19 cv
cp
72.686 410.19 mo
72.986 410.19 73.226 410.43 73.226 410.73 cv
73.226 410.97 72.986 411.21 72.686 411.21 cv
72.446 411.21 72.206 410.97 72.206 410.73 cv
72.206 410.43 72.446 410.19 72.686 410.19 cv
cp
74.726 410.19 mo
74.966 410.19 75.206 410.43 75.206 410.73 cv
75.206 410.97 74.966 411.21 74.726 411.21 cv
74.426 411.21 74.186 410.97 74.186 410.73 cv
74.186 410.43 74.426 410.19 74.726 410.19 cv
cp
76.706 410.19 mo
77.006 410.19 77.186 410.43 77.186 410.73 cv
77.186 410.97 77.006 411.21 76.706 411.21 cv
76.406 411.21 76.226 410.97 76.226 410.73 cv
76.226 410.43 76.406 410.19 76.706 410.19 cv
cp
78.686 410.19 mo
78.986 410.19 79.226 410.43 79.226 410.73 cv
79.226 410.97 78.986 411.21 78.686 411.21 cv
78.446 411.21 78.206 410.97 78.206 410.73 cv
78.206 410.43 78.446 410.19 78.686 410.19 cv
cp
80.726 410.19 mo
80.966 410.19 81.206 410.43 81.206 410.73 cv
81.206 410.97 80.966 411.21 80.726 411.21 cv
80.426 411.21 80.186 410.97 80.186 410.73 cv
80.186 410.43 80.426 410.19 80.726 410.19 cv
cp
82.706 410.19 mo
83.006 410.19 83.186 410.43 83.186 410.73 cv
83.186 410.97 83.006 411.21 82.706 411.21 cv
82.406 411.21 82.226 410.97 82.226 410.73 cv
82.226 410.43 82.406 410.19 82.706 410.19 cv
cp
84.686 410.19 mo
84.986 410.19 85.226 410.43 85.226 410.73 cv
85.226 410.97 84.986 411.21 84.686 411.21 cv
84.446 411.21 84.206 410.97 84.206 410.73 cv
84.206 410.43 84.446 410.19 84.686 410.19 cv
cp
86.726 410.19 mo
86.966 410.19 87.206 410.43 87.206 410.73 cv
87.206 410.97 86.966 411.21 86.726 411.21 cv
86.426 411.21 86.186 410.97 86.186 410.73 cv
86.186 410.43 86.426 410.19 86.726 410.19 cv
cp
88.706 410.19 mo
89.006 410.19 89.186 410.43 89.186 410.73 cv
89.186 410.97 89.006 411.21 88.706 411.21 cv
88.406 411.21 88.226 410.97 88.226 410.73 cv
88.226 410.43 88.406 410.19 88.706 410.19 cv
cp
90.686 410.19 mo
90.986 410.19 91.226 410.43 91.226 410.73 cv
91.226 410.97 90.986 411.21 90.686 411.21 cv
90.446 411.21 90.206 410.97 90.206 410.73 cv
90.206 410.43 90.446 410.19 90.686 410.19 cv
cp
92.726 410.19 mo
92.966 410.19 93.206 410.43 93.206 410.73 cv
93.206 410.97 92.966 411.21 92.726 411.21 cv
92.426 411.21 92.186 410.97 92.186 410.73 cv
92.186 410.43 92.426 410.19 92.726 410.19 cv
cp
94.706 410.19 mo
95.006 410.19 95.186 410.43 95.186 410.73 cv
95.186 410.97 95.006 411.21 94.706 411.21 cv
94.406 411.21 94.226 410.97 94.226 410.73 cv
94.226 410.43 94.406 410.19 94.706 410.19 cv
cp
96.686 410.19 mo
96.986 410.19 97.226 410.43 97.226 410.73 cv
97.226 410.97 96.986 411.21 96.686 411.21 cv
96.446 411.21 96.206 410.97 96.206 410.73 cv
96.206 410.43 96.446 410.19 96.686 410.19 cv
cp
98.726 410.19 mo
98.966 410.19 99.206 410.43 99.206 410.73 cv
99.206 410.97 98.966 411.21 98.726 411.21 cv
98.426 411.21 98.186 410.97 98.186 410.73 cv
98.186 410.43 98.426 410.19 98.726 410.19 cv
cp
100.706 410.19 mo
101.006 410.19 101.186 410.43 101.186 410.73 cv
101.186 410.97 101.006 411.21 100.706 411.21 cv
100.406 411.21 100.226 410.97 100.226 410.73 cv
100.226 410.43 100.406 410.19 100.706 410.19 cv
cp
102.686 410.19 mo
102.986 410.19 103.226 410.43 103.226 410.73 cv
103.226 410.97 102.986 411.21 102.686 411.21 cv
102.446 411.21 102.206 410.97 102.206 410.73 cv
102.206 410.43 102.446 410.19 102.686 410.19 cv
cp
104.726 410.19 mo
104.966 410.19 105.206 410.43 105.206 410.73 cv
105.206 410.97 104.966 411.21 104.726 411.21 cv
104.426 411.21 104.186 410.97 104.186 410.73 cv
104.186 410.43 104.426 410.19 104.726 410.19 cv
cp
106.706 410.19 mo
107.006 410.19 107.186 410.43 107.186 410.73 cv
107.186 410.97 107.006 411.21 106.706 411.21 cv
106.466 411.21 106.226 410.97 106.226 410.73 cv
106.226 410.43 106.466 410.19 106.706 410.19 cv
cp
108.686 410.19 mo
108.746 410.19 li
108.986 410.19 109.226 410.43 109.226 410.73 cv
109.226 410.97 108.986 411.21 108.746 411.21 cv
108.686 411.21 li
108.446 411.21 108.206 410.97 108.206 410.73 cv
108.206 410.43 108.446 410.19 108.686 410.19 cv
cp
110.726 410.19 mo
110.966 410.19 111.206 410.43 111.206 410.73 cv
111.206 410.97 110.966 411.21 110.726 411.21 cv
110.426 411.21 110.246 410.97 110.246 410.73 cv
110.246 410.43 110.426 410.19 110.726 410.19 cv
cp
112.706 410.19 mo
113.006 410.19 113.246 410.43 113.246 410.73 cv
113.246 410.97 113.006 411.21 112.706 411.21 cv
112.466 411.21 112.226 410.97 112.226 410.73 cv
112.226 410.43 112.466 410.19 112.706 410.19 cv
cp
114.746 410.19 mo
114.986 410.19 115.226 410.43 115.226 410.73 cv
115.226 410.97 114.986 411.21 114.746 411.21 cv
114.446 411.21 114.206 410.97 114.206 410.73 cv
114.206 410.43 114.446 410.19 114.746 410.19 cv
cp
116.726 410.19 mo
117.026 410.19 117.206 410.43 117.206 410.73 cv
117.206 410.97 117.026 411.21 116.726 411.21 cv
116.426 411.21 116.246 410.97 116.246 410.73 cv
116.246 410.43 116.426 410.19 116.726 410.19 cv
cp
118.706 410.19 mo
119.006 410.19 119.246 410.43 119.246 410.73 cv
119.246 410.97 119.006 411.21 118.706 411.21 cv
118.466 411.21 118.226 410.97 118.226 410.73 cv
118.226 410.43 118.466 410.19 118.706 410.19 cv
cp
120.746 410.19 mo
120.986 410.19 121.226 410.43 121.226 410.73 cv
121.226 410.97 120.986 411.21 120.746 411.21 cv
120.446 411.21 120.206 410.97 120.206 410.73 cv
120.206 410.43 120.446 410.19 120.746 410.19 cv
cp
122.726 410.19 mo
123.026 410.19 123.206 410.43 123.206 410.73 cv
123.206 410.97 123.026 411.21 122.726 411.21 cv
122.426 411.21 122.246 410.97 122.246 410.73 cv
122.246 410.43 122.426 410.19 122.726 410.19 cv
cp
124.706 410.19 mo
125.006 410.19 125.246 410.43 125.246 410.73 cv
125.246 410.97 125.006 411.21 124.706 411.21 cv
124.466 411.21 124.226 410.97 124.226 410.73 cv
124.226 410.43 124.466 410.19 124.706 410.19 cv
cp
126.746 410.19 mo
126.986 410.19 127.226 410.43 127.226 410.73 cv
127.226 410.97 126.986 411.21 126.746 411.21 cv
126.446 411.21 126.206 410.97 126.206 410.73 cv
126.206 410.43 126.446 410.19 126.746 410.19 cv
cp
128.726 410.19 mo
129.026 410.19 129.206 410.43 129.206 410.73 cv
129.206 410.97 129.026 411.21 128.726 411.21 cv
128.426 411.21 128.246 410.97 128.246 410.73 cv
128.246 410.43 128.426 410.19 128.726 410.19 cv
cp
130.706 410.19 mo
131.006 410.19 131.246 410.43 131.246 410.73 cv
131.246 410.97 131.006 411.21 130.706 411.21 cv
130.466 411.21 130.226 410.97 130.226 410.73 cv
130.226 410.43 130.466 410.19 130.706 410.19 cv
cp
132.746 410.19 mo
132.986 410.19 133.226 410.43 133.226 410.73 cv
133.226 410.97 132.986 411.21 132.746 411.21 cv
132.446 411.21 132.206 410.97 132.206 410.73 cv
132.206 410.43 132.446 410.19 132.746 410.19 cv
cp
134.726 410.19 mo
135.026 410.19 135.206 410.43 135.206 410.73 cv
135.206 410.97 135.026 411.21 134.726 411.21 cv
134.426 411.21 134.246 410.97 134.246 410.73 cv
134.246 410.43 134.426 410.19 134.726 410.19 cv
cp
136.706 410.19 mo
137.006 410.19 137.246 410.43 137.246 410.73 cv
137.246 410.97 137.006 411.21 136.706 411.21 cv
136.466 411.21 136.226 410.97 136.226 410.73 cv
136.226 410.43 136.466 410.19 136.706 410.19 cv
cp
138.746 410.19 mo
138.986 410.19 139.226 410.43 139.226 410.73 cv
139.226 410.97 138.986 411.21 138.746 411.21 cv
138.446 411.21 138.206 410.97 138.206 410.73 cv
138.206 410.43 138.446 410.19 138.746 410.19 cv
cp
140.726 410.19 mo
141.026 410.19 141.206 410.43 141.206 410.73 cv
141.206 410.97 141.026 411.21 140.726 411.21 cv
140.426 411.21 140.246 410.97 140.246 410.73 cv
140.246 410.43 140.426 410.19 140.726 410.19 cv
cp
142.706 410.19 mo
143.006 410.19 143.246 410.43 143.246 410.73 cv
143.246 410.97 143.006 411.21 142.706 411.21 cv
142.466 411.21 142.226 410.97 142.226 410.73 cv
142.226 410.43 142.466 410.19 142.706 410.19 cv
cp
144.746 410.19 mo
144.986 410.19 145.226 410.43 145.226 410.73 cv
145.226 410.97 144.986 411.21 144.746 411.21 cv
144.446 411.21 144.206 410.97 144.206 410.73 cv
144.206 410.43 144.446 410.19 144.746 410.19 cv
cp
146.726 410.19 mo
147.026 410.19 147.206 410.43 147.206 410.73 cv
147.206 410.97 147.026 411.21 146.726 411.21 cv
146.486 411.21 146.246 410.97 146.246 410.73 cv
146.246 410.43 146.486 410.19 146.726 410.19 cv
cp
148.706 410.19 mo
148.766 410.19 li
149.006 410.19 149.246 410.43 149.246 410.73 cv
149.246 410.97 149.006 411.21 148.766 411.21 cv
148.706 411.21 li
148.466 411.21 148.226 410.97 148.226 410.73 cv
148.226 410.43 148.466 410.19 148.706 410.19 cv
cp
150.746 410.19 mo
150.986 410.19 151.226 410.43 151.226 410.73 cv
151.226 410.97 150.986 411.21 150.746 411.21 cv
150.446 411.21 150.266 410.97 150.266 410.73 cv
150.266 410.43 150.446 410.19 150.746 410.19 cv
cp
152.726 410.19 mo
153.026 410.19 153.266 410.43 153.266 410.73 cv
153.266 410.97 153.026 411.21 152.726 411.21 cv
152.486 411.21 152.246 410.97 152.246 410.73 cv
152.246 410.43 152.486 410.19 152.726 410.19 cv
cp
154.766 410.19 mo
155.006 410.19 155.246 410.43 155.246 410.73 cv
155.246 410.97 155.006 411.21 154.766 411.21 cv
154.466 411.21 154.226 410.97 154.226 410.73 cv
154.226 410.43 154.466 410.19 154.766 410.19 cv
cp
156.746 410.19 mo
157.046 410.19 157.226 410.43 157.226 410.73 cv
157.226 410.97 157.046 411.21 156.746 411.21 cv
156.446 411.21 156.266 410.97 156.266 410.73 cv
156.266 410.43 156.446 410.19 156.746 410.19 cv
cp
158.726 410.19 mo
159.026 410.19 159.266 410.43 159.266 410.73 cv
159.266 410.97 159.026 411.21 158.726 411.21 cv
158.486 411.21 158.246 410.97 158.246 410.73 cv
158.246 410.43 158.486 410.19 158.726 410.19 cv
cp
160.766 410.19 mo
161.006 410.19 161.246 410.43 161.246 410.73 cv
161.246 410.97 161.006 411.21 160.766 411.21 cv
160.466 411.21 160.226 410.97 160.226 410.73 cv
160.226 410.43 160.466 410.19 160.766 410.19 cv
cp
162.746 410.19 mo
163.046 410.19 163.226 410.43 163.226 410.73 cv
163.226 410.97 163.046 411.21 162.746 411.21 cv
162.446 411.21 162.266 410.97 162.266 410.73 cv
162.266 410.43 162.446 410.19 162.746 410.19 cv
cp
164.726 410.19 mo
165.026 410.19 165.266 410.43 165.266 410.73 cv
165.266 410.97 165.026 411.21 164.726 411.21 cv
164.486 411.21 164.246 410.97 164.246 410.73 cv
164.246 410.43 164.486 410.19 164.726 410.19 cv
cp
166.766 410.19 mo
167.006 410.19 167.246 410.43 167.246 410.73 cv
167.246 410.97 167.006 411.21 166.766 411.21 cv
166.466 411.21 166.226 410.97 166.226 410.73 cv
166.226 410.43 166.466 410.19 166.766 410.19 cv
cp
168.746 410.19 mo
169.046 410.19 169.226 410.43 169.226 410.73 cv
169.226 410.97 169.046 411.21 168.746 411.21 cv
168.446 411.21 168.266 410.97 168.266 410.73 cv
168.266 410.43 168.446 410.19 168.746 410.19 cv
cp
170.726 410.19 mo
171.026 410.19 171.266 410.43 171.266 410.73 cv
171.266 410.97 171.026 411.21 170.726 411.21 cv
170.486 411.21 170.246 410.97 170.246 410.73 cv
170.246 410.43 170.486 410.19 170.726 410.19 cv
cp
172.766 410.19 mo
173.006 410.19 173.246 410.43 173.246 410.73 cv
173.246 410.97 173.006 411.21 172.766 411.21 cv
172.466 411.21 172.226 410.97 172.226 410.73 cv
172.226 410.43 172.466 410.19 172.766 410.19 cv
cp
174.746 410.19 mo
175.046 410.19 175.226 410.43 175.226 410.73 cv
175.226 410.97 175.046 411.21 174.746 411.21 cv
174.446 411.21 174.266 410.97 174.266 410.73 cv
174.266 410.43 174.446 410.19 174.746 410.19 cv
cp
176.726 410.19 mo
177.026 410.19 177.266 410.43 177.266 410.73 cv
177.266 410.97 177.026 411.21 176.726 411.21 cv
176.486 411.21 176.246 410.97 176.246 410.73 cv
176.246 410.43 176.486 410.19 176.726 410.19 cv
cp
178.766 410.19 mo
179.006 410.19 179.246 410.43 179.246 410.73 cv
179.246 410.97 179.006 411.21 178.766 411.21 cv
178.466 411.21 178.226 410.97 178.226 410.73 cv
178.226 410.43 178.466 410.19 178.766 410.19 cv
cp
180.746 410.19 mo
181.046 410.19 181.226 410.43 181.226 410.73 cv
181.226 410.97 181.046 411.21 180.746 411.21 cv
180.446 411.21 180.266 410.97 180.266 410.73 cv
180.266 410.43 180.446 410.19 180.746 410.19 cv
cp
182.726 410.19 mo
183.026 410.19 183.266 410.43 183.266 410.73 cv
183.266 410.97 183.026 411.21 182.726 411.21 cv
182.486 411.21 182.246 410.97 182.246 410.73 cv
182.246 410.43 182.486 410.19 182.726 410.19 cv
cp
184.766 410.19 mo
185.006 410.19 185.246 410.43 185.246 410.73 cv
185.246 410.97 185.006 411.21 184.766 411.21 cv
184.466 411.21 184.226 410.97 184.226 410.73 cv
184.226 410.43 184.466 410.19 184.766 410.19 cv
cp
186.746 410.19 mo
187.046 410.19 187.226 410.43 187.226 410.73 cv
187.226 410.97 187.046 411.21 186.746 411.21 cv
186.506 411.21 186.266 410.97 186.266 410.73 cv
186.266 410.43 186.506 410.19 186.746 410.19 cv
cp
188.726 410.19 mo
188.786 410.19 li
189.026 410.19 189.266 410.43 189.266 410.73 cv
189.266 410.97 189.026 411.21 188.786 411.21 cv
188.726 411.21 li
188.486 411.21 188.246 410.97 188.246 410.73 cv
188.246 410.43 188.486 410.19 188.726 410.19 cv
cp
190.766 410.19 mo
191.006 410.19 191.246 410.43 191.246 410.73 cv
191.246 410.97 191.006 411.21 190.766 411.21 cv
190.466 411.21 190.286 410.97 190.286 410.73 cv
190.286 410.43 190.466 410.19 190.766 410.19 cv
cp
192.746 410.19 mo
193.046 410.19 193.286 410.43 193.286 410.73 cv
193.286 410.97 193.046 411.21 192.746 411.21 cv
192.506 411.21 192.266 410.97 192.266 410.73 cv
192.266 410.43 192.506 410.19 192.746 410.19 cv
cp
194.786 410.19 mo
195.026 410.19 195.266 410.43 195.266 410.73 cv
195.266 410.97 195.026 411.21 194.786 411.21 cv
194.486 411.21 194.246 410.97 194.246 410.73 cv
194.246 410.43 194.486 410.19 194.786 410.19 cv
cp
196.766 410.19 mo
197.066 410.19 197.246 410.43 197.246 410.73 cv
197.246 410.97 197.066 411.21 196.766 411.21 cv
196.466 411.21 196.286 410.97 196.286 410.73 cv
196.286 410.43 196.466 410.19 196.766 410.19 cv
cp
198.746 410.19 mo
199.046 410.19 199.286 410.43 199.286 410.73 cv
199.286 410.97 199.046 411.21 198.746 411.21 cv
198.506 411.21 198.266 410.97 198.266 410.73 cv
198.266 410.43 198.506 410.19 198.746 410.19 cv
cp
200.786 410.19 mo
201.026 410.19 201.266 410.43 201.266 410.73 cv
201.266 410.97 201.026 411.21 200.786 411.21 cv
200.486 411.21 200.246 410.97 200.246 410.73 cv
200.246 410.43 200.486 410.19 200.786 410.19 cv
cp
202.766 410.19 mo
203.066 410.19 203.246 410.43 203.246 410.73 cv
203.246 410.97 203.066 411.21 202.766 411.21 cv
202.466 411.21 202.286 410.97 202.286 410.73 cv
202.286 410.43 202.466 410.19 202.766 410.19 cv
cp
204.746 410.19 mo
205.046 410.19 205.286 410.43 205.286 410.73 cv
205.286 410.97 205.046 411.21 204.746 411.21 cv
204.506 411.21 204.266 410.97 204.266 410.73 cv
204.266 410.43 204.506 410.19 204.746 410.19 cv
cp
206.786 410.19 mo
207.026 410.19 207.266 410.43 207.266 410.73 cv
207.266 410.97 207.026 411.21 206.786 411.21 cv
206.486 411.21 206.246 410.97 206.246 410.73 cv
206.246 410.43 206.486 410.19 206.786 410.19 cv
cp
208.766 410.19 mo
209.066 410.19 209.246 410.43 209.246 410.73 cv
209.246 410.97 209.066 411.21 208.766 411.21 cv
208.466 411.21 208.286 410.97 208.286 410.73 cv
208.286 410.43 208.466 410.19 208.766 410.19 cv
cp
210.746 410.19 mo
211.046 410.19 211.286 410.43 211.286 410.73 cv
211.286 410.97 211.046 411.21 210.746 411.21 cv
210.506 411.21 210.266 410.97 210.266 410.73 cv
210.266 410.43 210.506 410.19 210.746 410.19 cv
cp
212.786 410.19 mo
213.026 410.19 213.266 410.43 213.266 410.73 cv
213.266 410.97 213.026 411.21 212.786 411.21 cv
212.486 411.21 212.246 410.97 212.246 410.73 cv
212.246 410.43 212.486 410.19 212.786 410.19 cv
cp
214.766 410.19 mo
215.066 410.19 215.246 410.43 215.246 410.73 cv
215.246 410.97 215.066 411.21 214.766 411.21 cv
214.466 411.21 214.286 410.97 214.286 410.73 cv
214.286 410.43 214.466 410.19 214.766 410.19 cv
cp
216.086 411.93 mo
216.086 412.17 215.846 412.41 215.546 412.41 cv
215.306 412.41 215.066 412.17 215.066 411.93 cv
215.066 411.63 215.306 411.39 215.546 411.39 cv
215.846 411.39 216.086 411.63 216.086 411.93 cv
cp
216.086 413.91 mo
216.086 414.21 215.846 414.39 215.546 414.39 cv
215.306 414.39 215.066 414.21 215.066 413.91 cv
215.066 413.61 215.306 413.43 215.546 413.43 cv
215.846 413.43 216.086 413.61 216.086 413.91 cv
cp
216.086 415.89 mo
216.086 416.19 215.846 416.43 215.546 416.43 cv
215.306 416.43 215.066 416.19 215.066 415.89 cv
215.066 415.65 215.306 415.41 215.546 415.41 cv
215.846 415.41 216.086 415.65 216.086 415.89 cv
cp
216.086 417.93 mo
216.086 418.17 215.846 418.41 215.546 418.41 cv
215.306 418.41 215.066 418.17 215.066 417.93 cv
215.066 417.63 215.306 417.39 215.546 417.39 cv
215.846 417.39 216.086 417.63 216.086 417.93 cv
cp
216.086 419.91 mo
216.086 420.21 215.846 420.39 215.546 420.39 cv
215.306 420.39 215.066 420.21 215.066 419.91 cv
215.066 419.61 215.306 419.43 215.546 419.43 cv
215.846 419.43 216.086 419.61 216.086 419.91 cv
cp
216.086 421.89 mo
216.086 422.19 215.846 422.43 215.546 422.43 cv
215.306 422.43 215.066 422.19 215.066 421.89 cv
215.066 421.65 215.306 421.41 215.546 421.41 cv
215.846 421.41 216.086 421.65 216.086 421.89 cv
cp
216.086 423.93 mo
216.086 424.17 215.846 424.41 215.546 424.41 cv
215.306 424.41 215.066 424.17 215.066 423.93 cv
215.066 423.63 215.306 423.39 215.546 423.39 cv
215.846 423.39 216.086 423.63 216.086 423.93 cv
cp
216.086 425.91 mo
216.086 426.21 215.846 426.39 215.546 426.39 cv
215.306 426.39 215.066 426.21 215.066 425.91 cv
215.066 425.61 215.306 425.43 215.546 425.43 cv
215.846 425.43 216.086 425.61 216.086 425.91 cv
cp
216.086 427.89 mo
216.086 428.19 215.846 428.43 215.546 428.43 cv
215.306 428.43 215.066 428.19 215.066 427.89 cv
215.066 427.65 215.306 427.41 215.546 427.41 cv
215.846 427.41 216.086 427.65 216.086 427.89 cv
cp
216.086 429.93 mo
216.086 430.17 215.846 430.41 215.546 430.41 cv
215.306 430.41 215.066 430.17 215.066 429.93 cv
215.066 429.63 215.306 429.39 215.546 429.39 cv
215.846 429.39 216.086 429.63 216.086 429.93 cv
cp
216.086 431.91 mo
216.086 432.21 215.846 432.39 215.546 432.39 cv
215.306 432.39 215.066 432.21 215.066 431.91 cv
215.066 431.61 215.306 431.43 215.546 431.43 cv
215.846 431.43 216.086 431.61 216.086 431.91 cv
cp
216.086 433.89 mo
216.086 434.19 215.846 434.43 215.546 434.43 cv
215.306 434.43 215.066 434.19 215.066 433.89 cv
215.066 433.65 215.306 433.41 215.546 433.41 cv
215.846 433.41 216.086 433.65 216.086 433.89 cv
cp
216.086 435.93 mo
216.086 436.17 215.846 436.41 215.546 436.41 cv
215.306 436.41 215.066 436.17 215.066 435.93 cv
215.066 435.63 215.306 435.39 215.546 435.39 cv
215.846 435.39 216.086 435.63 216.086 435.93 cv
cp
216.086 437.91 mo
216.086 438.21 215.846 438.39 215.546 438.39 cv
215.306 438.39 215.066 438.21 215.066 437.91 cv
215.066 437.61 215.306 437.43 215.546 437.43 cv
215.846 437.43 216.086 437.61 216.086 437.91 cv
cp
216.086 439.89 mo
216.086 440.19 215.846 440.43 215.546 440.43 cv
215.306 440.43 215.066 440.19 215.066 439.89 cv
215.066 439.65 215.306 439.41 215.546 439.41 cv
215.846 439.41 216.086 439.65 216.086 439.89 cv
cp
216.086 441.93 mo
216.086 442.17 215.846 442.41 215.546 442.41 cv
215.306 442.41 215.066 442.17 215.066 441.93 cv
215.066 441.63 215.306 441.39 215.546 441.39 cv
215.846 441.39 216.086 441.63 216.086 441.93 cv
cp
216.086 443.91 mo
216.086 444.21 215.846 444.39 215.546 444.39 cv
215.306 444.39 215.066 444.21 215.066 443.91 cv
215.066 443.67 215.306 443.43 215.546 443.43 cv
215.846 443.43 216.086 443.67 216.086 443.91 cv
cp
216.086 445.89 mo
216.086 445.95 li
216.086 446.19 215.846 446.43 215.546 446.43 cv
215.306 446.43 215.066 446.19 215.066 445.95 cv
215.066 445.89 li
215.066 445.65 215.306 445.41 215.546 445.41 cv
215.846 445.41 216.086 445.65 216.086 445.89 cv
cp
216.086 447.93 mo
216.086 448.17 215.846 448.41 215.546 448.41 cv
215.306 448.41 215.066 448.17 215.066 447.93 cv
215.066 447.63 215.306 447.45 215.546 447.45 cv
215.846 447.45 216.086 447.63 216.086 447.93 cv
cp
216.086 449.91 mo
216.086 450.21 215.846 450.45 215.546 450.45 cv
215.306 450.45 215.066 450.21 215.066 449.91 cv
215.066 449.67 215.306 449.43 215.546 449.43 cv
215.846 449.43 216.086 449.67 216.086 449.91 cv
cp
216.086 451.95 mo
216.086 452.19 215.846 452.43 215.546 452.43 cv
215.306 452.43 215.066 452.19 215.066 451.95 cv
215.066 451.65 215.306 451.41 215.546 451.41 cv
215.846 451.41 216.086 451.65 216.086 451.95 cv
cp
216.086 453.93 mo
216.086 454.23 215.846 454.41 215.546 454.41 cv
215.306 454.41 215.066 454.23 215.066 453.93 cv
215.066 453.63 215.306 453.45 215.546 453.45 cv
215.846 453.45 216.086 453.63 216.086 453.93 cv
cp
216.086 455.91 mo
216.086 456.21 215.846 456.45 215.546 456.45 cv
215.306 456.45 215.066 456.21 215.066 455.91 cv
215.066 455.67 215.306 455.43 215.546 455.43 cv
215.846 455.43 216.086 455.67 216.086 455.91 cv
cp
216.086 457.95 mo
216.086 458.19 215.846 458.43 215.546 458.43 cv
215.306 458.43 215.066 458.19 215.066 457.95 cv
215.066 457.65 215.306 457.41 215.546 457.41 cv
215.846 457.41 216.086 457.65 216.086 457.95 cv
cp
216.086 459.93 mo
216.086 460.23 215.846 460.41 215.546 460.41 cv
215.306 460.41 215.066 460.23 215.066 459.93 cv
215.066 459.63 215.306 459.45 215.546 459.45 cv
215.846 459.45 216.086 459.63 216.086 459.93 cv
cp
216.086 461.91 mo
216.086 462.21 215.846 462.45 215.546 462.45 cv
215.306 462.45 215.066 462.21 215.066 461.91 cv
215.066 461.67 215.306 461.43 215.546 461.43 cv
215.846 461.43 216.086 461.67 216.086 461.91 cv
cp
216.086 463.95 mo
216.086 464.19 215.846 464.43 215.546 464.43 cv
215.306 464.43 215.066 464.19 215.066 463.95 cv
215.066 463.65 215.306 463.41 215.546 463.41 cv
215.846 463.41 216.086 463.65 216.086 463.95 cv
f
115.226 374.73 mo
116.186 374.73 li
116.186 319.23 li
115.226 319.23 li
cp
f
142.946 374.73 mo
143.966 374.73 li
143.966 319.23 li
142.946 319.23 li
cp
f
115.706 319.71 mo
143.426 319.71 li
143.426 318.69 li
115.706 318.69 li
cp
f
131.546 308.73 mo
118.346 308.73 107.546 297.99 107.546 284.73 cv
107.546 271.47 118.346 260.73 131.546 260.73 cv
144.806 260.73 155.546 271.47 155.546 284.73 cv
155.546 297.99 144.806 308.73 131.546 308.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
131.606 309.21 mo
129.086 309.09 li
99.829 305.04 99.803 264.401 129.086 260.31 cv
130.286 260.25 li
131.546 260.19 li
161.801 261.278 165.05 303.226 135.326 308.91 cv
134.066 309.09 li
132.866 309.15 li
cp
132.746 308.19 mo
135.146 307.95 li
162.943 302.651 161.033 263.756 132.806 261.21 cv
130.406 261.21 li
101.5 263.796 100.381 304.015 129.146 308.07 cv
130.346 308.19 li
131.546 308.19 li
.75021 .679683 .670222 .90164 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HBAAAA+ComicSansMS AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OQATOC+ComicSansMS gcheck setglobal} if
1 1280 38 <0001005affe804b305f3002f0067404b2611360e40115000511260140600
19064a065a06030637282302140e371b0b30260a450a021702002c302c50
2c702c042c0a38001f01701f801f901fa01fb01fd01fe01f071f2b303d4c
182b4e10f45d714deddd5dc5c45d0010f4fdd43fc5fd5dd65d3130012227
262726232207021114171633323736373633321615140704212227263510
011233321617363332171615140706045040201c18155391b1f053557867
683a78391d2b3a26fef8fef2cf8f8a011cedf1314e1e2338451210161b04
624b400e0bdefed6fef5815d60351e582a41282d22ea9f9ad20153016401
29090a335b5176291f27>OQATOC+ComicSansMS AddT42Char 
1 1530 51 <00020064ffe803ed0623001e002c005940392625292b32273d2b04070b2d
2538200001001f3817024b29012938601b01001b101b201b301b401b501b
061b2e2224020438120f500a010a2d10d65d7dc4c418fd7dc6c4c41810d6
5d5ded5d003fed2f5ded10e45d3130012227061114062322263511341312
373534373617363633321716151407060322060707031732373635342726
019d1c5e08342728341214020c174b207656b7a0b0bca8ba2c451802156e
a8737e786f024b0d97fe8628373728012693010b01217d8a632d580c0a0a
7d8ac2f89384031a0404b8fe720d555d9e70514a>OQATOC+ComicSansMS AddT42Char 
1 1760 56 <0001009bffd8056d05df0022004940356600641102060004111400141126
00241145115411081143000b231b020c026a1268227811030e3808231738
291d391d491d031d2410d65ded10d4ed5d003f3f10f4ed5d5d3130052027
260326113437363736333215111021201134352635343736333215141714
15100316fec9997c200f06060c19415c01a8018f01161c37640128b39001
1a7f017c8c565b2449a9fdb5fda203fc263c3c143e2f3c8929535329fb7a
>OQATOC+ComicSansMS AddT42Char 
OQATOC+ComicSansMS /CharStrings get begin
/C 38 def
/P 51 def
/U 56 def
end
OQATOC+ComicSansMS /Encoding get
dup 67 /C put
dup 80 /P put
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OQATOC+ComicSansMS*1 
[48{/.notdef}rp /zero /one 17{/.notdef}rp /C 12{/.notdef}rp /P 4{/.notdef}rp 
/U 170{/.notdef}rp]
OQATOC+ComicSansMS nf
OQATOC+ComicSansMS*1 [0 -16.02 -16.02 0 0 0 ]msf
137.126 299.67 mo
(CPU)
[-9.66483 -8.35117 0 ]ysh
73.226 218.73 mo
74.186 218.73 li
74.186 163.23 li
73.226 163.23 li
cp
.75021 .679683 .670222 .90164 cmyk
f
100.946 218.73 mo
101.966 218.73 li
101.966 163.23 li
100.946 163.23 li
cp
f
73.706 163.71 mo
101.426 163.71 li
101.426 162.69 li
73.706 162.69 li
cp
f
89.546 152.73 mo
76.346 152.73 65.546 141.99 65.546 128.73 cv
65.546 115.47 76.346 104.73 89.546 104.73 cv
102.806 104.73 113.546 115.47 113.546 128.73 cv
113.546 141.99 102.806 152.73 89.546 152.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
89.606 153.21 mo
87.086 153.09 li
57.829 149.04 57.803 108.401 87.086 104.31 cv
88.286 104.25 li
89.546 104.19 li
119.801 105.278 123.05 147.226 93.326 152.91 cv
92.066 153.09 li
90.866 153.15 li
cp
90.746 152.19 mo
93.146 151.95 li
120.943 146.651 119.033 107.756 90.806 105.21 cv
88.406 105.21 li
59.5 107.796 58.381 148.015 87.146 152.07 cv
88.346 152.19 li
89.546 152.19 li
.75021 .679683 .670222 .90164 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HBAAAA+ComicSansMS AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OQATOC+ComicSansMS gcheck setglobal} if
1 542 36 <00020083ffe2054805c60021002500e74054251425237a027a1c8a028a1c
063902390e391c4b094f0e4a105a0e5a106a0e6a100a2c076c07021c0907
02040b3922012523221a161406180240040b0a000a2316140907050e251c
1a0402052250276f27022027b80119400c292c1f5f0e010e2b26564b182b
4e10f45d4ddd4e456544e61a194d5ddd173911173900183f3fd41a3f1739
5d1217395db002b002435158400f07180a0a36223016233622180915362b
2b2b1b4028042522020707062322232522091c021a225817010142072304
2564170000410914221665170101414e2b2b2b87087d10c408c4870e3cc4
593130015d315d0522272627060705060706232226353413263534373613
12333217131317161514060101363704e25c441a2766a5fef63279203728
3f97116272aeed3a4f1d3f95391d3efe77fee279f61eec5ae10e243783fc
383a2b30013d1a225117d60116017b6efeb0fd499e511b2b3a0477fe331f
2c00>OQATOC+ComicSansMS AddT42Char 
OQATOC+ComicSansMS /CharStrings get begin
/A 36 def
end
OQATOC+ComicSansMS /Encoding get
dup 65 /A put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OQATOC+ComicSansMS*1 
[48{/.notdef}rp /zero /one 15{/.notdef}rp /A /.notdef /C 12{/.notdef}rp 
/P 4{/.notdef}rp /U 170{/.notdef}rp]
OQATOC+ComicSansMS nf
OQATOC+ComicSansMS*1 [0 -16.02 -16.02 0 0 0 ]msf
95.126 134.61 mo
(A)sh
163.226 218.73 mo
164.186 218.73 li
164.186 163.23 li
163.226 163.23 li
cp
.75021 .679683 .670222 .90164 cmyk
f
190.946 218.73 mo
191.966 218.73 li
191.966 163.23 li
190.946 163.23 li
cp
f
163.706 163.71 mo
191.426 163.71 li
191.426 162.69 li
163.706 162.69 li
cp
f
179.546 152.73 mo
166.346 152.73 155.546 141.99 155.546 128.73 cv
155.546 115.47 166.346 104.73 179.546 104.73 cv
192.806 104.73 203.546 115.47 203.546 128.73 cv
203.546 141.99 192.806 152.73 179.546 152.73 cv
.25272 .0138247 .0995193 0 cmyk
ef
179.606 153.21 mo
177.086 153.09 li
147.829 149.04 147.803 108.401 177.086 104.31 cv
178.286 104.25 li
179.546 104.19 li
209.801 105.278 213.05 147.226 183.326 152.91 cv
182.066 153.09 li
180.866 153.15 li
cp
180.746 152.19 mo
183.146 151.95 li
210.943 146.651 209.033 107.756 180.806 105.21 cv
178.406 105.21 li
149.5 107.796 148.381 148.015 177.146 152.07 cv
178.346 152.19 li
179.546 152.19 li
.75021 .679683 .670222 .90164 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HBAAAA+ComicSansMS AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OQATOC+ComicSansMS gcheck setglobal} if
1 904 37 <000300bfffd004b80623001c0029003c00b9403c333802073d1d38101002
6016011a271a393a2745164a27051f3821380c33384f057f050205273814
3938162f143f140214001910192019301904193e10d65dc45dc4ed10fdd4
5ded7dd418eded5d5d003f10ed10f4edb002b002435158400c162e382340
101036232302101112392f2bed391b403746356a126c166c2865356c3b7f
16b42508291d26334c164c3b55255f3b062123302338292e36023f2e3535
56025f2e563355356f2e092e2f5dedc410c65d5d59313025062122263511
341312372637363736333217161510071616151407060122070703163736
3736353426032722062322270615152437363736353427260376e1fea22b
4d121402010c071a88adb0a2bbc89695835bfe6e6d2c02148e0a976067d2
056a0d350e363d060106a546403d80602858512b01238f0109011e805cb6
32102a788acbfeff94409c5c797150050807affe7d0c010c52598c5fa2fc
df1103097e63cf09411b39341a2f3b2d>OQATOC+ComicSansMS AddT42Char 
OQATOC+ComicSansMS /CharStrings get begin
/B 37 def
end
OQATOC+ComicSansMS /Encoding get
dup 66 /B put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OQATOC+ComicSansMS*1 
[48{/.notdef}rp /zero /one 15{/.notdef}rp /A /B /C 12{/.notdef}rp 
/P 4{/.notdef}rp /U 170{/.notdef}rp]
OQATOC+ComicSansMS nf
OQATOC+ComicSansMS*1 [0 -16.02 -16.02 0 0 0 ]msf
185.126 133.83 mo
(B)sh
130.046 410.73 mo
129.086 410.73 li
129.086 379.71 li
130.046 379.71 li
cp
129.086 410.73 mo
cp
126.566 380.73 mo
129.566 374.73 li
132.566 380.73 li
.75021 .679683 .670222 .90164 cmyk
f
131.906 260.37 mo
94.406 221.91 li
93.686 222.63 li
131.246 261.03 li
cp
96.926 220.89 mo
90.566 218.73 li
92.606 225.09 li
f
131.246 260.31 mo
175.466 221.61 li
176.126 222.39 li
131.906 261.09 li
cp
173.066 220.41 mo
179.546 218.73 li
177.026 224.91 li
f
90.206 104.371 mo
129.206 62.371 li
129.926 63.0309 li
90.926 105.031 li
f
129.266 63.09 mo
179.246 105.09 li
179.906 104.31 li
129.866 62.3099 li
f
131.066 62.73 mo
132.086 62.73 li
132.086 26.73 li
131.066 26.73 li
cp
f
131.546 27.21 mo
215.546 27.21 li
215.546 26.1899 li
131.546 26.1899 li
cp
f
215.066 392.73 mo
216.086 392.73 li
216.086 26.73 li
215.066 26.73 li
cp
f
215.546 392.19 mo
136.586 392.19 li
136.586 393.21 li
215.546 393.21 li
cp
137.546 389.73 mo
131.546 392.73 li
137.546 395.73 li
f
130.046 530.73 mo
129.086 530.73 li
129.086 475.71 li
130.046 475.71 li
cp
129.086 530.73 mo
cp
126.566 476.73 mo
129.566 470.73 li
132.566 476.73 li
f
23.546 261.21 mo
129.566 261.21 li
129.566 260.19 li
23.546 260.19 li
cp
f
23.066 530.73 mo
24.086 530.73 li
24.086 260.73 li
23.066 260.73 li
cp
f
23.546 531.21 mo
129.566 531.21 li
129.566 530.19 li
23.546 530.19 li
cp
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: MBAAAA+ComicSansMS-Italic Initial
ct_T42Dict begin
-0.348 -0.301 2.988 1.102
 256 array 0 1 255 {1 index exch /.notdef put} for  /MBAAAA+ComicSansMS-Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f324dba976b000000cc000000606376
742016f818420000012c000000b66670676de2d47a6e000001e4000006fe
676c7966b856c9bc00003098000000ea6865616405f9d9cb000008e40000
0036686865611eff1c300000091c00000024686d7478eb82c8c700000940
000011b86c6f63610003d4dc00001af8000011bc6d61787005b4043b0000
2cb4000000206e616d659bddbc4900002cd4000002e370726570e043779a
00002fb8000000de676469720000000000000000000000000003052d0190
00050008059a053300000125059a0533000003a000af02760a08030f0702
030302060204000002870000001300000000000000004d53202000010020
fb020666fdcc000008d102552000009f0000000004510612000000200002
06270023000005d5006b007f05e3002ffe64fe2300000000000000000000
04140030006bfff8ff9e0000fffcffc900000000ffb8fe7bfdd5ffd4fe3f
06850023034affe10000000000000000fe71ffe300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000008000000000000000000000004e10031
fffaffba0000fe93fe6d05f00658fe7ffe5effa60483001b00920000fe9a
02e50000404559585554535251504f4e4d4c4b4a49484746454443424140
3f3e3d3c3b3a393837363531302f2e2d2c28272625242322211f18141110
0f0e0d0b0a090807060504030201002c20b0016045b00325201146612345
2361482d2c20451868442d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b0042651582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b02823
70b10228453ab10200080d2d2c2045b00325456164b050515845441b2121
592d2c49b00e23442d2c2045b0004360442d2c01b00643b00743650a2d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445
b02b23442d2c4b525845441b2121592d2c4b515845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c462346608a8a462320468a608a61b8
ff8062232010238ab10c0c8a70456020b0005058b00161b8ffba8b1bb046
8c59b0106068013a2d2c2045b0032546524bb013515b58b0022546206861
b00325b003253f2321381b2111592d2c2045b00325465058b00225462068
61b00325b003253f2321381b2111592d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4b53588ab004254964234569b040
8b61b08062b020616ab00e23442310b00ef61b21238a121120392f592d2c
4b535820b0032549646920b00526b0062549642361b08062b020616ab00e
2344b0042610b00ef68a10b00e2344b00ef6b00e2344b00eed1b8ab00426
111220392320392f2f592d2c4523456023456023456023766818b0806220
2d2cb0482b2d2c2045b0005458b040442045b04061441b2121592d2c45b1
302f4523456160b0016069442d2c4b5158b02f2370b01423421b2121592d
2c4b515820b0032545695358441b2121591b2121592d2c45b01443b00060
63b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d2c
4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b00326
458a586466b01f601b64b020606620581b21b04059b001615923586559b0
2923442310b029e01b2121212121592d2cb0024354584b53234b515a5838
1b2121591b21212121592d2cb0164358b004254564b020606620581b21b0
4059b0016123581b6559b0292344b00525b00825082058021b0359b00425
10b005252046b0042523423cb00425b0072508b0072510b006252046b004
25b0016023423c2058011b0059b0042510b00525b029e0b02920456544b0
072510b00625b029e0b00525b00825082058021b0359b00525b003254348
b00425b0072508b00625b00325b0016043481b2159212121212121212d2c
02b00425202046b004252342b0052508b003254548212121212d2c02b003
2520b0042508b0022543482121212d2c452320451820b000502058236523
59236820b040505821b04059235865598a60442d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b21
212121592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b
21212121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b
515a5823381b2121592d2c00b0022549b000535820b04038111b21592d2c
014623466023466123201020468a61b8ff80628ab140408a704560683a2d
2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b01
4b54422d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d2c451868234b51582320452064
b04050587c59688a6059442d2cb00016b00225b0022501b001233e00b002
233eb10102060cb00a236542b00b234201b001233f00b002233fb1010206
0cb006236542b0072342b00116012d2c7a8a104523f5182d000000010000
00051c29ad4253785f0f3cf50018080000000000c7280e6600000000ca86
63d9fd31fd9317e808d10000000900020001000000000001000008d1fdab
000016f6fd31fd1717e8060a0112000000000000000000000000046e0400
007f0000000003cf00000264000001e7007d0365010706be005c058c005b
0690015f053c0069031b01e602ee005802ee0037043d00f503d800840237
009b035500b501fe008f0418004f04e20084039a00a104e200b404e200a4
04e2007a04e2009b04e200cd04e2011604e200a204e200cc026400ee0264
0032030d006e04150099030d0061043100c9077300a105da008b050b00c6
04d2009705c600be04ff00af04db00a40570004206250092045f00660552
007304e300d4046800600710007506600081066300a1042a00680703009e
05070089058c0097057000e505e500e40533016c0851016805ca00450515
00f9058c003a0303006d0466018f0303007704a601830504ffa804730187
0418005204bf00a2041c008604b3008a04620073041100cf043fffe8049f
0099023e00c1033aff580452009d023100a7063700850430008904350079
0447003d0429005903d8008003e5002e03c5009a042900af03e400d30579
00d204b90049042a0097044e006f02ee0056035f013a02eeffe204c800c0
05da008b05da008b04d2009704ff00af06600081066300a105e500e40418
00520418005204180052041800520418005204180052041c009a04620073
046200730462007304620073023e00c1023e00c1023e0031023e00630430
00890435007904350079043500790435007904350079042900af042900af
042900af042900af04c600d00346010a04fc00e206590095051400870319
0127058d00ac038c001e065d00c6065d00b5071001310473019c04730199
0415009908b2003a0663005106b200e203d8001a030d000c030d000c0516
012f0429ffe2041200d605fa000b0744009d050600a90599003004370152
0398015507ae0033074b006a043500330431005701e7007703d8008404dc
0071036aff1c04f500b2065b0058049f006e049f0051056700a602640000
05da008b05da008b066300a1098d00a0072d008903880089071000990326
01300326010c0171012b017100e803d8008405c700a103730097051500f9
067dfd3104e20049030d00c6030d00ab054500cf053f00af04c600cc01fe
00f902640032034b003209ee015f05da008b04ff00af05da008b04ff00af
04ff00af045f0066045f0066045f0066045f0066066300a1066300a10663
00a105e500e405e500e405e500e4023e00c10473018604730172047301d3
047301ac04730204047301d90473013804730195047301010473020d0468
001e01d10032058c009703e5002e058c003a044e006f033c014e05c60031
041200ad051500f9042a00680447003d03d800840535012c053501070535
0108053500ff053500fc053500fc042a009703d800be035500b507ea00a4
05700042043fffe8045f0066058c009703e5002e04d20097041c008604d2
009704d2008604d2008a0429004a07ae0033065b0058035500b5050401d3
01fe00fc05da008b0418005205da008b0418005205c600be06a2008a05c6
003104ff00af0462007304ff00af0462007304680060023100a704680060
03b700a704680060032900a7066000810430008906600081043000890663
00a1043500790507008903d800800507008903d80080058c009703e5002e
057000e503c5009a057000e5051d00c905e500e4042900af05e500e40429
00af058c003a044e006f058c003a044e006f04ee0106066300a1051b00a3
044300660435008903ef00ac0435007803c500d104ec00870504ff870399
007d0437014c0983006809030066043e00c104f800e8017100e802a600e8
069000fe03e900790473028705da008b0418005204d20097041c008604d2
0097041c008604ff00af0462007304ff00af0462007304ff00af04620073
05700042043fffe805700042043fffe805700042043fffe806250092049f
009906250092049f0099045f0066023e0019045f0066023e0082045f0066
023e0059045f0066023e000805520073033aff5804e300d40452009d0452
009d046800600231004006600081043000890660008104300089066300a1
04350079066300a1043500790507008903d8002f058c009703e5002e0570
00e503c500c905e500e4042900af05e500e4042900af05e500e4042900af
05e500e4042900af08510168057900d2051500f9042a0097031b01ec031b
0214031b02130411005905da008b0418005208b2003a0663005104350033
01fe00fc08510168057900d208510168057900d208510168057900d20515
00f9042a009704e20055065900c004650068053500ff053500ff053500ff
053500ff0473014d05da008b065000bd07dd00bd060d00c50703011e06cd
010707c20047023e006505da008b050b00c604ff00af058c003a06250092
045f006604e300d405840004071000750660008105c30058066300a10744
00c0042a006805fa0084057000e5051500f905ca0045056400e1045f0066
051500f90443006603ef00ac043000890429007804b1001203e40097041c
00800430008904e20084023e00d70452008e03e4003903e400d3041c0080
043500790435ffe7041c007f0429007804b9fff704af008d06150088023e
005f0429007804350079042900780615008804ff00af06cd00f504ee0106
04d20097058c0097045f0066045f0066055200730800001d07d1003306c6
00fe051100a70515007d05d6007b05da008b04d60099050b00c604ee0106
0625002204ff00af06e0002504cf004e05fb008a05fb008a051100a705e9
00210710007506250092066300a1074400c0042a006804d20097057000e5
0515007d051b00a305ca00450630007b04f000dc0740006107a800610614
00fe089a009904d60099053c006e090b005605070021041800520435007a
0408008803c300aa04befff8046200730576005d0384006e051800780518
007803f0008d052d002305e00023047a004c04bb0074052d00710447003d
041c008603c500ce042a0097067b007f04b9004904f30080044500c3062d
00720658007204f800a00653007c03ef007c041b00700738004b040b0028
04620073047b007a03c300aa041b007103e5002e023e00c1023e0077033a
ff58071e002b06310060049f007e03f0008d042a009704f3008d04ee0106
03c300aa071000990942008105e0016d0524019305240181052401ad0524
019b04e50065074b006a023e00d70950002905abffe905ab027e05ab027e
05abffe905ab027e05abffe904000025058c009703e5002e057000e503c5
009a023e00c104f8006d041b00770448009d043100cd05390018043f007d
05d7003b041700400517006c0517006c044e008205060012060200590539
0079056d009104d9009403bc007d041b007604a000c50452007704b80087
04ec003405420066043100c60629005406810054052b00c505e7007d041b
007d0473005607ae004d04460014043f007d059300c4043100cd041b0077
04b6008003b6004a03b6004a0485006806cd001506a40052058300d3044e
00820452007704f60064043100cd04f8006d0448009d041b007604e900a2
043f007d0421008504a000540539007903b6004a04850068042700ab03be
005806020059056a0069056d009103bc007d05f6006c0446006804b60080
04a000c5050200ca046d01270712012804ec0034045200ee04b6003104f8
006d043f007d0539007903b6004a056d0091045200ee0687003604f8006d
0448009d043100cd04f80058043f007d04b6003105390079056d009103b6
004a042700ab046d003506020059056a00690477006f056d009104d90094
03bc007d04f8007d04a000c5045200ee04b8008704ec003404c100cb0687
003603b6004a045200ee04f8006d04f8006d04f8006d04f8006d04f8006d
04f8006d075c0045041b0076043f007d043f007d043f007d043f007d03b6
004a03b6004a03b6004a03b6004a04e90018056a0069056d0091056d0091
056d0091056d0091056d0091056d002d050200ca050200ca050200ca0502
00ca045200ee03bc0079045200ee04f8006d04f8006d04f8006d041b0076
041b0076041b0076041b007604e900a204e90018043f007d043f007d043f
007d043f007d043f007d04a0005404a0005404a0005404a0005405390079
0539006c03b6004a03b6004a03b6004a03b6004a03b6004a0735004e0485
0068042700ab03be005803be005803be005803be005803beffd3056a0069
056a0069056a0069056a006b056d0091056d0091056d0091082900a60446
0068044600680446006804b6008004b6008004b6008004b6008004a000c5
04a000c504a000d3050200ca050200ca050200ca050200ca050200ca0502
00ca07120128045200ee04b6003104b6003104b600310687003604f8006d
075c0045056d002d071201280712012807120128045200ee04b6008004a0
00c505d90044050aff2a04d3002705c7fe220500fe6904dbff0505710042
06250075045eff280552001b04e300b203d3ff6c0710006f0660fea30662
fedc042bfe55070200b80506ff06058b00100571ff8505e5fe710533ff0b
0852ff1d05cb00450514ff6d058b004705d9004405d9004405d9004405d9
004405d9004405d9004408b2fe0b04d200970500fe690500fe690500fe69
0500fe69045eff28045eff28045eff28045eff2805c7fe220660fea30662
fedc0662fedc0662fedc0662fedc0662fedc0662fedc05e5fe7105e5fe71
05e5fe7105e5fe710514ff6d042b00680514ff6d05d9004405d9004405d9
008b04d3002704d3002704d3002704d3002705c7fe2205c7fe220500fe69
0500fe690500fe690500fe690500fe690571004205710042057100420571
00420625007506250075045eff28045eff28045eff28045f0066045eff28
090200660552001b04e300b203d3ff6c046800600468ff6c0468ff6c0468
ffdc0660fea30660fea30660fea3066000810662fedc0662fedc0662fedc
098dfefb0506ff060506ff060506ff06058b0010058b0010058c0097058b
00100571ff850571ff850571ff8505e5fe7105e5fe7105e5fe7105e5fe71
05e5fe7105e5fe710852ff1d0514ff6d058b0047058b0047058b004705d9
004405c900c5072f00c505e700c506aa00c506a400c50773fff905d90044
050aff2a04ee0106065b00580500fe69058b0047062500750662fedc045e
ff2804e300b205d900250710006f0660fea305c300580662fedc074400c0
042bfe5505fa00840571ff850514ff6d051b00a305cb0045056400e107ae
0033045eff280514ff6d0500fe6906cd00f504ee010604d30097058b0010
045eff28045eff280552001b0800001d07d1003306c600fe051100a70515
007d05d6007b05d9004404d60099050aff2a04ee0106062500220500fe69
06e0002504cf004e05fb008a05fb008a051000a705e900210710006f0625
00750662fedc074400c0042bfe5504d300270571ff8505140068051b00a3
05cb00450630007b04f000dc0740006107a80061061400fe089a009904d6
0099053c006e090b00560507002107ae003305d9004408b2003a0662fedc
0852ff1d0852ff1d0852ff1d0514ff6d058c00970571ff8504e10088039a
00a604e100b304e1006c04e1003a04e1005e04e100cd04e100df04e100a1
04e1009504e1008804e100c604e100b304e1006c04e1003a04e1005e04e1
00cd04e100df04e100a104e1009504e2008404e200de04e200b404e200a4
04e2007a04e2009b04e200cd04e2011604e200a204e200cc035c010a035c
00e2035c0101035c0114035c0166035c00f3035c0130035c007e035c00a0
035c007b035c007c035c0041035c0075035c0082035c00cb035c0069035c
00a607ae008807ae00880687006a043fffe81087010c0f7301761168003e
0c4a00c70e5200c211db014716f601301162004a117900540da2007f1206
0028121900e9113700ea163d014216ba009a0fb20082115c014d04d700b5
0368007105ae0087057f008e052d00ae04ae010b04ae00c704c500e404cf
00ec04190064041900640419006404190064041900640419006404190064
07270064041900640419006404190064043f0031043f0031043f0031043f
0031043f00310264004902a6ff58045200a4044c007b0350008f03e5fffc
057900d3042bff0c044e0064066600a40546ff6f03acff71053fff640800
00170625001b06df004e05e9003d0423008503e50081043300740577000c
042900af042900af050c0029044c00890666008504ba0035061f0089067d
008903e50081071f0029042900b20625001b06df004e05e9003d06cd000e
08000017000000000000003a0000003a0000003a0000003a0000003a0000
003a0000003a0000003a0000003a0000003a0000003a0000003a0000003a
0000003a0000003a0000003a0000003a0000003a0000003a0000003a0000
003a0000003a0000003a0000003a0000003a0000003a0000003a0000003a
0000003a0000003a0000003a0000003a0000003a0000003a0000003a0000
003a0000003a0000003a0000003a0000003a0000003a0000003a0000003a
0000003a0000003a0000003a0000003a0000003a0000003a0000003a0000
003a0000003a0000003a0000003a0000003a0000003a0000003a0000003a
0000003a0000003a0000003a0000003a0000003a0000003a0000003a0000
003a0000003a0000003a0000003a0000003a0000003a0000003a0000003a
0000003a0000003a0000003a0000003a0000003a0000003a0000003a0000
003a000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea000000ea000000ea000000ea000000ea
000000ea000000ea000000ea000000ea000000ea000000ea000000ea0000
00ea000000ea000000ea000000ea00010000046e0240000e007600050002
0010002f005a000000c50153000300010000000c00960001000000000000
0032000000010000000000030019003200010000000000040019004b0001
000000000006001900640001000000000007003e007d0003000104090000
006400bb00030001040900010024011f0003000104090002000e01430003
000104090003003201510003000104090004003201830003000104090006
003201b50003000104090007006601e7a92032303131204d6963726f736f
667420436f72706f726174696f6e2e20416c6c2052696768747320526573
65727665642e504e4a504a432b436f6d696353616e734d532d4974616c69
63504e4a504a432b436f6d696353616e734d532d4974616c6963504e4a50
4a432b436f6d696353616e734d532d4974616c6963436f6d69632053616e
7320697320612074726164656d61726b206f6620746865204d6963726f73
6f66742067726f7570206f6620636f6d70616e6965732e00a90020003200
30003100310020004d006900630072006f0073006f006600740020004300
6f00720070006f0072006100740069006f006e002e00200041006c006c00
200052006900670068007400730020005200650073006500720076006500
64002e0050004e004a0050004a0043002b0043006f006d00690063005300
61006e0073004d00530052006500670075006c006100720050004e004a00
50004a0043002b0043006f006d0069006300530061006e0073004d005300
2d004900740061006c006900630050004e004a0050004a0043002b004300
6f006d0069006300530061006e0073004d0053002d004900740061006c00
6900630050004e004a0050004a0043002b0043006f006d00690063005300
61006e0073004d0053002d004900740061006c006900630043006f006d00
690063002000530061006e00730020006900730020006100200074007200
6100640065006d00610072006b0020006f00660020004d00690063007200
6f0073006f0066007400200043006f00720070006f007200610074006900
6f006e002e0040711059205930590321332055a020014f20012020011f33
1e551f1e014c16341f570149554a334955563355551916341f0733065506
03321f1312191f05010355041903551b034b035b038b039b03bb03cb03db
0308273326551c331b551633155511010f5510330f550133005580160105
01b80190b154532b2b4bb807ff524bb009505bb00188b02553b00188b040
515ab00688b000555a5b58b101018e59858d8d00421d4bb0325358b0601d
594bb0645358b0401d594bb0805358b0101db1160042592b2b2b2b2b2b73
2b2b2b2b2b2b2b2b2b2b732b7373732b7318000000>
[235 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> MBAAAA+ComicSansMS-Italic AddT42Char 
1 58 81 <00010089ffb804300444002e001f40112c10000221160c166a1601591601
160210003f335d5d3f3f12393f3130013633321114070706151406232237
373612373635342322000706070607070606232235373637363737363633
320701dbcab3d80b210e3748580606022c0e0a3a84feee1e060815040a05
412f540f0639380e0905422f5c0c034edffef34156c04c8bcf6b5fdb5801
11303e2c6dfea688191d45427e363e4ea461e2e89554303d8100>MBAAAA+ComicSansMS-Italic AddT42Char 
1 0 0 <0002007f00000481066600030007000cb304000701002f332f3231303301
2101252113217f01020300fefefd930200dcfe000666f99a7f056600>MBAAAA+ComicSansMS-Italic AddT42Char 
MBAAAA+ComicSansMS-Italic /CharStrings get begin
/space 3 def
/n 81 def
end
MBAAAA+ComicSansMS-Italic /Encoding get
dup 32 /space put
dup 110 /n put
pop
end
%ADOEndSubsetFont
/OQATOE+ComicSansMS-Italic /MBAAAA+ComicSansMS-Italic findfont ct_VMDictPut
/OQATOE+ComicSansMS-Italic*1 
[32{/.notdef}rp /space 77{/.notdef}rp /n 145{/.notdef}rp]
OQATOE+ComicSansMS-Italic nf
OQATOE+ComicSansMS-Italic*1 [0 -24 -24 0 0 0 ]msf
245.546 463.29 mo
(n )
[-12.5303 0 ]ysh
%ADOBeginSubsetFont: HBAAAA+ComicSansMS AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OQATOC+ComicSansMS gcheck setglobal} if

1 0 3 <> OQATOC+ComicSansMS AddT42Char 
1 1940 72 <00020057ffd2043b0415001f002700d040ad460844124125611261257410
7011761e7023a410a011a019a023b011c411d41110470a46104723442455
08561057235524641063240a0800150a250a27102a1e2724361035246505
65230a2623110e0419203808191438000806000b191101201245235a0a7a
118a11a604a623071123381f042f043f04031f044f047f04af04cf04ff04
06042638291cb01cc01cd01c041c600c01100c300c700c8f0c8f2905260c
360c020c30297029c029035d2f5d5d717dc45d18fdd45d71fdc55d71003f
3f10fdc410ed1117395d5d5d313005222726351037363332171615140706
070516163332373636333216151407060322060725363726025ee28c997e
89e5a669817132a2fe8238a76f455d7644272337b399ac7aa2280133b54d
562e717de10104b0c038458f6452244cb553541a216b35236f5044038fbd
be9258415000>OQATOC+ComicSansMS AddT42Char 
1 2276 75 <00010091ffc204360642003c008540640c0d023212322232323246305232
7f0f8f0f9f0f0a0f0b0013130b3830062400110f2d380f1c014f1c5f1c62
0d7f1c8f1c9f1caf1cbf1cdf1cef1c0a1c02383a09389f34af34cf34df34
0434103e303e403e503e603e703e803e903ea03ec03ed03e0b3e105dd65d
ed7dd418fdd45d71fdc57dc418003f3fed2f107dc41810c45d3130052227
262726353436353423220706071007062322263534373637371336353426
353436333217161514070617173636333217161f0216171615140603d047
16171312055e7f643359201c3b293e090803030307133a2a520e10070601
0152bb69a63e2c0608140e14043c3e4c5297915d1a6a1abc733ba6fe8346
3e38280e1e19799402df7c2b335b312a3758614e69726d6e586e6d6c4cb4
bfd07559110c2937>OQATOC+ComicSansMS AddT42Char 
1 2584 76 <000200b3fffb01bf05da000b0023005540360638001e121e062025302550
25c0250480259025a0250309380318151b18380f211f252f253f257f2504
1f0cbf0c02500c7f0c020c2510d65d715d7dc4c418fd7dc4c418107dd418
ed5d71003f2f10d6ed313001222635343633321615140603141615140623
2226353426353412353436333216151402014a304646303045450307362c
2b370714372b2b371404f24430304444303044fcd43cef3c2c38382c3cef
3c5e01195e2d38382d5efee7>OQATOC+ComicSansMS AddT42Char 
1 2776 78 <000100a3ffd704340644003400d64089230523304c07ca2d04032f01ca02
c52b020a000f0c02ef00ef0cff00ff0c044b28bf00bf0cce00cf0cdf00df
0c072f2d2d0707232d26871700004130022f055717010141302f2d262307
0507021a0c020a23211d302f2d26050206208f369f36af36bf36cf36df36
063629292c403201320e1138222021173814381d220709384f0e010e2b35
544c182b4e10f44d5dfdd4d4d4ededd4c410ed10dd5d4e456544e65d1217
39111239003f4dd4cd1117394e2b2b870e7d10c45d5d71015d71b002b002
435158b55523015a0501005d5d593130005d052227262727060706151406
232235341235341235342635343633321615141615030617363737363332
161514070607131615140603cc371e3469b13a7a0b372b65170909372b2b
370a070502887edc2126273f1d7bb4da993f293a658af12e539b932d3888
53014b53980187962d7a2d2d38382d2e7d2efebeaeae687ce3223e292221
90a5fed7d13f283a>OQATOC+ComicSansMS AddT42Char 
1 3144 80 <00010079ff8405e80456004c00da40a9253f2544353f35444f0d46445644
691d6f22664476440b300d3041491d591d04100d1041200d204104093844
1d383f152b0b000b4d35063f0644061b380d18380d001101101150116011
9011a011c011d011e0110811460238004a01904aa04ab04ac04ad04ae04a
f04a074a06380f460100461f4640465f469f46af46bf46cf46df46ef460a
46223c382238003010302030303070300530004e204e304e404e604e704e
b04ef04e085d2f5deded10d45d71ed7dd45d7118ed7d1018dc5d717dc418
ed10fd003f3f3f10e4f47dc41810ed10ed5d5d5d31300522272627032627
262322070607061713161514062322263534023534270607070607140615
141615140623221134363534263534333216151406151736363332173636
3332171617161316060581520e1212220a1822282565601e01061e13372b
2b37311e464876102316133d297116136627410a0234ca479d3b379862a7
3d0c1d1c2c033c53576ec8013645425a3f3a235e5efef59e672c39392c79
01d9796a3b20488418273cea381e6c18293801013cee3c35d436e3442813
5015696bad9c4949b424f5acfe6f2838>OQATOC+ComicSansMS AddT42Char 
1 3580 81 <0001007cffb903ee04440037006640460d0c022e122e222e322e9d0c065f
0e6f0e7f0e8f0eaf0ebf0e06102a2f0e3f0e4f0e5f0e602a8f0e07000b18
0b380a382a272c0612382a381e9f21012102053835003001303910d65d7d
d418fd7dd418d45d7dd418eded003fc4c4ed10e4e45d5d5d313005222727
263534363534232207060706070615141615140623222635342635341235
34263534363332171736333217161715071412151406038a560b1c0e0750
70665c340207060c372b2c360d1d07392a5c0903a8b1a03f2b04012b3947
5edb75661c861cd88579b9273b322f1e781e2d38382d1e781e67016d6720
7e202b378275e08d5eb8655d53fef9522c37>OQATOC+ComicSansMS AddT42Char 
1 3838 85 <0001008bffbd0396041e001e005c4038181607021a16060e0b1f14100704
382029292c101d201d301d401d601d051d10180b0c84111f102f103f104f
105f106f1006102b1f563b182b4e10f45d3c4dfdd4c410dd5d4e456544e6
4dfdc610c40010e63fd4cdcd113931300106232235342727060706071314
23223511343635343332173633321615140395075d5603039e5f593b0263
5805586201c0ea515002e37d6313335413464183fddc656502be21842165
a6b97a7b3400>OQATOC+ComicSansMS AddT42Char 
1 4024 86 <00010029ffc403900476003900c040942f286b24023a063b284d0649124b
284a2c640c6a256b266c28780c7325832593250e1b101b282f002b062b2c
30195f006f00701996040a08251f04380f001f007f00bf00040030315031
023106201940198019901904191f38120b3a250e360e592a6a2a86169516
06062c082f0423380e3408382a34403760378037033716602a01002a102a
202a302a702aff2a062a3a703b015d10d45d717dc418dd5dd410ed10d4fd
c4391239395d0010f4fdc45d3f71cd5dfd1139395d5d3130005d01222726
270607060716171617161514070623222726353436333217161716333237
363534272726272635343736243736333216151416151406032e37160f0b
4b9ca1011e1de670a38d75b383779a3f281f311854432e54405dbe688538
51c53c01083929302b3719370302251a521333405e0b05294869c7a35344
2c3864283c30170f0c141d3f8830171d273871d1591b4b1a12382d1d701d
2d38>OQATOC+ComicSansMS AddT42Char 
1 4386 87 <00010041ffc0038a0575002d00764058251138053819060f1f011f0a0b2e
8f15802b9f15902b0430153f2b40154f2b50155f2b60156f2b7f15702b0a
2b9d05159d2538191107381005380011101120117011b0110511f02f0110
2f202f402f702fa02fb02fe02f075d5d2f5ded7dd418ed10c4ede410e45d
5d0010f42f5d3fededc43130012226232207131717162322263534363503
262726353436331734263534363332171615070736333217161514060328
1539151771130101046d283b0614499559362ad2093a2a5a0f0302017c12
68203d370354040ffdb12c33db34272698260248030e0c572c3a1133ab26
2a379325343a3e100a144a2c3900>OQATOC+ComicSansMS AddT42Char 
1 4640 88 <0001006dffb003cf042a002e0050402d0b0f1b0f2b0f3b0f0423380d090b
0d0b2f2b0617061a201d3811159f13011329252e0625383f000100000100
3010d65d71ed7dc4c410c418d45d7dc4c418fd7dc4c418003f3f10e4e410
ed5d31300114121514161514062322270623222726270235343736333216
15140615141617161633323727273437363332160703bb02073a2a4d157d
a383565f12271e0e512b3a1d161621401f86950102130b562b3a02024848
fee048165a162b375f413a407b0109cf89af57372b2eca35a7ee4812132b
cbc2d89f5c382a00>OQATOC+ComicSansMS AddT42Char 
OQATOC+ComicSansMS /CharStrings get begin
/space 3 def
/e 72 def
/h 75 def
/i 76 def
/k 78 def
/m 80 def
/n 81 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
end
OQATOC+ComicSansMS /Encoding get
dup 32 /space put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OQATOC+ComicSansMS*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A /B 
/C 12{/.notdef}rp /P 4{/.notdef}rp /U 15{/.notdef}rp /e 2{/.notdef}rp 
/h /i /.notdef /k /.notdef /m /n 3{/.notdef}rp 
/r /s /t /u 138{/.notdef}rp]
OQATOC+ComicSansMS nf
OQATOC+ComicSansMS*1 [0 -24 -24 0 0 0 ]msf
245.546 443.55 mo
(users )
[-12.4849 -11.6928 -13.1569 -11.5247 -11.6928 0 ]ysh
274.346 463.29 mo
(in think time)
[-6.71997 -12.5519 -7.26471 -11.3038 -13.8721 -6.71997 -12.5519 -12.9598 -7.26471 -11.3038 -6.71997 -18.6478 
0 ]ysh
124.466 391.35 mo
23.486 391.35 li
23.486 392.31 li
124.466 392.31 li
cp
123.446 394.83 mo
129.446 391.83 li
123.446 388.83 li
.75021 .679683 .670222 .90164 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/OQATOE+ComicSansMS-Italic*1 uf
/OQATOE+ComicSansMS-Italic uf
/MBAAAA+ComicSansMS-Italic uf
/OQATOD+TimesNewRomanPS-BoldMT-Identity-H uf
/OQATOD+TimesNewRomanPS-BoldMT /CIDFont ur
/OQATOC+ComicSansMS*1 uf
/OQATOC+ComicSansMS uf
/HBAAAA+ComicSansMS uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
