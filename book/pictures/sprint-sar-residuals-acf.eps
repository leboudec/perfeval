%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Acrobat Distiller, Job 7)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030322223242)
%%For: (leboudec)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 425 595 842
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments

0 425 moveto
595 425 lineto
595 842 lineto
0 842 lineto
closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: l2check
%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show
72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 4.0 3
%%Copyright: Copyright 1998-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat/csfamily 
/? /! /| /: /+ /GetGlyphDirectory
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/OP here { /_OP? xdd } if
/op here { /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/OPM here { /_opmode xdd } if
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
%%EndResource
%%BeginResource: procset pdflev2
%%Version: 4.0 5
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 2
%%Title: PDF operators, with code specific for Level 2
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/initialize {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
false setoverprint
<</MaxFormItem 0>> setuserparams
} bd
/terminate { } bd
/m/moveto ld
/l/lineto ld
/c/curveto ld
/setSA/setstrokeadjust ld
/defineRes/defineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/_sfcs {_fcs setcolorspace} bind dd
/_sscs {_scs setcolorspace} bind dd
/_sfc
{
_fc aload pop
_fp null eq
{ setcolor }
{ _fp setpattern }
ifelse
} bind dd
/_ssc
{
_sc aload pop
_sp null eq { setcolor} { _sp setpattern } ifelse
} bind dd
/scn {
dup type /dicttype eq
{ dup /_fp xdd
/PaintType get 1 eq
{ /_fc _fillColors 0 get dd ilp }
{ /_fc _fillColors
_fcs 1 get
GetComps get dd
sc
}
ifelse
}
{ sc }
ifelse
} bd
/SCN {
dup type /dicttype eq
{ dup /_sp xdd
/PaintType get 1 eq
{ /_sc _strokeColors 0 get dd ilp }
{ /_sc _strokeColors _scs 1 get GetComps get dd
SC
}
ifelse
}
{ SC }
ifelse
} bd
/gs
{
begin
/SA here { setstrokeadjust } if
/BG here { setblackgeneration } if
/UCR here { setundercolorremoval } if
/FL here { i } if
/RI here { ri } if
/TR here
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} if
/sethalftonephase isdefined? { /HTP here { sethalftonephase } if } if
/HT here { sethalftone } if
currentdict gsDI
end
} bd
/sfc {
_op? setoverprint
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_OP? setoverprint
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {
{ { sfc rectfill }
{gsave sfc rectfill grestore clip newpath icl ilp}
{gsave sfc rectfill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/knownColorants? {
pop false
} bd
/makePat {
gsave
dup /Matrix get concat
matrix makepattern
grestore
/MadePattern defineRes pop
} bd
%%EndResource
%%BeginResource: procset spots
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Predefined (named) spot functions for PDF
21 dict dup begin
/CosineDot
{ 180 mul cos exch 180 mul cos add 2 div } bd
/Cross
{ abs exch abs 2 copy gt { exch } if pop neg } bd
/Diamond
{ abs exch abs 2 copy add .75 le
{ dup mul exch dup mul add 1 exch sub }
{ 2 copy add 1.23 le
{ .85 mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse }
ifelse } bd
/Double
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add } bd
/DoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add } bd
/Ellipse
{ abs exch abs 2 copy 3 mul exch 4 mul add 3 sub dup 0 lt
{ pop dup mul exch .75 div dup mul add 4 div
1 exch sub }
{ dup 1 gt
{pop 1 exch sub dup mul exch 1 exch sub
.75 div dup mul add 4 div 1 sub }
{ .5 exch sub exch pop exch pop }
ifelse }
ifelse } bd
/EllipseA
{ dup mul .9 mul exch dup mul add 1 exch sub } bd
/EllipseB
{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub } bd
/EllipseC
{ dup mul exch dup mul .9 mul add 1 exch sub } bd
/InvertedDouble
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedDoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedEllipseA
{ dup mul .9 mul exch dup mul add 1 sub } bd
/InvertedEllipseC
{ dup mul exch dup mul .9 mul add 1 sub } bd
/InvertedSimpleDot
{ dup mul exch dup mul add 1 sub } bd
/Line
{ exch pop abs neg } bd
/LineX
{ pop } bd
/LineY
{ exch pop } bd
/Rhomboid
{ abs exch abs 0.9 mul add 2 div } bd
/Round
{ abs exch abs 2 copy add 1 le
{ dup mul exch dup mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse } bd
/SimpleDot
{ dup mul exch dup mul add 1 exch sub } bd
/Square
{ abs exch abs 2 copy lt { exch } if pop neg } bd
end
{ /Function defineRes pop } forall
%%EndResource
%%BeginResource: procset pdftext
%%Version: 4.0 2
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
dup {currentfont /Encoding get dup length 33 ge 
{32 get /space eq and}{pop}ifelse
}if
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
_intT
{currentpoint iTm moveto}
if
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%BeginResource: font GLGOMG+Arial
11 dict begin
/FontName /GLGOMG+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/lenIV -1 def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 256 dict dup begin
/.notdef 4 RD 
8b8b0d0e ND 
/.notdef 40 RD 
f711f9820df88816f90507fc8806fd0507f8880609fc78f8f515f86806fc
e507fc6806f8e507090e ND 
/space 5 RD 
8bf7aa0d0e ND 
/hyphen 21 RD 
abf7e10df7a3f76b15e307fba4063307f7a406090e ND 
/period 16 RD 
e6f7aa0def16ef0727062707ef06090e ND 
/zero 163 RD 
b5f8c00dd2c915b25ac172d08b08bf8bb699ada708afa7a4b39cbf089dbe
93cf8bdf088bd286c380b50880b67cae78a8087aa872a16e9a086e9c6992
658b08578b607d696f08687072637a5708785783478b36088bfb1aa32aba
4f088b0609cbf8a915a3adab9cb38b08b68bac78a66408a864983d8bfb0a
088bfb0a7d3d7064086f656977638b08638b699e70b2086eb27ed98bf70a
088bf70a9adca9b7088a07090e ND 
/one 52 RD 
f701f8c00df79bf9631552067c6c716b666a08666b606f5a74083607a694
aa9bad9f08af9fa6a0a09f08fcc407e306f96207090e ND 
/two 148 RD 
a8f8c00df70edf15959b979b9a9b089b9aaca9c0b708cbc2b8b4a6aa08a6
a99fa897a70895a892a78ba8088bc177bb63b10863b3559d468b08468b55
7963680862687458854808e582058bb698afa5a408a4a4ad98b68b08b38b
ac7fa47308a373986e8b68088b6a7d686f6608706456593e4b0859636567
706c08706a786c7f6b08827888778c7608f86e06df07fbf48a05090e ND 
/three 207 RD 
b5f8c00dd2b715b566bf78ca8b08d08bc5a1b9b708b8b5a2c18bca088bb8
7fb274aa0873aa6a9f619508ac99a39f9ca4089ca793a68baa088baa82aa
7aa80879a972a16a9c086b9c6793648b08518b5c7b656b086569725e8050
08e57b0590b69baca2a108a0a0a996ad8b08ad8ba880a176089f7797708b
6b088b617c6e6d78086d766982658b08898b868b858c08803e05a5929f8e
9c8b08b38bad7ea57108a670986a8b63088b607d686f6e086e6e687d618b
08688b6d9673a10874a17aaf81bd08317f05934fa25ab46608090e ND 
/four 55 RD 
98f8c00df82216f73f07ec06dc072a06f864074306fbdbfc64053a07f7cb
06fb3f07e30609fbcdf79015f775f7d605fbd607fb7506090e ND 
/five 136 RD 
b5f8c00dd1b615b566c079cc8b08da8bcaa8b9c508b0ba9ec38bcc088bcf
76c360b60860b657a14d8b085a8b5f7c606d08b1f75505f7b106df07fbf7
0646fc0405de7f0598a09d9ca29808a097a592a88b08b98bb07da76e08a5
6d9a648b59088b567c616e6b086f6b677b608b08678b6d9672a20873a17b
ad84b8082f8405914fa35bb36608090e ND 
/six 211 RD 
b1f8c00df820f9341567aa5d9b538b083e8b4f705e5408594c71268bfb1e
088bfb0fa232b95508ba55c670d48b08b78bb195ada008ad9fa6a99eb208
9eb195b58bb8088bcf76c362b60862b759a0508b086a8b6b836c7b086c7d
7173766b088cd093c39bb2089bb2a1a8a79f089f9ca492a78b08b08ba77e
a372089b7c9672936808e0920586c374b767aa0809fb91fbdc15a6a8ad99
b38b08b38bad7da56f08a56d98658b59088b587e62706d08716d6b7c668b
08708b7492749a0872997aa07ea7087fa784a88ba9088bb999b0a7a80809
0e ND 
/eight 252 RD 
b4f8c00daef7d815746c7f648b5c088b4da157b66108b661c476d28b08d1
8bc4a0b6b508b7b4a0bf8bc8088bb780b174ab0874ab6aa25f9908ae99a5
9e9ca4089ea293a98bac088bbf78b765af0865b0599d4d8b084b8b5a7966
68086667785f8b57088b69946d9d72089b73a778b07e085e7e6a76736c08
09f709f7b715a1a0a796ad8b08ab8ba780a17508a37595708b6b088b6b80
7176760875766f80698b08698b6e9675a108769f80a78bad088baa96a4a1
a1080975fbc615a6a6ad99b58b08b68bae7da76f08a77099688b61088b60
7d697070087071687d618b08718b71917398087498799d7fa20880a485a3
8ba4088bb398aea6a608090e ND 
/colon 30 RD 
e5f7aa0deff83715ef0727062707ef0609fc3704ef0727062707ef06090e
 ND 
/A 67 RD 
8af92f0def16d8f76d05f7c206ddfb6d05f70106fbb9f960052406fba7fd
6005f00609f74cf88c159bb898b995ba0897649c59a14f08d6fb5a05fb88
06daf76505090e ND 
/C 157 RD 
bdf9660df863f70715666c5e7c568b08608b629666a10866a36fac79b808
7ab982c08bc8088bba92b99ab7089bb8a5aeb0a508aea6ba98c28b08bb8b
b37fab7308a874a4659c5708e8a10578cc69bf5aaf085ab04f9d438b084d
8b517d566e08576e62616f54086e527d4b8b40088b47984ba44f08a451b0
5dbb6c08bb6aca7cd88b08d58bca9fbfb408beb4afc69fd9082ca3057e4f
725e676c08090e ND 
/F 35 RD 
ddf8f70dea16f7d907f7e406df07fbe406f77307f81806df07fc7706fd60
07ea06090e ND 
/R 160 RD 
daf9660dea16f7d207f70206a38b9d8a96890898879a859982089a819a7b
9d74089e76a169a76008e9fb2905f70b06fb10f7570572b171ab6fa4087f
977797729708d194bda1acae08abaf9cb58bbe088bb281af77ac0878ab70
a26a980869975b924b8b08fbd106fd6007ea0609f91104f77606c08bb180
a37508a676966f8b69088b7385767e77087e78787c73820874836986608b
08fb61068cf78105090e ND 
/S 246 RD 
b8f92f0db3f015a466ad6fb77808b777c182cc8b08bd8bb994b49e08b59e
aaa5a1ad089fac97af8bb1088bb181ad77a80878a96ca3619e086f99569a
3e9c083d9c5c9c799c08789c82a08ba5088ba898a5a5a008a69fb496c48b
08c38bb47fa77408a8759b69905e08e6920589b37fb275ac0877ac6ba462
9c08639d5c93568b085b8b5f83647b08637a6d74776c087669816a8b6708
8b6b936d9c70089c71a475ad7908a67cb97dcd7b08cc7bb6809e8408a97d
a17e987a08977b92778b75088b7584777e78087d77777d6f80086f816b85
678b08638b66926a99086c9a729d7ca2087ba382a887af083083058e5b97
60a46508090e ND 
/a 258 RD 
aff8c00df81616e706809f84a087a10888a089bf8bdc08f709078bb28aa6
889a0885a3829f7e9b087e9b76986f9508719666905f8b085e8b6485697f
08687e717a7974087a757d6d836608e37f0592b09ba59f9a089e98aa93b4
8b08b98bac81a277089a7d94728b67088b888b848b7f08687d5782448308
698670877a860874867681787e08787e7c7a7f7608807785738b72088b60
9a67aa6f08aa71b77cc48b08ad8bac91a99608a997ab9eaca7088c729275
9478088a8c050973f778158b64866e8277087d727876717c08717e6d8369
8b08688b7193799b087b99819f8ba2088b9b8f98939708949a96939a9108
9a92a590af9008cb96bb95ab98086b07090e ND 
/b 138 RD 
ccf8c00dddcc15ae58bb72c88b08c88bc0a3b7bb08b7bda1cf8be4088baf
86af81ac087fab7da779a20879a4739c6f98086e976d926b8b08528b5b74
665d08f794073306fd6007dd06cb0709b4f7eb15a7acac9cb18b08b28bab
7ba66b08a56a99598b47088b4b7d586f6a086f6a6a7a658b085b8b66a26f
b8087ba682b88bc9088bcb99bba7ac08090e ND 
/d 146 RD 
adf8c00df85516f960073306fb96077ca1779c739808729970916c8b085e
8b65806975086973716b7a61087962835c8b57088b56955c9e62089d63a6
6bae7408ae74b180b48b08cb8bbba5acbe084907dd0609fbd5f82d15a6ab
ac9bb28b08b28bad7aa66a08a86b98578b44088b4a7e5c706c086f6a6b7c
658b08648b6a9b6fac086fac7dbc8bcd088bd198bca5ab08090e ND 
/e 144 RD 
b0f8c00df7dde215747a70836b8b085f89679b6ea9086faa7bb688c408f8
15068c958b938b90088be175cd5fba0860bb52a2468b08438b51735e5b08
5f5b74488b34088b35a14bb75c08b85cc774d78b08c68bbd9ab2a808b1a8
a6b499c0083097057e667970747a0809fb50f7de15a6a6ad99b38b08b88b
af7aa769089d76966a8f5f08fbb5068eb89aafa7a608090e ND 
/i 32 RD 
cdf7720de3f8fc15ef0733062707e30609fcfc04f89b073306fc9b07e306
090e ND 
/l 18 RD 
cbf7720de316f960073306fd6007e306090e ND 
/q 141 RD 
aef8c00df855fb5b15f962073c06450766c159a64b8b08618b6680697608
6876716c7962087960825d8b57088b36a147b75a08b95bbf72c88b08a78b
a591a49808a3989e9b999e08fb9307e30609fbd3f8f715a5acab9bb18b08
b38bac7aa86808a6689a578b46088b4b7d5b706b08716a6a7c668b08638b
6a9c6fac086fac7dbd8bce088bd098bda6ab08090e ND 
/r 72 RD 
ccf7e10de316f7a3078bb090ad95aa0891a1969a9a97089b969c919e8b08
a08ba185a07f08aadc056c9e6d946d8b08778b78857a7f087a8078727766
08db073c06fc9b07e306090e ND 
/s 232 RD 
aaf8880dcfaa15ae6fbe7dce8b08b58baf92ab9908ac9aa39f9ca5089da3
93a78ba8088baa84a37d9f087da1789a7296087293609a4d9c0860967193
828e087c917f93849408859587958b96088b9d949a9c98089c9aa891b38b
08ad8ba5839e7c089e7c96768f7008e1970585ad81a67c9f087e9e749b6c
97086c976891628b086f8b7288738408758378837d8108797e7d7b807708
807786768b74088b71917498760898779e7aa47f08a480b87dcb7b08ba7d
a9829783089e80937b8b77088b768177777b08797a6c83638b08628b6c94
759e08749d7ea686ae08347d059554a262ae6f08090e ND 
/u 106 RD 
cbf8c00df83816f89b073306fba9078b5e866a81740883727a79747e0873
7e7384718b08708b75927998087a987f9d85a208889b89aa8bb908f7b307
3306fbd5078b658d708f7a088f719575987908977b9f7ca57f08a67ea786
aa8b08d08bc2a8b3c6083e07da06090e ND 
/v 49 RD 
98f8880df7ac16f758f89b053106fb08fbd1057d65806a83700882ae7fae
7fad08fb03f7cb052d06f758fc9b05e006090e ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/GLGOMG+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 118 /v put
pop
%%EndResource
[/N25/GLGOMG+Arial 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 425 595 417 re W n
/N43 <<
/SA false 
/OP false 
/op false 
/OPM 1 
/BG /_defaultblackgeneration load 
/UCR /_defaultundercolorremoval load 
/TR /_defaulttransfer load 
/SM 0.02 
>> /ExtGState defineRes pop
1 1 1 rg
/N43 /ExtGState findRes gs
1 i
21.36 820.64 552 -368.64 rf
57.84 810.67999 230.39999 -342 rf
0 0 0.5 RG
1 J
1 j
0.12 w
10 M
[]0 d
57.72 468.67999 230.52 342.12 re
57.72 468.67999 m
54.84 468.67999 l
S 
37.2 471.8 17.64 -6.36 rf
BT
/N25 1 Tf
7.06821 0 0 5.6926 37.2 466.6403 Tm
0 0 0 rg
0 Tc
0 Tw
( -1.00)Tj 
ET
57.72 502.88 m
54.84 502.88 l
S 
1 1 1 rg
39.12 506 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 39.12 500.8403 Tm
0 0 0 rg
(  -.80)Tj 
ET
57.72 537.08 m
54.84 537.08 l
S 
1 1 1 rg
39.12 540.2 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 39.12 535.0403 Tm
0 0 0 rg
(  -.60)Tj 
ET
57.72 571.28 m
54.84 571.28 l
S 
1 1 1 rg
39.12 574.39999 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 39.12 569.2404 Tm
0 0 0 rg
(  -.40)Tj 
ET
57.72 605.48 m
54.84 605.48 l
S 
1 1 1 rg
39.12 608.60001 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 39.12 603.44029 Tm
0 0 0 rg
(  -.20)Tj 
ET
57.72 639.67999 m
54.84 639.67999 l
S 
1 1 1 rg
39.48 642.8 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 39.48 637.6403 Tm
0 0 0 rg
(   .00)Tj 
ET
57.72 674 m
54.84 674 l
S 
1 1 1 rg
39.48 677.12 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 39.48 671.9603 Tm
0 0 0 rg
(   .20)Tj 
ET
57.72 708.2 m
54.84 708.2 l
S 
1 1 1 rg
39.48 711.32001 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 39.48 706.16029 Tm
0 0 0 rg
(   .40)Tj 
ET
57.72 742.39999 m
54.84 742.39999 l
S 
1 1 1 rg
39.48 745.52 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 39.48 740.36031 Tm
0 0 0 rg
(   .60)Tj 
ET
57.72 776.60001 m
54.84 776.60001 l
S 
1 1 1 rg
39.48 779.72 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 39.48 774.5603 Tm
0 0 0 rg
(   .80)Tj 
ET
57.72 810.8 m
54.84 810.8 l
S 
1 1 1 rg
37.56 813.92 17.28 -6.36 rf
BT
7.06821 0 0 5.6926 37.56 808.7603 Tm
0 0 0 rg
(  1.00)Tj 
ET
63.12 468.56 m
63.12 464.36 l
S 
1 1 1 rg
61.2 464.36 3.84 -6.36 rf
BT
7.06821 0 0 5.6926 61.2 459.2003 Tm
0 0 0 rg
(0)Tj 
ET
89.88 468.56 m
89.88 464.36 l
S 
1 1 1 rg
87.96001 464.36 3.84 -6.36 rf
BT
7.06821 0 0 5.6926 87.96001 459.2003 Tm
0 0 0 rg
(5)Tj 
ET
116.75999 468.56 m
116.75999 464.36 l
S 
1 1 1 rg
112.92 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 112.92 459.2003 Tm
0 0 0 rg
(10)Tj 
ET
143.52 468.56 m
143.52 464.36 l
S 
1 1 1 rg
139.67999 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 139.67999 459.2003 Tm
0 0 0 rg
(15)Tj 
ET
170.28 468.56 m
170.28 464.36 l
S 
1 1 1 rg
166.44 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 166.44 459.2003 Tm
0 0 0 rg
(20)Tj 
ET
197.03999 468.56 m
197.03999 464.36 l
S 
1 1 1 rg
193.2 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 193.2 459.2003 Tm
0 0 0 rg
(25)Tj 
ET
223.92 468.56 m
223.92 464.36 l
S 
1 1 1 rg
220.08 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 220.08 459.2003 Tm
0 0 0 rg
(30)Tj 
ET
250.67999 468.56 m
250.67999 464.36 l
S 
1 1 1 rg
246.84 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 246.84 459.2003 Tm
0 0 0 rg
(35)Tj 
ET
277.44 468.56 m
277.44 464.36 l
S 
1 1 1 rg
273.60001 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 273.60001 459.2003 Tm
0 0 0 rg
(40)Tj 
ET
1 1 1 rg
132.60001 817.39999 80.75999 -6.36 rf
BT
7.06821 0 0 5.6926 132.60001 812.2403 Tm
0 0 0 rg
(Residual ACF: Abs values)Tj 
ET
0 0.5 0.94099 RG
63.12 639.67999 m
63.12 810.8 l
63 639.67999 m
63 810.8 l
68.52 639.67999 m
68.52 674.84 l
68.39999 639.67999 m
68.39999 674.84 l
73.92 639.67999 m
73.92 677.60001 l
73.8 639.67999 m
73.8 677.60001 l
79.2 639.67999 m
79.2 696.32001 l
79.08 639.67999 m
79.08 696.32001 l
84.60001 639.67999 m
84.60001 651.08 l
84.48 639.67999 m
84.48 651.08 l
89.88 639.67999 m
89.88 632.84 l
89.75999 639.67999 m
89.75999 632.84 l
95.28 639.67999 m
95.28 636.67999 l
95.16 639.67999 m
95.16 636.67999 l
100.67999 639.67999 m
100.67999 623.48 l
100.56 639.67999 m
100.56 623.48 l
105.96001 639.67999 m
105.96001 625.75999 l
105.84 639.67999 m
105.84 625.75999 l
111.36 639.67999 m
111.36 630.32001 l
111.24001 639.67999 m
111.24001 630.32001 l
116.75999 639.67999 m
116.75999 626.60001 l
116.64 639.67999 m
116.64 626.60001 l
122.03999 639.67999 m
122.03999 636.32001 l
121.92 639.67999 m
121.92 636.32001 l
127.44 639.67999 m
127.44 646.64 l
127.32001 639.67999 m
127.32001 646.64 l
132.84 639.67999 m
132.84 643.39999 l
132.72 639.67999 m
132.72 643.39999 l
138.12 639.67999 m
138.12 665 l
138 639.67999 m
138 665 l
143.52 639.67999 m
143.52 645.92 l
143.39999 639.67999 m
143.39999 645.92 l
148.92 639.67999 m
148.92 681.08 l
148.8 639.67999 m
148.8 681.08 l
154.2 639.67999 m
154.2 651.92 l
154.08 639.67999 m
154.08 651.92 l
159.60001 639.67999 m
159.60001 635.12 l
159.48 639.67999 m
159.48 635.12 l
165 639.67999 m
165 648.56 l
164.88 639.67999 m
164.88 648.56 l
170.28 639.67999 m
170.28 631.03999 l
170.16 639.67999 m
170.16 631.03999 l
175.67999 639.67999 m
175.67999 627.08 l
175.56 639.67999 m
175.56 627.08 l
180.96001 639.67999 m
180.96001 629.48 l
180.84 639.67999 m
180.84 629.48 l
186.36 639.67999 m
186.36 624.08 l
186.24001 639.67999 m
186.24001 624.08 l
191.75999 639.67999 m
191.75999 617.72 l
191.64 639.67999 m
191.64 617.72 l
197.03999 639.67999 m
197.03999 627.44 l
196.92 639.67999 m
196.92 627.44 l
202.44 639.67999 m
202.44 631.39999 l
202.32001 639.67999 m
202.32001 631.39999 l
207.84 639.67999 m
207.84 627.92 l
207.72 639.67999 m
207.72 627.92 l
213.12 639.67999 m
213.12 648.67999 l
213 639.67999 m
213 648.67999 l
218.52 639.67999 m
218.52 652.64 l
218.39999 639.67999 m
218.39999 652.64 l
223.92 639.67999 m
223.92 659.84 l
223.8 639.67999 m
223.8 659.84 l
229.2 639.67999 m
229.2 653.96001 l
229.08 639.67999 m
229.08 653.96001 l
S 
234.60001 639.67999 m
234.60001 667.52 l
234.48 639.67999 m
234.48 667.52 l
240 639.67999 m
240 642.92 l
239.88 639.67999 m
239.88 642.92 l
245.28 639.67999 m
245.28 630.08 l
245.16 639.67999 m
245.16 630.08 l
250.67999 639.67999 m
250.67999 645.08 l
250.56 639.67999 m
250.56 645.08 l
256.08 639.67999 m
256.08 638.48 l
255.96001 639.67999 m
255.96001 638.48 l
261.36 639.67999 m
261.36 631.16 l
261.24001 639.67999 m
261.24001 631.16 l
266.75999 639.67999 m
266.75999 630.2 l
266.64 639.67999 m
266.64 630.2 l
272.03999 639.67999 m
272.03999 629.60001 l
271.92 639.67999 m
271.92 629.60001 l
277.44 639.67999 m
277.44 623.60001 l
277.32001 639.67999 m
277.32001 623.60001 l
S 
1 1 1 RG
[2.88 2.88 2.88 2.88 2.88 2.88 2.88 2.88 ]0 d
57.72 661.75999 m
288.36 661.75999 l
S 
0 0 0.5 RG
57.72 661.75999 m
288.36 661.75999 l
S 
1 1 1 RG
57.72 617.72 m
288.36 617.72 l
S 
0 0 0.5 RG
57.72 617.72 m
288.36 617.72 l
S 
[]0 d
57.72 639.67999 m
288.36 639.67999 l
S 
1 1 1 rg
324.84 810.67999 230.39999 -342 rf
324.72 468.67999 230.52 342.12 re
324.72 468.67999 m
321.84 468.67999 l
S 
304.2 471.8 17.64 -6.36 rf
BT
7.06821 0 0 5.6926 304.2 466.6403 Tm
0 0 0 rg
( -1.00)Tj 
ET
324.72 502.88 m
321.84 502.88 l
S 
1 1 1 rg
306.12 506 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 306.12 500.8403 Tm
0 0 0 rg
(  -.80)Tj 
ET
324.72 537.08 m
321.84 537.08 l
S 
1 1 1 rg
306.12 540.2 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 306.12 535.0403 Tm
0 0 0 rg
(  -.60)Tj 
ET
324.72 571.28 m
321.84 571.28 l
S 
1 1 1 rg
306.12 574.39999 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 306.12 569.2404 Tm
0 0 0 rg
(  -.40)Tj 
ET
324.72 605.48 m
321.84 605.48 l
S 
1 1 1 rg
306.12 608.60001 15.72 -6.36 rf
BT
7.06821 0 0 5.6926 306.12 603.44029 Tm
0 0 0 rg
(  -.20)Tj 
ET
324.72 639.67999 m
321.84 639.67999 l
S 
1 1 1 rg
306.48 642.8 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 306.48 637.6403 Tm
0 0 0 rg
(   .00)Tj 
ET
324.72 674 m
321.84 674 l
S 
1 1 1 rg
306.48 677.12 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 306.48 671.9603 Tm
0 0 0 rg
(   .20)Tj 
ET
324.72 708.2 m
321.84 708.2 l
S 
1 1 1 rg
306.48 711.32001 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 306.48 706.16029 Tm
0 0 0 rg
(   .40)Tj 
ET
324.72 742.39999 m
321.84 742.39999 l
S 
1 1 1 rg
306.48 745.52 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 306.48 740.36031 Tm
0 0 0 rg
(   .60)Tj 
ET
324.72 776.60001 m
321.84 776.60001 l
S 
1 1 1 rg
306.48 779.72 15.36 -6.36 rf
BT
7.06821 0 0 5.6926 306.48 774.5603 Tm
0 0 0 rg
(   .80)Tj 
ET
324.72 810.8 m
321.84 810.8 l
S 
1 1 1 rg
304.56 813.92 17.28 -6.36 rf
BT
7.06821 0 0 5.6926 304.56 808.7603 Tm
0 0 0 rg
(  1.00)Tj 
ET
330.12 468.56 m
330.12 464.36 l
S 
1 1 1 rg
328.2 464.36 3.84 -6.36 rf
BT
7.06821 0 0 5.6926 328.2 459.2003 Tm
0 0 0 rg
(0)Tj 
ET
356.88 468.56 m
356.88 464.36 l
S 
1 1 1 rg
354.96001 464.36 3.84 -6.36 rf
BT
7.06821 0 0 5.6926 354.96001 459.2003 Tm
0 0 0 rg
(5)Tj 
ET
383.75999 468.56 m
383.75999 464.36 l
S 
1 1 1 rg
379.92 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 379.92 459.2003 Tm
0 0 0 rg
(10)Tj 
ET
410.52 468.56 m
410.52 464.36 l
S 
1 1 1 rg
406.67999 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 406.67999 459.2003 Tm
0 0 0 rg
(15)Tj 
ET
437.28 468.56 m
437.28 464.36 l
S 
1 1 1 rg
433.44 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 433.44 459.2003 Tm
0 0 0 rg
(20)Tj 
ET
464.03999 468.56 m
464.03999 464.36 l
S 
1 1 1 rg
460.2 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 460.2 459.2003 Tm
0 0 0 rg
(25)Tj 
ET
490.92 468.56 m
490.92 464.36 l
S 
1 1 1 rg
487.08 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 487.08 459.2003 Tm
0 0 0 rg
(30)Tj 
ET
517.67999 468.56 m
517.67999 464.36 l
S 
1 1 1 rg
513.84 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 513.84 459.2003 Tm
0 0 0 rg
(35)Tj 
ET
544.44 468.56 m
544.44 464.36 l
S 
1 1 1 rg
540.60001 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 540.60001 459.2003 Tm
0 0 0 rg
(40)Tj 
ET
1 1 1 rg
403.67999 817.39999 72.60001 -6.36 rf
BT
7.06821 0 0 5.6926 403.67999 812.2403 Tm
0 0 0 rg
(Residual ACF: Squares)Tj 
ET
0 0.5 0.94099 RG
330.12 639.67999 m
330.12 810.8 l
330 639.67999 m
330 810.8 l
335.52 639.67999 m
335.52 650.36 l
335.39999 639.67999 m
335.39999 650.36 l
340.92 639.67999 m
340.92 657.56 l
340.8 639.67999 m
340.8 657.56 l
346.2 639.67999 m
346.2 687.32001 l
346.08 639.67999 m
346.08 687.32001 l
351.60001 639.67999 m
351.60001 644.84 l
351.48 639.67999 m
351.48 644.84 l
356.88 639.67999 m
356.88 637.39999 l
356.75999 639.67999 m
356.75999 637.39999 l
362.28 639.67999 m
362.28 635.84 l
362.16 639.67999 m
362.16 635.84 l
367.67999 639.67999 m
367.67999 632.48 l
367.56 639.67999 m
367.56 632.48 l
372.96001 639.67999 m
372.96001 634.52 l
372.84 639.67999 m
372.84 634.52 l
378.36 639.67999 m
378.36 634.39999 l
378.24001 639.67999 m
378.24001 634.39999 l
383.75999 639.67999 m
383.75999 633.8 l
383.64 639.67999 m
383.64 633.8 l
389.03999 639.67999 m
389.03999 638 l
388.92 639.67999 m
388.92 638 l
394.44 639.67999 m
394.44 638.12 l
394.32001 639.67999 m
394.32001 638.12 l
399.84 639.67999 m
399.84 640.28 l
399.72 639.67999 m
399.72 640.28 l
405.12 639.67999 m
405.12 651.92 l
405 639.67999 m
405 651.92 l
410.52 639.67999 m
410.52 637.03999 l
410.39999 639.67999 m
410.39999 637.03999 l
415.92 639.67999 m
415.92 671.48 l
415.8 639.67999 m
415.8 671.48 l
421.2 639.67999 m
421.2 643.28 l
421.08 639.67999 m
421.08 643.28 l
426.60001 639.67999 m
426.60001 636.92 l
426.48 639.67999 m
426.48 636.92 l
432 639.67999 m
432 652.75999 l
431.88 639.67999 m
431.88 652.75999 l
437.28 639.67999 m
437.28 634.39999 l
437.16 639.67999 m
437.16 634.39999 l
442.67999 639.67999 m
442.67999 635.48 l
442.56 639.67999 m
442.56 635.48 l
447.96001 639.67999 m
447.96001 634.39999 l
447.84 639.67999 m
447.84 634.39999 l
453.36 639.67999 m
453.36 632.96001 l
453.24001 639.67999 m
453.24001 632.96001 l
458.75999 639.67999 m
458.75999 631.75999 l
458.64 639.67999 m
458.64 631.75999 l
464.03999 639.67999 m
464.03999 633.2 l
463.92 639.67999 m
463.92 633.2 l
469.44 639.67999 m
469.44 633.92 l
469.32001 639.67999 m
469.32001 633.92 l
474.84 639.67999 m
474.84 634.16 l
474.72 639.67999 m
474.72 634.16 l
480.12 639.67999 m
480.12 640.75999 l
480 639.67999 m
480 640.75999 l
485.52 639.67999 m
485.52 644.12 l
485.39999 639.67999 m
485.39999 644.12 l
490.92 639.67999 m
490.92 649.88 l
490.8 639.67999 m
490.8 649.88 l
496.2 639.67999 m
496.2 645.44 l
496.08 639.67999 m
496.08 645.44 l
S 
501.60001 639.67999 m
501.60001 649.39999 l
501.48 639.67999 m
501.48 649.39999 l
507 639.67999 m
507 638.60001 l
506.88 639.67999 m
506.88 638.60001 l
512.28 639.67999 m
512.28 633.67999 l
512.16 639.67999 m
512.16 633.67999 l
517.67999 639.67999 m
517.67999 637.39999 l
517.56 639.67999 m
517.56 637.39999 l
523.08 639.67999 m
523.08 637.16 l
522.96001 639.67999 m
522.96001 637.16 l
528.36 639.67999 m
528.36 634.52 l
528.24001 639.67999 m
528.24001 634.52 l
533.75999 639.67999 m
533.75999 634.16 l
533.64 639.67999 m
533.64 634.16 l
539.03999 639.67999 m
539.03999 634.75999 l
538.92 639.67999 m
538.92 634.75999 l
544.44 639.67999 m
544.44 632.72 l
544.32001 639.67999 m
544.32001 632.72 l
S 
1 1 1 RG
[2.88 2.88 2.88 2.88 2.88 2.88 2.88 2.88 ]0 d
324.72 661.75999 m
555.36 661.75999 l
S 
0 0 0.5 RG
324.72 661.75999 m
555.36 661.75999 l
S 
1 1 1 RG
324.72 617.72 m
555.36 617.72 l
S 
0 0 0.5 RG
324.72 617.72 m
555.36 617.72 l
S 
[]0 d
324.72 639.67999 m
555.36 639.67999 l
S 
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
