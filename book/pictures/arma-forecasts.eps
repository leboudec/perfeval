%!PS-Adobe-3.0 EPSF-3.0
%%Title: (ITSM.pdf)
%%Version: 1 2
%%CreationDate: (D:20030328172530)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 454 595 842
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments

0 454 moveto
595 454 lineto
595 842 lineto
0 842 lineto
closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: l2check
%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show
72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 4.0 3
%%Copyright: Copyright 1998-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat/csfamily 
/? /! /| /: /+ /GetGlyphDirectory
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/OP here { /_OP? xdd } if
/op here { /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/OPM here { /_opmode xdd } if
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
%%EndResource
%%BeginResource: procset pdflev2
%%Version: 4.0 5
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 2
%%Title: PDF operators, with code specific for Level 2
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/initialize {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
false setoverprint
<</MaxFormItem 0>> setuserparams
} bd
/terminate { } bd
/m/moveto ld
/l/lineto ld
/c/curveto ld
/setSA/setstrokeadjust ld
/defineRes/defineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/_sfcs {_fcs setcolorspace} bind dd
/_sscs {_scs setcolorspace} bind dd
/_sfc
{
_fc aload pop
_fp null eq
{ setcolor }
{ _fp setpattern }
ifelse
} bind dd
/_ssc
{
_sc aload pop
_sp null eq { setcolor} { _sp setpattern } ifelse
} bind dd
/scn {
dup type /dicttype eq
{ dup /_fp xdd
/PaintType get 1 eq
{ /_fc _fillColors 0 get dd ilp }
{ /_fc _fillColors
_fcs 1 get
GetComps get dd
sc
}
ifelse
}
{ sc }
ifelse
} bd
/SCN {
dup type /dicttype eq
{ dup /_sp xdd
/PaintType get 1 eq
{ /_sc _strokeColors 0 get dd ilp }
{ /_sc _strokeColors _scs 1 get GetComps get dd
SC
}
ifelse
}
{ SC }
ifelse
} bd
/gs
{
begin
/SA here { setstrokeadjust } if
/BG here { setblackgeneration } if
/UCR here { setundercolorremoval } if
/FL here { i } if
/RI here { ri } if
/TR here
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} if
/sethalftonephase isdefined? { /HTP here { sethalftonephase } if } if
/HT here { sethalftone } if
currentdict gsDI
end
} bd
/sfc {
_op? setoverprint
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_OP? setoverprint
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {
{ { sfc rectfill }
{gsave sfc rectfill grestore clip newpath icl ilp}
{gsave sfc rectfill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/knownColorants? {
pop false
} bd
/makePat {
gsave
dup /Matrix get concat
matrix makepattern
grestore
/MadePattern defineRes pop
} bd
%%EndResource
%%BeginResource: procset spots
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Predefined (named) spot functions for PDF
21 dict dup begin
/CosineDot
{ 180 mul cos exch 180 mul cos add 2 div } bd
/Cross
{ abs exch abs 2 copy gt { exch } if pop neg } bd
/Diamond
{ abs exch abs 2 copy add .75 le
{ dup mul exch dup mul add 1 exch sub }
{ 2 copy add 1.23 le
{ .85 mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse }
ifelse } bd
/Double
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add } bd
/DoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add } bd
/Ellipse
{ abs exch abs 2 copy 3 mul exch 4 mul add 3 sub dup 0 lt
{ pop dup mul exch .75 div dup mul add 4 div
1 exch sub }
{ dup 1 gt
{pop 1 exch sub dup mul exch 1 exch sub
.75 div dup mul add 4 div 1 sub }
{ .5 exch sub exch pop exch pop }
ifelse }
ifelse } bd
/EllipseA
{ dup mul .9 mul exch dup mul add 1 exch sub } bd
/EllipseB
{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub } bd
/EllipseC
{ dup mul exch dup mul .9 mul add 1 exch sub } bd
/InvertedDouble
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedDoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedEllipseA
{ dup mul .9 mul exch dup mul add 1 sub } bd
/InvertedEllipseC
{ dup mul exch dup mul .9 mul add 1 sub } bd
/InvertedSimpleDot
{ dup mul exch dup mul add 1 sub } bd
/Line
{ exch pop abs neg } bd
/LineX
{ pop } bd
/LineY
{ exch pop } bd
/Rhomboid
{ abs exch abs 0.9 mul add 2 div } bd
/Round
{ abs exch abs 2 copy add 1 le
{ dup mul exch dup mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse } bd
/SimpleDot
{ dup mul exch dup mul add 1 exch sub } bd
/Square
{ abs exch abs 2 copy lt { exch } if pop neg } bd
end
{ /Function defineRes pop } forall
%%EndResource
%%BeginResource: procset pdftext
%%Version: 4.0 2
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
dup {currentfont /Encoding get dup length 33 ge 
{32 get /space eq and}{pop}ifelse
}if
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
_intT
{currentpoint iTm moveto}
if
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%BeginResource: font KMDCGB+Arial
11 dict begin
/FontName /KMDCGB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/lenIV -1 def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 256 dict dup begin
/.notdef 4 RD 
8b8b0d0e ND 
/g0 40 RD 
f711f9820df88816f90507fc8806fd0507f8880609fc78f8f515f86806fc
e507fc6806f8e507090e ND 
/g3 5 RD 
8bf7aa0d0e ND 
/g16 21 RD 
abf7e10df7a3f76b15e307fba4063307f7a406090e ND 
/g17 16 RD 
e6f7aa0def16ef0727062707ef06090e ND 
/g19 163 RD 
b5f8c00dd2c915b25ac172d08b08bf8bb699ada708afa7a4b39cbf089dbe
93cf8bdf088bd286c380b50880b67cae78a8087aa872a16e9a086e9c6992
658b08578b607d696f08687072637a5708785783478b36088bfb1aa32aba
4f088b0609cbf8a915a3adab9cb38b08b68bac78a66408a864983d8bfb0a
088bfb0a7d3d7064086f656977638b08638b699e70b2086eb27ed98bf70a
088bf70a9adca9b7088a07090e ND 
/g20 52 RD 
f701f8c00df79bf9631552067c6c716b666a08666b606f5a74083607a694
aa9bad9f08af9fa6a0a09f08fcc407e306f96207090e ND 
/g21 148 RD 
a8f8c00df70edf15959b979b9a9b089b9aaca9c0b708cbc2b8b4a6aa08a6
a99fa897a70895a892a78ba8088bc177bb63b10863b3559d468b08468b55
7963680862687458854808e582058bb698afa5a408a4a4ad98b68b08b38b
ac7fa47308a373986e8b68088b6a7d686f6608706456593e4b0859636567
706c08706a786c7f6b08827888778c7608f86e06df07fbf48a05090e ND 
/g23 55 RD 
98f8c00df82216f73f07ec06dc072a06f864074306fbdbfc64053a07f7cb
06fb3f07e30609fbcdf79015f775f7d605fbd607fb7506090e ND 
/g25 211 RD 
b1f8c00df820f9341567aa5d9b538b083e8b4f705e5408594c71268bfb1e
088bfb0fa232b95508ba55c670d48b08b78bb195ada008ad9fa6a99eb208
9eb195b58bb8088bcf76c362b60862b759a0508b086a8b6b836c7b086c7d
7173766b088cd093c39bb2089bb2a1a8a79f089f9ca492a78b08b08ba77e
a372089b7c9672936808e0920586c374b767aa0809fb91fbdc15a6a8ad99
b38b08b38bad7da56f08a56d98658b59088b587e62706d08716d6b7c668b
08708b7492749a0872997aa07ea7087fa784a88ba9088bb999b0a7a80809
0e ND 
/g27 252 RD 
b4f8c00daef7d815746c7f648b5c088b4da157b66108b661c476d28b08d1
8bc4a0b6b508b7b4a0bf8bc8088bb780b174ab0874ab6aa25f9908ae99a5
9e9ca4089ea293a98bac088bbf78b765af0865b0599d4d8b084b8b5a7966
68086667785f8b57088b69946d9d72089b73a778b07e085e7e6a76736c08
09f709f7b715a1a0a796ad8b08ab8ba780a17508a37595708b6b088b6b80
7176760875766f80698b08698b6e9675a108769f80a78bad088baa96a4a1
a1080975fbc615a6a6ad99b58b08b68bae7da76f08a77099688b61088b60
7d697070087071687d618b08718b71917398087498799d7fa20880a485a3
8ba4088bb398aea6a608090e ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/KMDCGB+Arial findfont /Encoding get
dup 0 /g0 put
dup 32 /g3 put
dup 45 /g16 put
dup 46 /g17 put
dup 48 /g19 put
dup 49 /g20 put
dup 50 /g21 put
dup 52 /g23 put
dup 54 /g25 put
dup 56 /g27 put
pop
%%EndResource
[/N10/KMDCGB+Arial -1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
0 454 595 388 re W n
/N9 [/CIEBasedABC <<
/MatrixLMN [0.412399 0.212601 0.0193024 0.357605 0.715195 
0.119202 0.180496 0.0722046 0.9505 ]
/DecodeLMN [{2.22221 exp}bind dup dup]
/WhitePoint [0.9505 1 1.089]
>>]/ColorSpace defineRes pop
/N27 <<
/SA false 
/TR {}
/SM 0.02 
>> /ExtGState defineRes pop
/N9 /ColorSpace findRes cs
1 1 1 sc
/N27 /ExtGState findRes gs
1 i
21.36 820.64 552 -368.64 rf
57.84 810.67999 497.39999 -342 rf
/N9 /ColorSpace findRes CS
0 0 0.502 SC
1 J
1 j
0.12 w
10 M
[]0 d
57.72 468.67999 497.52 342.12 re
57.72 478.03999 m
51.60001 478.03999 l
S 
39.72 481.16 11.88 -6.36 rf
BT
/N10 1 Tf
7.06821 0 0 5.6926 39.72 476.00031 Tm
0 0 0 sc
0 Tc
0 Tw
(-10.)Tj 
ET
57.72 511.52 m
51.60001 511.52 l
S 
1 1 1 sc
41.64 514.64 9.96001 -6.36 rf
BT
7.06821 0 0 5.6926 41.64 509.4803 Tm
0 0 0 sc
( -8.)Tj 
ET
57.72 545 m
51.60001 545 l
S 
1 1 1 sc
41.64 548.12 9.96001 -6.36 rf
BT
7.06821 0 0 5.6926 41.64 542.9603 Tm
0 0 0 sc
( -6.)Tj 
ET
57.72 578.48 m
51.60001 578.48 l
S 
1 1 1 sc
41.64 581.60001 9.96001 -6.36 rf
BT
7.06821 0 0 5.6926 41.64 576.44029 Tm
0 0 0 sc
( -4.)Tj 
ET
57.72 611.96001 m
51.60001 611.96001 l
S 
1 1 1 sc
41.64 615.08 9.96001 -6.36 rf
BT
7.06821 0 0 5.6926 41.64 609.9203 Tm
0 0 0 sc
( -2.)Tj 
ET
57.72 645.44 m
51.60001 645.44 l
S 
1 1 1 sc
42 648.56 9.60001 -6.36 rf
BT
7.06821 0 0 5.6926 42 643.4003 Tm
0 0 0 sc
(  0.)Tj 
ET
57.72 678.92 m
51.60001 678.92 l
S 
1 1 1 sc
42 682.03999 9.60001 -6.36 rf
BT
7.06821 0 0 5.6926 42 676.88029 Tm
0 0 0 sc
(  2.)Tj 
ET
57.72 712.39999 m
51.60001 712.39999 l
S 
1 1 1 sc
42 715.52 9.60001 -6.36 rf
BT
7.06821 0 0 5.6926 42 710.36031 Tm
0 0 0 sc
(  4.)Tj 
ET
57.72 745.88 m
51.60001 745.88 l
S 
1 1 1 sc
42 749 9.60001 -6.36 rf
BT
7.06821 0 0 5.6926 42 743.8403 Tm
0 0 0 sc
(  6.)Tj 
ET
57.72 779.36 m
51.60001 779.36 l
S 
1 1 1 sc
42 782.48 9.60001 -6.36 rf
BT
7.06821 0 0 5.6926 42 777.3203 Tm
0 0 0 sc
(  8.)Tj 
ET
65.64 468.56 m
65.64 464.36 l
S 
1 1 1 sc
63.72 464.36 3.84 -6.36 rf
BT
7.06821 0 0 5.6926 63.72 459.2003 Tm
0 0 0 sc
(0)Tj 
ET
142.08 468.56 m
142.08 464.36 l
S 
1 1 1 sc
138.24001 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 138.24001 459.2003 Tm
0 0 0 sc
(20)Tj 
ET
218.52 468.56 m
218.52 464.36 l
S 
1 1 1 sc
214.67999 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 214.67999 459.2003 Tm
0 0 0 sc
(40)Tj 
ET
294.96001 468.56 m
294.96001 464.36 l
S 
1 1 1 sc
291.12 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 291.12 459.2003 Tm
0 0 0 sc
(60)Tj 
ET
371.39999 468.56 m
371.39999 464.36 l
S 
1 1 1 sc
367.56 464.36 7.67999 -6.36 rf
BT
7.06821 0 0 5.6926 367.56 459.2003 Tm
0 0 0 sc
(80)Tj 
ET
447.84 468.56 m
447.84 464.36 l
S 
1 1 1 sc
442.08 464.36 11.52 -6.36 rf
BT
7.06821 0 0 5.6926 442.08 459.2003 Tm
0 0 0 sc
(100)Tj 
ET
524.39999 468.56 m
524.39999 464.36 l
S 
1 1 1 sc
518.64 464.36 11.52 -6.36 rf
BT
7.06821 0 0 5.6926 518.64 459.2003 Tm
0 0 0 sc
(120)Tj 
ET
0 0.62399 0.502 SC
69.48 638.48 m
69.48 638.48 l
73.32001 598.75999 l
77.16 688.28 l
81 584.72 l
84.84 737.84 l
88.56 586.64 l
92.39999 737.24001 l
96.24001 589.16 l
100.08 715.28 l
103.92 609.2 l
107.75999 682.64 l
111.60001 642.8 l
115.32001 649.52 l
119.16 667.75999 l
123 591.32001 l
126.84 705.2 l
130.67999 576.44 l
134.52 710.84 l
138.36 584.24001 l
142.08 719.12 l
145.92 573.56 l
149.75999 701.96001 l
153.60001 564.08 l
157.44 716.36 l
161.28 554.72 l
165.12 713 l
168.84 595.28 l
172.67999 640.52 l
176.52 643.75999 l
180.36 610.52 l
184.2 651.32001 l
188.03999 638.72 l
191.75999 644.60001 l
195.60001 655.03999 l
199.44 654.44 l
203.28 634.16 l
207.12 708.56 l
210.96001 555.56 l
214.8 749.48 l
218.52 501.08 l
222.36 767.48 l
226.2 514.16 l
230.03999 766.88 l
233.88 554.96001 l
237.72 754.03999 l
241.56 573.08 l
245.28 728.24001 l
249.12 574.64 l
252.96001 703.03999 l
256.8 611.60001 l
260.64 649.52 l
264.48 645.08 l
268.2 653.24001 l
272.03999 611 l
275.88 680.72 l
279.72 583.39999 l
283.56 705.92 l
287.39999 574.52 l
291.24001 714.2 l
294.96001 581.60001 l
298.8 683.60001 l
302.64 612.92 l
306.48 654.08 l
310.32001 643.64 l
314.16 644.84 l
318 660.32001 l
321.72 656.60001 l
325.56 635.12 l
329.39999 683 l
333.24001 615.92 l
337.08 646.64 l
340.92 645.56 l
344.75999 611.36 l
348.48 664.64 l
352.32001 605.24001 l
356.16 705.44 l
360 572.24001 l
363.84 736.16 l
367.67999 541.16 l
371.39999 743.60001 l
375.24001 524.84 l
379.08 766.03999 l
382.92 497.12 l
386.75999 782.36 l
390.60001 520.64 l
394.44 739.03999 l
398.16 544.28 l
402 722.60001 l
405.84 573.92 l
409.67999 659.60001 l
413.52 640.03999 l
417.36 614.36 l
421.2 664.03999 l
424.92 610.75999 l
428.75999 665.60001 l
432.60001 623.60001 l
436.44 641.48 l
440.28 615.08 l
444.12 649.88 l
447.84 593.36 l
S 
1 1 1 sc
69.36 638.60001 0.24001 -0.24001 rf
0 0.62399 0.565 SC
69.24001 638.36 0.36 0.36 re
S 
73.2 598.88 0.24001 -0.24001 rf
73.08 598.64 0.36 0.36 re
S 
77.03999 688.39999 0.24001 -0.24001 rf
76.92 688.16 0.36 0.36 re
S 
80.88 584.84 0.24001 -0.24001 rf
80.75999 584.60001 0.36 0.36 re
S 
84.72 737.96001 0.24001 -0.24001 rf
84.60001 737.72 0.36 0.36 re
S 
88.44 586.75999 0.24001 -0.24001 rf
88.32001 586.52 0.36 0.36 re
S 
92.28 737.36 0.24001 -0.24001 rf
92.16 737.12 0.36 0.36 re
S 
96.12 589.28 0.24001 -0.24001 rf
96 589.03999 0.36 0.36 re
S 
99.96001 715.39999 0.24001 -0.24001 rf
99.84 715.16 0.36 0.36 re
S 
103.8 609.32001 0.24001 -0.24001 rf
103.67999 609.08 0.36 0.36 re
S 
107.64 682.75999 0.24001 -0.24001 rf
107.52 682.52 0.36 0.36 re
S 
111.48 642.92 0.24001 -0.24001 rf
111.36 642.67999 0.36 0.36 re
S 
115.2 649.64 0.24001 -0.24001 rf
115.08 649.39999 0.36 0.36 re
S 
119.03999 667.88 0.24001 -0.24001 rf
118.92 667.64 0.36 0.36 re
S 
122.88 591.44 0.24001 -0.24001 rf
122.75999 591.2 0.36 0.36 re
S 
126.72 705.32001 0.24001 -0.24001 rf
126.60001 705.08 0.36 0.36 re
S 
130.56 576.56 0.24001 -0.24001 rf
130.44 576.32001 0.36 0.36 re
S 
134.39999 710.96001 0.24001 -0.24001 rf
134.28 710.72 0.36 0.36 re
S 
138.24001 584.36 0.24001 -0.24001 rf
138.12 584.12 0.36 0.36 re
S 
141.96001 719.24001 0.24001 -0.24001 rf
141.84 719 0.36 0.36 re
S 
145.8 573.67999 0.24001 -0.24001 rf
145.67999 573.44 0.36 0.36 re
S 
149.64 702.08 0.24001 -0.24001 rf
149.52 701.84 0.36 0.36 re
S 
153.48 564.2 0.24001 -0.24001 rf
153.36 563.96001 0.36 0.36 re
S 
157.32001 716.48 0.24001 -0.24001 rf
157.2 716.24001 0.36 0.36 re
S 
161.16 554.84 0.24001 -0.24001 rf
161.03999 554.60001 0.36 0.36 re
S 
165 713.12 0.24001 -0.24001 rf
164.88 712.88 0.36 0.36 re
S 
168.72 595.39999 0.24001 -0.24001 rf
168.60001 595.16 0.36 0.36 re
S 
172.56 640.64 0.24001 -0.24001 rf
172.44 640.39999 0.36 0.36 re
S 
176.39999 643.88 0.24001 -0.24001 rf
176.28 643.64 0.36 0.36 re
S 
180.24001 610.64 0.24001 -0.24001 rf
180.12 610.39999 0.36 0.36 re
S 
184.08 651.44 0.24001 -0.24001 rf
183.96001 651.2 0.36 0.36 re
S 
187.92 638.84 0.24001 -0.24001 rf
187.8 638.60001 0.36 0.36 re
S 
191.64 644.72 0.24001 -0.24001 rf
191.52 644.48 0.36 0.36 re
S 
195.48 655.16 0.24001 -0.24001 rf
195.36 654.92 0.36 0.36 re
S 
199.32001 654.56 0.24001 -0.24001 rf
199.2 654.32001 0.36 0.36 re
S 
203.16 634.28 0.24001 -0.24001 rf
203.03999 634.03999 0.36 0.36 re
S 
207 708.67999 0.24001 -0.24001 rf
206.88 708.44 0.36 0.36 re
S 
210.84 555.67999 0.24001 -0.24001 rf
210.72 555.44 0.36 0.36 re
S 
214.67999 749.60001 0.24001 -0.24001 rf
214.56 749.36 0.36 0.36 re
S 
218.39999 501.2 0.24001 -0.24001 rf
218.28 500.96001 0.36 0.36 re
S 
222.24001 767.60001 0.24001 -0.24001 rf
222.12 767.36 0.36 0.36 re
S 
226.08 514.28 0.24001 -0.24001 rf
225.96001 514.03999 0.36 0.36 re
S 
229.92 767 0.24001 -0.24001 rf
229.8 766.75999 0.36 0.36 re
S 
233.75999 555.08 0.24001 -0.24001 rf
233.64 554.84 0.36 0.36 re
S 
237.60001 754.16 0.24001 -0.24001 rf
237.48 753.92 0.36 0.36 re
S 
241.44 573.2 0.24001 -0.24001 rf
241.32001 572.96001 0.36 0.36 re
S 
245.16 728.36 0.24001 -0.24001 rf
245.03999 728.12 0.36 0.36 re
S 
249 574.75999 0.24001 -0.24001 rf
248.88 574.52 0.36 0.36 re
S 
252.84 703.16 0.24001 -0.24001 rf
252.72 702.92 0.36 0.36 re
S 
256.67999 611.72 0.24001 -0.24001 rf
256.56 611.48 0.36 0.36 re
S 
260.52 649.64 0.24001 -0.24001 rf
260.39999 649.39999 0.36 0.36 re
S 
264.36 645.2 0.24001 -0.24001 rf
264.24001 644.96001 0.36 0.36 re
S 
268.08 653.36 0.24001 -0.24001 rf
267.96001 653.12 0.36 0.36 re
S 
271.92 611.12 0.24001 -0.24001 rf
271.8 610.88 0.36 0.36 re
S 
275.75999 680.84 0.24001 -0.24001 rf
275.64 680.60001 0.36 0.36 re
S 
279.60001 583.52 0.24001 -0.24001 rf
279.48 583.28 0.36 0.36 re
S 
283.44 706.03999 0.24001 -0.24001 rf
283.32001 705.8 0.36 0.36 re
S 
287.28 574.64 0.24001 -0.24001 rf
287.16 574.39999 0.36 0.36 re
S 
291.12 714.32001 0.24001 -0.24001 rf
291 714.08 0.36 0.36 re
S 
294.84 581.72 0.24001 -0.24001 rf
294.72 581.48 0.36 0.36 re
S 
298.67999 683.72 0.24001 -0.24001 rf
298.56 683.48 0.36 0.36 re
S 
302.52 613.03999 0.24001 -0.24001 rf
302.39999 612.8 0.36 0.36 re
S 
306.36 654.2 0.24001 -0.24001 rf
306.24001 653.96001 0.36 0.36 re
S 
310.2 643.75999 0.24001 -0.24001 rf
310.08 643.52 0.36 0.36 re
S 
314.03999 644.96001 0.24001 -0.24001 rf
313.92 644.72 0.36 0.36 re
S 
317.88 660.44 0.24001 -0.24001 rf
317.75999 660.2 0.36 0.36 re
S 
321.60001 656.72 0.24001 -0.24001 rf
321.48 656.48 0.36 0.36 re
S 
325.44 635.24001 0.24001 -0.24001 rf
325.32001 635 0.36 0.36 re
S 
329.28 683.12 0.24001 -0.24001 rf
329.16 682.88 0.36 0.36 re
S 
333.12 616.03999 0.24001 -0.24001 rf
333 615.8 0.36 0.36 re
S 
336.96001 646.75999 0.24001 -0.24001 rf
336.84 646.52 0.36 0.36 re
S 
340.8 645.67999 0.24001 -0.24001 rf
340.67999 645.44 0.36 0.36 re
S 
344.64 611.48 0.24001 -0.24001 rf
344.52 611.24001 0.36 0.36 re
S 
348.36 664.75999 0.24001 -0.24001 rf
348.24001 664.52 0.36 0.36 re
S 
352.2 605.36 0.24001 -0.24001 rf
352.08 605.12 0.36 0.36 re
S 
356.03999 705.56 0.24001 -0.24001 rf
355.92 705.32001 0.36 0.36 re
S 
359.88 572.36 0.24001 -0.24001 rf
359.75999 572.12 0.36 0.36 re
S 
363.72 736.28 0.24001 -0.24001 rf
363.60001 736.03999 0.36 0.36 re
S 
367.56 541.28 0.24001 -0.24001 rf
367.44 541.03999 0.36 0.36 re
S 
371.28 743.72 0.24001 -0.24001 rf
371.16 743.48 0.36 0.36 re
S 
375.12 524.96001 0.24001 -0.24001 rf
375 524.72 0.36 0.36 re
S 
378.96001 766.16 0.24001 -0.24001 rf
378.84 765.92 0.36 0.36 re
S 
382.8 497.24001 0.24001 -0.24001 rf
382.67999 497 0.36 0.36 re
S 
386.64 782.48 0.24001 -0.24001 rf
386.52 782.24001 0.36 0.36 re
S 
390.48 520.75999 0.24001 -0.24001 rf
390.36 520.52 0.36 0.36 re
S 
394.32001 739.16 0.24001 -0.24001 rf
394.2 738.92 0.36 0.36 re
S 
398.03999 544.39999 0.24001 -0.24001 rf
397.92 544.16 0.36 0.36 re
S 
401.88 722.72 0.24001 -0.24001 rf
401.75999 722.48 0.36 0.36 re
S 
405.72 574.03999 0.24001 -0.24001 rf
405.60001 573.8 0.36 0.36 re
S 
409.56 659.72 0.24001 -0.24001 rf
409.44 659.48 0.36 0.36 re
S 
413.39999 640.16 0.24001 -0.24001 rf
413.28 639.92 0.36 0.36 re
S 
417.24001 614.48 0.24001 -0.24001 rf
417.12 614.24001 0.36 0.36 re
S 
421.08 664.16 0.24001 -0.24001 rf
420.96001 663.92 0.36 0.36 re
S 
424.8 610.88 0.24001 -0.24001 rf
424.67999 610.64 0.36 0.36 re
S 
428.64 665.72 0.24001 -0.24001 rf
428.52 665.48 0.36 0.36 re
S 
432.48 623.72 0.24001 -0.24001 rf
432.36 623.48 0.36 0.36 re
S 
436.32001 641.60001 0.24001 -0.24001 rf
436.2 641.36 0.36 0.36 re
S 
440.16 615.2 0.24001 -0.24001 rf
440.03999 614.96001 0.36 0.36 re
S 
444 650 0.24001 -0.24001 rf
443.88 649.75999 0.36 0.36 re
S 
447.72 593.48 0.24001 -0.24001 rf
447.60001 593.24001 0.36 0.36 re
S 
0.85899 0.161 0.259 SC
451.67999 671.12 m
451.67999 671.12 l
455.52 604.16 l
459.36 673.52 l
463.2 615.67999 l
467.03999 670.03999 l
470.88 622.28 l
474.60001 665.72 l
478.44 626.84 l
482.28 662 l
486.12 630.44 l
489.96001 658.88 l
493.8 633.32001 l
497.64 656.36 l
501.36 635.60001 l
505.2 654.32001 l
509.03999 637.52 l
512.88 652.64 l
516.72 638.96001 l
520.56 651.2 l
524.39999 640.28 l
528.12 650.12 l
531.96001 641.24001 l
535.8 649.28 l
539.64 642.08 l
543.48 648.56 l
S 
0.85899 0.161 0.314 sc
451.56 671.24001 0.24001 -0.24001 rf
0.85899 0.161 0.314 SC
451.44 671 0.36 0.36 re
S 
455.39999 604.28 0.24001 -0.24001 rf
455.28 604.03999 0.36 0.36 re
S 
459.24001 673.64 0.24001 -0.24001 rf
459.12 673.39999 0.36 0.36 re
S 
463.08 615.8 0.24001 -0.24001 rf
462.96001 615.56 0.36 0.36 re
S 
466.92 670.16 0.24001 -0.24001 rf
466.8 669.92 0.36 0.36 re
S 
470.75999 622.39999 0.24001 -0.24001 rf
470.64 622.16 0.36 0.36 re
S 
474.48 665.84 0.24001 -0.24001 rf
474.36 665.60001 0.36 0.36 re
S 
478.32001 626.96001 0.24001 -0.24001 rf
478.2 626.72 0.36 0.36 re
S 
482.16 662.12 0.24001 -0.24001 rf
482.03999 661.88 0.36 0.36 re
S 
486 630.56 0.24001 -0.24001 rf
485.88 630.32001 0.36 0.36 re
S 
489.84 659 0.24001 -0.24001 rf
489.72 658.75999 0.36 0.36 re
S 
493.67999 633.44 0.24001 -0.24001 rf
493.56 633.2 0.36 0.36 re
S 
497.52 656.48 0.24001 -0.24001 rf
497.39999 656.24001 0.36 0.36 re
S 
501.24001 635.72 0.24001 -0.24001 rf
501.12 635.48 0.36 0.36 re
S 
505.08 654.44 0.24001 -0.24001 rf
504.96001 654.2 0.36 0.36 re
S 
508.92 637.64 0.24001 -0.24001 rf
508.8 637.39999 0.36 0.36 re
S 
512.75999 652.75999 0.24001 -0.24001 rf
512.64 652.52 0.36 0.36 re
S 
516.60001 639.08 0.24001 -0.24001 rf
516.48 638.84 0.36 0.36 re
S 
520.44 651.32001 0.24001 -0.24001 rf
520.32001 651.08 0.36 0.36 re
S 
524.28 640.39999 0.24001 -0.24001 rf
524.16 640.16 0.36 0.36 re
S 
528 650.24001 0.24001 -0.24001 rf
527.88 650 0.36 0.36 re
S 
531.84 641.36 0.24001 -0.24001 rf
531.72 641.12 0.36 0.36 re
S 
535.67999 649.39999 0.24001 -0.24001 rf
535.56 649.16 0.36 0.36 re
S 
539.52 642.2 0.24001 -0.24001 rf
539.39999 641.96001 0.36 0.36 re
S 
543.36 648.67999 0.24001 -0.24001 rf
543.24001 648.44 0.36 0.36 re
S 
0.85899 0.161 0.259 SC
451.67999 704 m
451.67999 704 l
455.52 646.28 l
459.36 743.84 l
463.2 694.03999 l
467.03999 757.52 l
470.88 715.16 l
474.60001 763.39999 l
478.44 728 l
482.28 765.92 l
486.12 736.52 l
489.96001 766.64 l
493.8 742.52 l
497.64 766.64 l
501.36 746.84 l
505.2 766.16 l
509.03999 749.96001 l
512.88 765.56 l
516.72 752.36 l
520.56 764.84 l
524.39999 754.03999 l
528.12 764.24001 l
531.96001 755.48 l
535.8 763.64 l
539.64 756.44 l
543.48 763.03999 l
451.67999 638.36 m
451.67999 638.36 l
455.52 562.16 l
459.36 603.2 l
463.2 537.32001 l
467.03999 582.44 l
470.88 529.28 l
474.60001 568.16 l
478.44 525.8 l
482.28 558.2 l
486.12 524.36 l
489.96001 551.12 l
493.8 524.12 l
497.64 546.08 l
501.36 524.48 l
505.2 542.36 l
509.03999 525.08 l
512.88 539.72 l
516.72 525.67999 l
520.56 537.67999 l
524.39999 526.39999 l
528.12 536.12 l
531.96001 527 l
535.8 534.92 l
539.64 527.60001 l
543.48 533.96001 l
S 
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
